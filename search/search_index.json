{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spring\u7cfb\u5217 Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 Spring Bean\u751f\u547d\u5468\u671f \u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58","title":"Home"},{"location":"#spring","text":"Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 Spring Bean\u751f\u547d\u5468\u671f \u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58","title":"Spring\u7cfb\u5217"},{"location":"java/%20volatile/","text":"volatile\u7684\u7528\u9014 1.\u7ebf\u7a0b\u53ef\u89c1\u6027 package com.mashibing.testvolatile; public class T01_ThreadVisibility { private static volatile boolean flag = true; public static void main(String[] args) throws InterruptedException { new Thread(()-> { while (flag) { //do sth } System.out.println(\"end\"); }, \"server\").start(); Thread.sleep(1000); flag = false; } } 2.\u9632\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f \u95ee\u9898\uff1aDCL\u5355\u4f8b\u9700\u4e0d\u9700\u8981\u52a0volatile\uff1f CPU\u7684\u57fa\u7840\u77e5\u8bc6 \u7f13\u5b58\u884c\u5bf9\u9f50 \u7f13\u5b58\u884c64\u4e2a\u5b57\u8282\u662fCPU\u540c\u6b65\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u7f13\u5b58\u884c\u9694\u79bb\u4f1a\u6bd4\u4f2a\u5171\u4eab\u6548\u7387\u8981\u9ad8 Disruptor ```java package com.mashibing.juc.c_028_FalseSharing; public class T02_CacheLinePadding { private static class Padding { public volatile long p1, p2, p3, p4, p5, p6, p7; // } private static class T extends Padding { public volatile long x = 0L; } public static T[] arr = new T[2]; static { arr[0] = new T(); arr[1] = new T(); } public static void main(String[] args) throws Exception { Thread t1 = new Thread(()->{ for (long i = 0; i < 1000_0000L; i++) { arr[0].x = i; } }); Thread t2 = new Thread(()->{ for (long i = 0; i < 1000_0000L; i++) { arr[1].x = i; } }); final long start = System.nanoTime(); t1.start(); t2.start(); t1.join(); t2.join(); System.out.println((System.nanoTime() - start)/100_0000); } } ``` MESI \u4f2a\u5171\u4eab \u5408\u5e76\u5199 CPU\u5185\u90e8\u76844\u4e2a\u5b57\u8282\u7684Buffer ```java package com.mashibing.juc.c_029_WriteCombining; public final class WriteCombining { private static final int ITERATIONS = Integer.MAX_VALUE; private static final int ITEMS = 1 << 24; private static final int MASK = ITEMS - 1; private static final byte[] arrayA = new byte[ITEMS]; private static final byte[] arrayB = new byte[ITEMS]; private static final byte[] arrayC = new byte[ITEMS]; private static final byte[] arrayD = new byte[ITEMS]; private static final byte[] arrayE = new byte[ITEMS]; private static final byte[] arrayF = new byte[ITEMS]; public static void main(final String[] args) { for (int i = 1; i <= 3; i++) { System.out.println(i + \" SingleLoop duration (ns) = \" + runCaseOne()); System.out.println(i + \" SplitLoop duration (ns) = \" + runCaseTwo()); } } public static long runCaseOne() { long start = System.nanoTime(); int i = ITERATIONS; while (--i != 0) { int slot = i & MASK; byte b = (byte) i; arrayA[slot] = b; arrayB[slot] = b; arrayC[slot] = b; arrayD[slot] = b; arrayE[slot] = b; arrayF[slot] = b; } return System.nanoTime() - start; } public static long runCaseTwo() { long start = System.nanoTime(); int i = ITERATIONS; while (--i != 0) { int slot = i & MASK; byte b = (byte) i; arrayA[slot] = b; arrayB[slot] = b; arrayC[slot] = b; } i = ITERATIONS; while (--i != 0) { int slot = i & MASK; byte b = (byte) i; arrayD[slot] = b; arrayE[slot] = b; arrayF[slot] = b; } return System.nanoTime() - start; } } ``` \u6307\u4ee4\u91cd\u6392\u5e8f ```java package com.mashibing.jvm.c3_jmm; public class T04_Disorder { private static int x = 0, y = 0; private static int a = 0, b =0; public static void main(String[] args) throws InterruptedException { int i = 0; for(;;) { i++; x = 0; y = 0; a = 0; b = 0; Thread one = new Thread(new Runnable() { public void run() { //\u7531\u4e8e\u7ebf\u7a0bone\u5148\u542f\u52a8\uff0c\u4e0b\u9762\u8fd9\u53e5\u8bdd\u8ba9\u5b83\u7b49\u4e00\u7b49\u7ebf\u7a0btwo. \u8bfb\u7740\u53ef\u6839\u636e\u81ea\u5df1\u7535\u8111\u7684\u5b9e\u9645\u6027\u80fd\u9002\u5f53\u8c03\u6574\u7b49\u5f85\u65f6\u95f4. //shortWait(100000); a = 1; x = b; } }); Thread other = new Thread(new Runnable() { public void run() { b = 1; y = a; } }); one.start();other.start(); one.join();other.join(); String result = \"\u7b2c\" + i + \"\u6b21 (\" + x + \",\" + y + \"\uff09\"; if(x == 0 && y == 0) { System.err.println(result); break; } else { //System.out.println(result); } } } public static void shortWait(long interval){ long start = System.nanoTime(); long end; do{ end = System.nanoTime(); }while(start + interval >= end); } } ``` volatile\u5982\u4f55\u89e3\u51b3\u6307\u4ee4\u91cd\u6392\u5e8f 1: volatile i 2: ACC_VOLATILE 3: JVM\u7684\u5185\u5b58\u5c4f\u969c 4\uff1ahotspot\u5b9e\u73b0 bytecodeinterpreter.cpp int field_offset = cache->f2_as_index(); if (cache->is_volatile()) { if (support_IRIW_for_not_multiple_copy_atomic_cpu) { OrderAccess::fence(); } orderaccess_linux_x86.inline.hpp inline void OrderAccess::fence() { if (os::is_MP()) { // always use locked addl since mfence is sometimes expensive #ifdef AMD64 __asm__ volatile (\"lock; addl $0,0(%%rsp)\" : : : \"cc\", \"memory\"); #else __asm__ volatile (\"lock; addl $0,0(%%esp)\" : : : \"cc\", \"memory\"); #endif } }","title":"volatile\u7684\u7528\u9014"},{"location":"java/%20volatile/#volatile","text":"","title":"volatile\u7684\u7528\u9014"},{"location":"java/%20volatile/#1","text":"package com.mashibing.testvolatile; public class T01_ThreadVisibility { private static volatile boolean flag = true; public static void main(String[] args) throws InterruptedException { new Thread(()-> { while (flag) { //do sth } System.out.println(\"end\"); }, \"server\").start(); Thread.sleep(1000); flag = false; } }","title":"1.\u7ebf\u7a0b\u53ef\u89c1\u6027"},{"location":"java/%20volatile/#2","text":"","title":"2.\u9632\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f"},{"location":"java/%20volatile/#dclvolatile","text":"","title":"\u95ee\u9898\uff1aDCL\u5355\u4f8b\u9700\u4e0d\u9700\u8981\u52a0volatile\uff1f"},{"location":"java/%20volatile/#cpu","text":"\u7f13\u5b58\u884c\u5bf9\u9f50 \u7f13\u5b58\u884c64\u4e2a\u5b57\u8282\u662fCPU\u540c\u6b65\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u7f13\u5b58\u884c\u9694\u79bb\u4f1a\u6bd4\u4f2a\u5171\u4eab\u6548\u7387\u8981\u9ad8 Disruptor ```java package com.mashibing.juc.c_028_FalseSharing; public class T02_CacheLinePadding { private static class Padding { public volatile long p1, p2, p3, p4, p5, p6, p7; // } private static class T extends Padding { public volatile long x = 0L; } public static T[] arr = new T[2]; static { arr[0] = new T(); arr[1] = new T(); } public static void main(String[] args) throws Exception { Thread t1 = new Thread(()->{ for (long i = 0; i < 1000_0000L; i++) { arr[0].x = i; } }); Thread t2 = new Thread(()->{ for (long i = 0; i < 1000_0000L; i++) { arr[1].x = i; } }); final long start = System.nanoTime(); t1.start(); t2.start(); t1.join(); t2.join(); System.out.println((System.nanoTime() - start)/100_0000); } } ``` MESI \u4f2a\u5171\u4eab \u5408\u5e76\u5199 CPU\u5185\u90e8\u76844\u4e2a\u5b57\u8282\u7684Buffer ```java package com.mashibing.juc.c_029_WriteCombining; public final class WriteCombining { private static final int ITERATIONS = Integer.MAX_VALUE; private static final int ITEMS = 1 << 24; private static final int MASK = ITEMS - 1; private static final byte[] arrayA = new byte[ITEMS]; private static final byte[] arrayB = new byte[ITEMS]; private static final byte[] arrayC = new byte[ITEMS]; private static final byte[] arrayD = new byte[ITEMS]; private static final byte[] arrayE = new byte[ITEMS]; private static final byte[] arrayF = new byte[ITEMS]; public static void main(final String[] args) { for (int i = 1; i <= 3; i++) { System.out.println(i + \" SingleLoop duration (ns) = \" + runCaseOne()); System.out.println(i + \" SplitLoop duration (ns) = \" + runCaseTwo()); } } public static long runCaseOne() { long start = System.nanoTime(); int i = ITERATIONS; while (--i != 0) { int slot = i & MASK; byte b = (byte) i; arrayA[slot] = b; arrayB[slot] = b; arrayC[slot] = b; arrayD[slot] = b; arrayE[slot] = b; arrayF[slot] = b; } return System.nanoTime() - start; } public static long runCaseTwo() { long start = System.nanoTime(); int i = ITERATIONS; while (--i != 0) { int slot = i & MASK; byte b = (byte) i; arrayA[slot] = b; arrayB[slot] = b; arrayC[slot] = b; } i = ITERATIONS; while (--i != 0) { int slot = i & MASK; byte b = (byte) i; arrayD[slot] = b; arrayE[slot] = b; arrayF[slot] = b; } return System.nanoTime() - start; } } ``` \u6307\u4ee4\u91cd\u6392\u5e8f ```java package com.mashibing.jvm.c3_jmm; public class T04_Disorder { private static int x = 0, y = 0; private static int a = 0, b =0; public static void main(String[] args) throws InterruptedException { int i = 0; for(;;) { i++; x = 0; y = 0; a = 0; b = 0; Thread one = new Thread(new Runnable() { public void run() { //\u7531\u4e8e\u7ebf\u7a0bone\u5148\u542f\u52a8\uff0c\u4e0b\u9762\u8fd9\u53e5\u8bdd\u8ba9\u5b83\u7b49\u4e00\u7b49\u7ebf\u7a0btwo. \u8bfb\u7740\u53ef\u6839\u636e\u81ea\u5df1\u7535\u8111\u7684\u5b9e\u9645\u6027\u80fd\u9002\u5f53\u8c03\u6574\u7b49\u5f85\u65f6\u95f4. //shortWait(100000); a = 1; x = b; } }); Thread other = new Thread(new Runnable() { public void run() { b = 1; y = a; } }); one.start();other.start(); one.join();other.join(); String result = \"\u7b2c\" + i + \"\u6b21 (\" + x + \",\" + y + \"\uff09\"; if(x == 0 && y == 0) { System.err.println(result); break; } else { //System.out.println(result); } } } public static void shortWait(long interval){ long start = System.nanoTime(); long end; do{ end = System.nanoTime(); }while(start + interval >= end); } } ```","title":"CPU\u7684\u57fa\u7840\u77e5\u8bc6"},{"location":"java/%20volatile/#volatile_1","text":"1: volatile i 2: ACC_VOLATILE 3: JVM\u7684\u5185\u5b58\u5c4f\u969c 4\uff1ahotspot\u5b9e\u73b0 bytecodeinterpreter.cpp int field_offset = cache->f2_as_index(); if (cache->is_volatile()) { if (support_IRIW_for_not_multiple_copy_atomic_cpu) { OrderAccess::fence(); } orderaccess_linux_x86.inline.hpp inline void OrderAccess::fence() { if (os::is_MP()) { // always use locked addl since mfence is sometimes expensive #ifdef AMD64 __asm__ volatile (\"lock; addl $0,0(%%rsp)\" : : : \"cc\", \"memory\"); #else __asm__ volatile (\"lock; addl $0,0(%%esp)\" : : : \"cc\", \"memory\"); #endif } }","title":"volatile\u5982\u4f55\u89e3\u51b3\u6307\u4ee4\u91cd\u6392\u5e8f"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/","text":"CAS Compare And Swap (Compare And Exchange) / \u81ea\u65cb / \u81ea\u65cb\u9501 / \u65e0\u9501 \u56e0\u4e3a\u7ecf\u5e38\u914d\u5408\u5faa\u73af\u64cd\u4f5c\uff0c\u76f4\u5230\u5b8c\u6210\u4e3a\u6b62\uff0c\u6240\u4ee5\u6cdb\u6307\u4e00\u7c7b\u64cd\u4f5c cas(v, a, b) \uff0c\u53d8\u91cfv\uff0c\u671f\u5f85\u503ca, \u4fee\u6539\u503cb ABA\u95ee\u9898\uff0c\u4f60\u7684\u5973\u670b\u53cb\u5728\u79bb\u5f00\u4f60\u7684\u8fd9\u6bb5\u513f\u65f6\u95f4\u7ecf\u5386\u4e86\u522b\u7684\u4eba\uff0c\u81ea\u65cb\u5c31\u662f\u4f60\u7a7a\u8f6c\u7b49\u5f85\uff0c\u4e00\u76f4\u7b49\u5230\u5979\u63a5\u7eb3\u4f60\u4e3a\u6b62 \u89e3\u51b3\u529e\u6cd5\uff08\u7248\u672c\u53f7 AtomicStampedReference\uff09\uff0c\u57fa\u7840\u7c7b\u578b\u7b80\u5355\u503c\u4e0d\u9700\u8981\u7248\u672c\u53f7 Unsafe AtomicInteger: public final int incrementAndGet() { for (;;) { int current = get(); int next = current + 1; if (compareAndSet(current, next)) return next; } } public final boolean compareAndSet(int expect, int update) { return unsafe.compareAndSwapInt(this, valueOffset, expect, update); } Unsafe: public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5); \u8fd0\u7528\uff1a package com.mashibing.jol; import sun.misc.Unsafe; import java.lang.reflect.Field; public class T02_TestUnsafe { int i = 0; private static T02_TestUnsafe t = new T02_TestUnsafe(); public static void main(String[] args) throws Exception { //Unsafe unsafe = Unsafe.getUnsafe(); Field unsafeField = Unsafe.class.getDeclaredFields()[0]; unsafeField.setAccessible(true); Unsafe unsafe = (Unsafe) unsafeField.get(null); Field f = T02_TestUnsafe.class.getDeclaredField(\"i\"); long offset = unsafe.objectFieldOffset(f); System.out.println(offset); boolean success = unsafe.compareAndSwapInt(t, offset, 0, 1); System.out.println(success); System.out.println(t.i); //unsafe.compareAndSwapInt() } } jdk8u: unsafe.cpp: cmpxchg = compare and exchange UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x)) UnsafeWrapper(\"Unsafe_CompareAndSwapInt\"); oop p = JNIHandles::resolve(obj); jint* addr = (jint *) index_oop_from_field_offset_long(p, offset); return (jint)(Atomic::cmpxchg(x, addr, e)) == e; UNSAFE_END jdk8u: atomic_linux_x86.inline.hpp is_MP = Multi Processor inline jint Atomic::cmpxchg (jint exchange_value, volatile jint* dest, jint compare_value) { int mp = os::is_MP(); __asm__ volatile (LOCK_IF_MP(%4) \"cmpxchgl %1,(%3)\" : \"=a\" (exchange_value) : \"r\" (exchange_value), \"a\" (compare_value), \"r\" (dest), \"r\" (mp) : \"cc\", \"memory\"); return exchange_value; } jdk8u: os.hpp is_MP() static inline bool is_MP() { // During bootstrap if _processor_count is not yet initialized // we claim to be MP as that is safest. If any platform has a // stub generator that might be triggered in this phase and for // which being declared MP when in fact not, is a problem - then // the bootstrap routine for the stub generator needs to check // the processor count directly and leave the bootstrap routine // in place until called after initialization has ocurred. return (_processor_count != 1) || AssumeMP; } jdk8u: atomic_linux_x86.inline.hpp #define LOCK_IF_MP(mp) \"cmp $0, \" #mp \"; je 1f; lock; 1: \" \u6700\u7ec8\u5b9e\u73b0\uff1a cmpxchg = cas\u4fee\u6539\u53d8\u91cf\u503c lock cmpxchg \u6307\u4ee4 \u786c\u4ef6\uff1a lock\u6307\u4ee4\u5728\u6267\u884c\u540e\u9762\u6307\u4ee4\u7684\u65f6\u5019\u9501\u5b9a\u4e00\u4e2a\u5317\u6865\u4fe1\u53f7 \uff08\u4e0d\u91c7\u7528\u9501\u603b\u7ebf\u7684\u65b9\u5f0f\uff09 markword \u5de5\u5177\uff1aJOL = Java Object Layout <dependencies> <!-- https://mvnrepository.com/artifact/org.openjdk.jol/jol-core --> <dependency> <groupId>org.openjdk.jol</groupId> <artifactId>jol-core</artifactId> <version>0.9</version> </dependency> </dependencies> jdk8u: markOop.hpp // Bit-format of an object header (most significant first, big endian layout below): // // 32 bits: // -------- // hash:25 ------------>| age:4 biased_lock:1 lock:2 (normal object) // JavaThread*:23 epoch:2 age:4 biased_lock:1 lock:2 (biased object) // size:32 ------------------------------------------>| (CMS free block) // PromotedObject*:29 ---------->| promo_bits:3 ----->| (CMS promoted object) // // 64 bits: // -------- // unused:25 hash:31 -->| unused:1 age:4 biased_lock:1 lock:2 (normal object) // JavaThread*:54 epoch:2 unused:1 age:4 biased_lock:1 lock:2 (biased object) // PromotedObject*:61 --------------------->| promo_bits:3 ----->| (CMS promoted object) // size:64 ----------------------------------------------------->| (CMS free block) // // unused:25 hash:31 -->| cms_free:1 age:4 biased_lock:1 lock:2 (COOPs && normal object) // JavaThread*:54 epoch:2 cms_free:1 age:4 biased_lock:1 lock:2 (COOPs && biased object) // narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 ----->| (COOPs && CMS promoted object) // unused:21 size:35 -->| cms_free:1 unused:7 ------------------>| (COOPs && CMS free block) synchronized\u7684\u6a2a\u5207\u9762\u8be6\u89e3 synchronized\u539f\u7406 \u5347\u7ea7\u8fc7\u7a0b \u6c47\u7f16\u5b9e\u73b0 vs reentrantLock\u7684\u533a\u522b java\u6e90\u7801\u5c42\u7ea7 synchronized(o) \u5b57\u8282\u7801\u5c42\u7ea7 monitorenter moniterexit JVM\u5c42\u7ea7\uff08Hotspot\uff09 package com.mashibing.insidesync; import org.openjdk.jol.info.ClassLayout; public class T01_Sync1 { public static void main(String[] args) { Object o = new Object(); System.out.println(ClassLayout.parseInstance(o).toPrintable()); } } com.mashibing.insidesync.T01_Sync1$Lock object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 00 00 00 (00000101 00000000 00000000 00000000) (5) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 49 ce 00 20 (01001001 11001110 00000000 00100000) (536923721) 12 4 (loss due to the next object alignment) Instance size: 16 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total com.mashibing.insidesync.T02_Sync2$Lock object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 90 2e 1e (00000101 10010000 00101110 00011110) (506368005) 4 4 (object header) 1b 02 00 00 (00011011 00000010 00000000 00000000) (539) 8 4 (object header) 49 ce 00 20 (01001001 11001110 00000000 00100000) (536923721) 12 4 (loss due to the next object alignment) Instance size: 16 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes tota InterpreterRuntime:: monitorenter\u65b9\u6cd5 IRT_ENTRY_NO_ASYNC(void, InterpreterRuntime::monitorenter(JavaThread* thread, BasicObjectLock* elem)) #ifdef ASSERT thread->last_frame().interpreter_frame_verify_monitor(elem); #endif if (PrintBiasedLockingStatistics) { Atomic::inc(BiasedLocking::slow_path_entry_count_addr()); } Handle h_obj(thread, elem->obj()); assert(Universe::heap()->is_in_reserved_or_null(h_obj()), \"must be NULL or an object\"); if (UseBiasedLocking) { // Retry fast entry if bias is revoked to avoid unnecessary inflation ObjectSynchronizer::fast_enter(h_obj, elem->lock(), true, CHECK); } else { ObjectSynchronizer::slow_enter(h_obj, elem->lock(), CHECK); } assert(Universe::heap()->is_in_reserved_or_null(elem->obj()), \"must be NULL or an object\"); #ifdef ASSERT thread->last_frame().interpreter_frame_verify_monitor(elem); #endif IRT_END synchronizer.cpp revoke_and_rebias void ObjectSynchronizer::fast_enter(Handle obj, BasicLock* lock, bool attempt_rebias, TRAPS) { if (UseBiasedLocking) { if (!SafepointSynchronize::is_at_safepoint()) { BiasedLocking::Condition cond = BiasedLocking::revoke_and_rebias(obj, attempt_rebias, THREAD); if (cond == BiasedLocking::BIAS_REVOKED_AND_REBIASED) { return; } } else { assert(!attempt_rebias, \"can not rebias toward VM thread\"); BiasedLocking::revoke_at_safepoint(obj); } assert(!obj->mark()->has_bias_pattern(), \"biases should be revoked by now\"); } slow_enter (obj, lock, THREAD) ; } void ObjectSynchronizer::slow_enter(Handle obj, BasicLock* lock, TRAPS) { markOop mark = obj->mark(); assert(!mark->has_bias_pattern(), \"should not see bias pattern here\"); if (mark->is_neutral()) { // Anticipate successful CAS -- the ST of the displaced mark must // be visible <= the ST performed by the CAS. lock->set_displaced_header(mark); if (mark == (markOop) Atomic::cmpxchg_ptr(lock, obj()->mark_addr(), mark)) { TEVENT (slow_enter: release stacklock) ; return ; } // Fall through to inflate() ... } else if (mark->has_locker() && THREAD->is_lock_owned((address)mark->locker())) { assert(lock != mark->locker(), \"must not re-lock the same lock\"); assert(lock != (BasicLock*)obj->mark(), \"don't relock with same BasicLock\"); lock->set_displaced_header(NULL); return; } #if 0 // The following optimization isn't particularly useful. if (mark->has_monitor() && mark->monitor()->is_entered(THREAD)) { lock->set_displaced_header (NULL) ; return ; } #endif // The object header will never be displaced to this lock, // so it does not matter what the value is, except that it // must be non-zero to avoid looking like a re-entrant lock, // and must not look locked either. lock->set_displaced_header(markOopDesc::unused_mark()); ObjectSynchronizer::inflate(THREAD, obj())->enter(THREAD); } inflate\u65b9\u6cd5\uff1a\u81a8\u80c0\u4e3a\u91cd\u91cf\u7ea7\u9501 \u9501\u5347\u7ea7\u8fc7\u7a0b JDK8 markword\u5b9e\u73b0\u8868\uff1a \u65e0\u9501 - \u504f\u5411\u9501 - \u8f7b\u91cf\u7ea7\u9501 \uff08\u81ea\u65cb\u9501\uff0c\u81ea\u9002\u5e94\u81ea\u65cb\uff09- \u91cd\u91cf\u7ea7\u9501 synchronized\u4f18\u5316\u7684\u8fc7\u7a0b\u548cmarkword\u606f\u606f\u76f8\u5173 \u7528markword\u4e2d\u6700\u4f4e\u7684\u4e09\u4f4d\u4ee3\u8868\u9501\u72b6\u6001 \u5176\u4e2d1\u4f4d\u662f\u504f\u5411\u9501\u4f4d \u4e24\u4f4d\u662f\u666e\u901a\u9501\u4f4d Object o = new Object() \u9501 = 0 01 \u65e0\u9501\u6001 o.hashCode() 001 + hashcode java 00000001 10101101 00110100 00110110 01011001 00000000 00000000 00000000 little endian big endian 00000000 00000000 00000000 01011001 00110110 00110100 10101101 00000000 \u9ed8\u8ba4synchronized(o) 00 -> \u8f7b\u91cf\u7ea7\u9501 \u9ed8\u8ba4\u60c5\u51b5 \u504f\u5411\u9501\u6709\u4e2a\u65f6\u5ef6\uff0c\u9ed8\u8ba4\u662f4\u79d2 why? \u56e0\u4e3aJVM\u865a\u62df\u673a\u81ea\u5df1\u6709\u4e00\u4e9b\u9ed8\u8ba4\u542f\u52a8\u7684\u7ebf\u7a0b\uff0c\u91cc\u9762\u6709\u597d\u591async\u4ee3\u7801\uff0c\u8fd9\u4e9bsync\u4ee3\u7801\u542f\u52a8\u65f6\u5c31\u77e5\u9053\u80af\u5b9a\u4f1a\u6709\u7ade\u4e89\uff0c\u5982\u679c\u4f7f\u7528\u504f\u5411\u9501\uff0c\u5c31\u4f1a\u9020\u6210\u504f\u5411\u9501\u4e0d\u65ad\u7684\u8fdb\u884c\u9501\u64a4\u9500\u548c\u9501\u5347\u7ea7\u7684\u64cd\u4f5c\uff0c\u6548\u7387\u8f83\u4f4e\u3002 shell -XX:BiasedLockingStartupDelay=0 \u5982\u679c\u8bbe\u5b9a\u4e0a\u8ff0\u53c2\u6570 new Object () - > 101 \u504f\u5411\u9501 ->\u7ebf\u7a0bID\u4e3a0 -> Anonymous BiasedLock \u6253\u5f00\u504f\u5411\u9501\uff0cnew\u51fa\u6765\u7684\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u5c31\u662f\u4e00\u4e2a\u53ef\u504f\u5411\u533f\u540d\u5bf9\u8c61101 \u5982\u679c\u6709\u7ebf\u7a0b\u4e0a\u9501 \u4e0a\u504f\u5411\u9501\uff0c\u6307\u7684\u5c31\u662f\uff0c\u628amarkword\u7684\u7ebf\u7a0bID\u6539\u4e3a\u81ea\u5df1\u7ebf\u7a0bID\u7684\u8fc7\u7a0b \u504f\u5411\u9501\u4e0d\u53ef\u91cd\u504f\u5411 \u6279\u91cf\u504f\u5411 \u6279\u91cf\u64a4\u9500 \u5982\u679c\u6709\u7ebf\u7a0b\u7ade\u4e89 \u64a4\u9500\u504f\u5411\u9501\uff0c\u5347\u7ea7\u8f7b\u91cf\u7ea7\u9501 \u7ebf\u7a0b\u5728\u81ea\u5df1\u7684\u7ebf\u7a0b\u6808\u751f\u6210LockRecord \uff0c\u7528CAS\u64cd\u4f5c\u5c06markword\u8bbe\u7f6e\u4e3a\u6307\u5411\u81ea\u5df1\u8fd9\u4e2a\u7ebf\u7a0b\u7684LR\u7684\u6307\u9488\uff0c\u8bbe\u7f6e\u6210\u529f\u8005\u5f97\u5230\u9501 \u5982\u679c\u7ade\u4e89\u52a0\u5267 \u7ade\u4e89\u52a0\u5267\uff1a\u6709\u7ebf\u7a0b\u8d85\u8fc710\u6b21\u81ea\u65cb\uff0c -XX:PreBlockSpin\uff0c \u6216\u8005\u81ea\u65cb\u7ebf\u7a0b\u6570\u8d85\u8fc7CPU\u6838\u6570\u7684\u4e00\u534a\uff0c 1.6\u4e4b\u540e\uff0c\u52a0\u5165\u81ea\u9002\u5e94\u81ea\u65cb Adapative Self Spinning \uff0c JVM\u81ea\u5df1\u63a7\u5236 \u5347\u7ea7\u91cd\u91cf\u7ea7\u9501\uff1a-> \u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u8d44\u6e90\uff0clinux mutex , CPU\u4ece3\u7ea7-0\u7ea7\u7cfb\u7edf\u8c03\u7528\uff0c\u7ebf\u7a0b\u6302\u8d77\uff0c\u8fdb\u5165\u7b49\u5f85\u961f\u5217\uff0c\u7b49\u5f85\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\uff0c\u7136\u540e\u518d\u6620\u5c04\u56de\u7528\u6237\u7a7a\u95f4 (\u4ee5\u4e0a\u5b9e\u9a8c\u73af\u5883\u662fJDK11\uff0c\u6253\u5f00\u5c31\u662f\u504f\u5411\u9501\uff0c\u800cJDK8\u9ed8\u8ba4\u5bf9\u8c61\u5934\u662f\u65e0\u9501) \u504f\u5411\u9501\u9ed8\u8ba4\u662f\u6253\u5f00\u7684\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u65f6\u5ef6\uff0c\u5982\u679c\u8981\u89c2\u5bdf\u5230\u504f\u5411\u9501\uff0c\u5e94\u8be5\u8bbe\u5b9a\u53c2\u6570 \u6ca1\u9519\uff0c\u6211\u5c31\u662f\u5395\u6240\u6240\u957f \u52a0\u9501\uff0c\u6307\u7684\u662f\u9501\u5b9a\u5bf9\u8c61 \u9501\u5347\u7ea7\u7684\u8fc7\u7a0b JDK\u8f83\u65e9\u7684\u7248\u672c OS\u7684\u8d44\u6e90 \u4e92\u65a5\u91cf \u7528\u6237\u6001 -> \u5185\u6838\u6001\u7684\u8f6c\u6362 \u91cd\u91cf\u7ea7 \u6548\u7387\u6bd4\u8f83\u4f4e \u73b0\u4ee3\u7248\u672c\u8fdb\u884c\u4e86\u4f18\u5316 \u65e0\u9501 - \u504f\u5411\u9501 -\u8f7b\u91cf\u7ea7\u9501\uff08\u81ea\u65cb\u9501\uff09-\u91cd\u91cf\u7ea7\u9501 \u504f\u5411\u9501 - markword \u4e0a\u8bb0\u5f55\u5f53\u524d\u7ebf\u7a0b\u6307\u9488\uff0c\u4e0b\u6b21\u540c\u4e00\u4e2a\u7ebf\u7a0b\u52a0\u9501\u7684\u65f6\u5019\uff0c\u4e0d\u9700\u8981\u4e89\u7528\uff0c\u53ea\u9700\u8981\u5224\u65ad\u7ebf\u7a0b\u6307\u9488\u662f\u5426\u540c\u4e00\u4e2a\uff0c\u6240\u4ee5\uff0c\u504f\u5411\u9501\uff0c\u504f\u5411\u52a0\u9501\u7684\u7b2c\u4e00\u4e2a\u7ebf\u7a0b \u3002hashCode\u5907\u4efd\u5728\u7ebf\u7a0b\u6808\u4e0a \u7ebf\u7a0b\u9500\u6bc1\uff0c\u9501\u964d\u7ea7\u4e3a\u65e0\u9501 \u6709\u4e89\u7528 - \u9501\u5347\u7ea7\u4e3a\u8f7b\u91cf\u7ea7\u9501 - \u6bcf\u4e2a\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684LockRecord\u5728\u81ea\u5df1\u7684\u7ebf\u7a0b\u6808\u4e0a\uff0c\u7528CAS\u53bb\u4e89\u7528markword\u7684LR\u7684\u6307\u9488\uff0c\u6307\u9488\u6307\u5411\u54ea\u4e2a\u7ebf\u7a0b\u7684LR\uff0c\u54ea\u4e2a\u7ebf\u7a0b\u5c31\u62e5\u6709\u9501 \u81ea\u65cb\u8d85\u8fc710\u6b21\uff0c\u5347\u7ea7\u4e3a\u91cd\u91cf\u7ea7\u9501 - \u5982\u679c\u592a\u591a\u7ebf\u7a0b\u81ea\u65cb CPU\u6d88\u8017\u8fc7\u5927\uff0c\u4e0d\u5982\u5347\u7ea7\u4e3a\u91cd\u91cf\u7ea7\u9501\uff0c\u8fdb\u5165\u7b49\u5f85\u961f\u5217\uff08\u4e0d\u6d88\u8017CPU\uff09-XX:PreBlockSpin \u81ea\u65cb\u9501\u5728 JDK1.4.2 \u4e2d\u5f15\u5165\uff0c\u4f7f\u7528 -XX:+UseSpinning \u6765\u5f00\u542f\u3002JDK 6 \u4e2d\u53d8\u4e3a\u9ed8\u8ba4\u5f00\u542f\uff0c\u5e76\u4e14\u5f15\u5165\u4e86\u81ea\u9002\u5e94\u7684\u81ea\u65cb\u9501\uff08\u9002\u5e94\u6027\u81ea\u65cb\u9501\uff09\u3002 \u81ea\u9002\u5e94\u81ea\u65cb\u9501\u610f\u5473\u7740\u81ea\u65cb\u7684\u65f6\u95f4\uff08\u6b21\u6570\uff09\u4e0d\u518d\u56fa\u5b9a\uff0c\u800c\u662f\u7531\u524d\u4e00\u6b21\u5728\u540c\u4e00\u4e2a\u9501\u4e0a\u7684\u81ea\u65cb\u65f6\u95f4\u53ca\u9501\u7684\u62e5\u6709\u8005\u7684\u72b6\u6001\u6765\u51b3\u5b9a\u3002\u5982\u679c\u5728\u540c\u4e00\u4e2a\u9501\u5bf9\u8c61\u4e0a\uff0c\u81ea\u65cb\u7b49\u5f85\u521a\u521a\u6210\u529f\u83b7\u5f97\u8fc7\u9501\uff0c\u5e76\u4e14\u6301\u6709\u9501\u7684\u7ebf\u7a0b\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u90a3\u4e48\u865a\u62df\u673a\u5c31\u4f1a\u8ba4\u4e3a\u8fd9\u6b21\u81ea\u65cb\u4e5f\u662f\u5f88\u6709\u53ef\u80fd\u518d\u6b21\u6210\u529f\uff0c\u8fdb\u800c\u5b83\u5c06\u5141\u8bb8\u81ea\u65cb\u7b49\u5f85\u6301\u7eed\u76f8\u5bf9\u66f4\u957f\u7684\u65f6\u95f4\u3002\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u9501\uff0c\u81ea\u65cb\u5f88\u5c11\u6210\u529f\u83b7\u5f97\u8fc7\uff0c\u90a3\u5728\u4ee5\u540e\u5c1d\u8bd5\u83b7\u53d6\u8fd9\u4e2a\u9501\u65f6\u5c06\u53ef\u80fd\u7701\u7565\u6389\u81ea\u65cb\u8fc7\u7a0b\uff0c\u76f4\u63a5\u963b\u585e\u7ebf\u7a0b\uff0c\u907f\u514d\u6d6a\u8d39\u5904\u7406\u5668\u8d44\u6e90\u3002 \u504f\u5411\u9501\u7531\u4e8e\u6709\u9501\u64a4\u9500\u7684\u8fc7\u7a0brevoke\uff0c\u4f1a\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\uff0c\u6240\u4ee5\uff0c\u5728\u9501\u4e89\u7528\u7279\u522b\u6fc0\u70c8\u7684\u65f6\u5019\uff0c\u7528\u504f\u5411\u9501\u672a\u5fc5\u6548\u7387\u9ad8\u3002\u8fd8\u4e0d\u5982\u76f4\u63a5\u4f7f\u7528\u8f7b\u91cf\u7ea7\u9501\u3002 synchronized\u6700\u5e95\u5c42\u5b9e\u73b0 public class T { static volatile int i = 0; public static void n() { i++; } public static synchronized void m() {} publics static void main(String[] args) { for(int j=0; j<1000_000; j++) { m(); n(); } } } java -XX:+UnlockDiagonositicVMOptions -XX:+PrintAssembly T C1 Compile Level 1 (\u4e00\u7ea7\u4f18\u5316) C2 Compile Level 2 (\u4e8c\u7ea7\u4f18\u5316) \u627e\u5230m() n()\u65b9\u6cd5\u7684\u6c47\u7f16\u7801\uff0c\u4f1a\u770b\u5230 lock comxchg .....\u6307\u4ee4 synchronized vs Lock (CAS) \u5728\u9ad8\u4e89\u7528 \u9ad8\u8017\u65f6\u7684\u73af\u5883\u4e0bsynchronized\u6548\u7387\u66f4\u9ad8 \u5728\u4f4e\u4e89\u7528 \u4f4e\u8017\u65f6\u7684\u73af\u5883\u4e0bCAS\u6548\u7387\u66f4\u9ad8 synchronized\u5230\u91cd\u91cf\u7ea7\u4e4b\u540e\u662f\u7b49\u5f85\u961f\u5217\uff08\u4e0d\u6d88\u8017CPU\uff09 CAS\uff08\u7b49\u5f85\u671f\u95f4\u6d88\u8017CPU\uff09 \u4e00\u5207\u4ee5\u5b9e\u6d4b\u4e3a\u51c6 \u9501\u6d88\u9664 lock eliminate public void add(String str1,String str2){ StringBuffer sb = new StringBuffer(); sb.append(str1).append(str2); } \u6211\u4eec\u90fd\u77e5\u9053 StringBuffer \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u5173\u952e\u65b9\u6cd5\u90fd\u662f\u88ab synchronized \u4fee\u9970\u8fc7\u7684\uff0c\u4f46\u6211\u4eec\u770b\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0csb \u8fd9\u4e2a\u5f15\u7528\u53ea\u4f1a\u5728 add \u65b9\u6cd5\u4e2d\u4f7f\u7528\uff0c\u4e0d\u53ef\u80fd\u88ab\u5176\u5b83\u7ebf\u7a0b\u5f15\u7528\uff08\u56e0\u4e3a\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u6808\u79c1\u6709\uff09\uff0c\u56e0\u6b64 sb \u662f\u4e0d\u53ef\u80fd\u5171\u4eab\u7684\u8d44\u6e90\uff0cJVM \u4f1a\u81ea\u52a8\u6d88\u9664 StringBuffer \u5bf9\u8c61\u5185\u90e8\u7684\u9501\u3002 \u9501\u7c97\u5316 lock coarsening public String test(String str){ int i = 0; StringBuffer sb = new StringBuffer(): while(i < 100){ sb.append(str); i++; } return sb.toString(): } JVM \u4f1a\u68c0\u6d4b\u5230\u8fd9\u6837\u4e00\u8fde\u4e32\u7684\u64cd\u4f5c\u90fd\u5bf9\u540c\u4e00\u4e2a\u5bf9\u8c61\u52a0\u9501\uff08while \u5faa\u73af\u5185 100 \u6b21\u6267\u884c append\uff0c\u6ca1\u6709\u9501\u7c97\u5316\u7684\u5c31\u8981\u8fdb\u884c 100 \u6b21\u52a0\u9501/\u89e3\u9501\uff09\uff0c\u6b64\u65f6 JVM \u5c31\u4f1a\u5c06\u52a0\u9501\u7684\u8303\u56f4\u7c97\u5316\u5230\u8fd9\u4e00\u8fde\u4e32\u7684\u64cd\u4f5c\u7684\u5916\u90e8\uff08\u6bd4\u5982 while \u865a\u5e7b\u4f53\u5916\uff09\uff0c\u4f7f\u5f97\u8fd9\u4e00\u8fde\u4e32\u64cd\u4f5c\u53ea\u9700\u8981\u52a0\u4e00\u6b21\u9501\u5373\u53ef\u3002 \u9501\u964d\u7ea7\uff08\u4e0d\u91cd\u8981\uff09 https://www.zhihu.com/question/63859501 \u5176\u5b9e\uff0c\u53ea\u88abVMThread\u8bbf\u95ee\uff0c\u964d\u7ea7\u4e5f\u5c31\u6ca1\u5565\u610f\u4e49\u4e86\u3002\u6240\u4ee5\u53ef\u4ee5\u7b80\u5355\u8ba4\u4e3a\u9501\u964d\u7ea7\u4e0d\u5b58\u5728\uff01 \u8d85\u7ebf\u7a0b \u4e00\u4e2aALU + \u4e24\u7ec4Registers + PC \u53c2\u8003\u8d44\u6599 http://openjdk.java.net/groups/hotspot/docs/HotSpotGlossary.html","title":"CAS"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#cas","text":"Compare And Swap (Compare And Exchange) / \u81ea\u65cb / \u81ea\u65cb\u9501 / \u65e0\u9501 \u56e0\u4e3a\u7ecf\u5e38\u914d\u5408\u5faa\u73af\u64cd\u4f5c\uff0c\u76f4\u5230\u5b8c\u6210\u4e3a\u6b62\uff0c\u6240\u4ee5\u6cdb\u6307\u4e00\u7c7b\u64cd\u4f5c cas(v, a, b) \uff0c\u53d8\u91cfv\uff0c\u671f\u5f85\u503ca, \u4fee\u6539\u503cb ABA\u95ee\u9898\uff0c\u4f60\u7684\u5973\u670b\u53cb\u5728\u79bb\u5f00\u4f60\u7684\u8fd9\u6bb5\u513f\u65f6\u95f4\u7ecf\u5386\u4e86\u522b\u7684\u4eba\uff0c\u81ea\u65cb\u5c31\u662f\u4f60\u7a7a\u8f6c\u7b49\u5f85\uff0c\u4e00\u76f4\u7b49\u5230\u5979\u63a5\u7eb3\u4f60\u4e3a\u6b62 \u89e3\u51b3\u529e\u6cd5\uff08\u7248\u672c\u53f7 AtomicStampedReference\uff09\uff0c\u57fa\u7840\u7c7b\u578b\u7b80\u5355\u503c\u4e0d\u9700\u8981\u7248\u672c\u53f7","title":"CAS"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#unsafe","text":"AtomicInteger: public final int incrementAndGet() { for (;;) { int current = get(); int next = current + 1; if (compareAndSet(current, next)) return next; } } public final boolean compareAndSet(int expect, int update) { return unsafe.compareAndSwapInt(this, valueOffset, expect, update); } Unsafe: public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5); \u8fd0\u7528\uff1a package com.mashibing.jol; import sun.misc.Unsafe; import java.lang.reflect.Field; public class T02_TestUnsafe { int i = 0; private static T02_TestUnsafe t = new T02_TestUnsafe(); public static void main(String[] args) throws Exception { //Unsafe unsafe = Unsafe.getUnsafe(); Field unsafeField = Unsafe.class.getDeclaredFields()[0]; unsafeField.setAccessible(true); Unsafe unsafe = (Unsafe) unsafeField.get(null); Field f = T02_TestUnsafe.class.getDeclaredField(\"i\"); long offset = unsafe.objectFieldOffset(f); System.out.println(offset); boolean success = unsafe.compareAndSwapInt(t, offset, 0, 1); System.out.println(success); System.out.println(t.i); //unsafe.compareAndSwapInt() } } jdk8u: unsafe.cpp: cmpxchg = compare and exchange UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x)) UnsafeWrapper(\"Unsafe_CompareAndSwapInt\"); oop p = JNIHandles::resolve(obj); jint* addr = (jint *) index_oop_from_field_offset_long(p, offset); return (jint)(Atomic::cmpxchg(x, addr, e)) == e; UNSAFE_END jdk8u: atomic_linux_x86.inline.hpp is_MP = Multi Processor inline jint Atomic::cmpxchg (jint exchange_value, volatile jint* dest, jint compare_value) { int mp = os::is_MP(); __asm__ volatile (LOCK_IF_MP(%4) \"cmpxchgl %1,(%3)\" : \"=a\" (exchange_value) : \"r\" (exchange_value), \"a\" (compare_value), \"r\" (dest), \"r\" (mp) : \"cc\", \"memory\"); return exchange_value; } jdk8u: os.hpp is_MP() static inline bool is_MP() { // During bootstrap if _processor_count is not yet initialized // we claim to be MP as that is safest. If any platform has a // stub generator that might be triggered in this phase and for // which being declared MP when in fact not, is a problem - then // the bootstrap routine for the stub generator needs to check // the processor count directly and leave the bootstrap routine // in place until called after initialization has ocurred. return (_processor_count != 1) || AssumeMP; } jdk8u: atomic_linux_x86.inline.hpp #define LOCK_IF_MP(mp) \"cmp $0, \" #mp \"; je 1f; lock; 1: \" \u6700\u7ec8\u5b9e\u73b0\uff1a cmpxchg = cas\u4fee\u6539\u53d8\u91cf\u503c lock cmpxchg \u6307\u4ee4 \u786c\u4ef6\uff1a lock\u6307\u4ee4\u5728\u6267\u884c\u540e\u9762\u6307\u4ee4\u7684\u65f6\u5019\u9501\u5b9a\u4e00\u4e2a\u5317\u6865\u4fe1\u53f7 \uff08\u4e0d\u91c7\u7528\u9501\u603b\u7ebf\u7684\u65b9\u5f0f\uff09","title":"Unsafe"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#markword","text":"","title":"markword"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#jol-java-object-layout","text":"<dependencies> <!-- https://mvnrepository.com/artifact/org.openjdk.jol/jol-core --> <dependency> <groupId>org.openjdk.jol</groupId> <artifactId>jol-core</artifactId> <version>0.9</version> </dependency> </dependencies> jdk8u: markOop.hpp // Bit-format of an object header (most significant first, big endian layout below): // // 32 bits: // -------- // hash:25 ------------>| age:4 biased_lock:1 lock:2 (normal object) // JavaThread*:23 epoch:2 age:4 biased_lock:1 lock:2 (biased object) // size:32 ------------------------------------------>| (CMS free block) // PromotedObject*:29 ---------->| promo_bits:3 ----->| (CMS promoted object) // // 64 bits: // -------- // unused:25 hash:31 -->| unused:1 age:4 biased_lock:1 lock:2 (normal object) // JavaThread*:54 epoch:2 unused:1 age:4 biased_lock:1 lock:2 (biased object) // PromotedObject*:61 --------------------->| promo_bits:3 ----->| (CMS promoted object) // size:64 ----------------------------------------------------->| (CMS free block) // // unused:25 hash:31 -->| cms_free:1 age:4 biased_lock:1 lock:2 (COOPs && normal object) // JavaThread*:54 epoch:2 cms_free:1 age:4 biased_lock:1 lock:2 (COOPs && biased object) // narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 ----->| (COOPs && CMS promoted object) // unused:21 size:35 -->| cms_free:1 unused:7 ------------------>| (COOPs && CMS free block)","title":"\u5de5\u5177\uff1aJOL = Java Object Layout"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#synchronized","text":"synchronized\u539f\u7406 \u5347\u7ea7\u8fc7\u7a0b \u6c47\u7f16\u5b9e\u73b0 vs reentrantLock\u7684\u533a\u522b","title":"synchronized\u7684\u6a2a\u5207\u9762\u8be6\u89e3"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#java","text":"synchronized(o)","title":"java\u6e90\u7801\u5c42\u7ea7"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#_1","text":"monitorenter moniterexit","title":"\u5b57\u8282\u7801\u5c42\u7ea7"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#jvmhotspot","text":"package com.mashibing.insidesync; import org.openjdk.jol.info.ClassLayout; public class T01_Sync1 { public static void main(String[] args) { Object o = new Object(); System.out.println(ClassLayout.parseInstance(o).toPrintable()); } } com.mashibing.insidesync.T01_Sync1$Lock object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 00 00 00 (00000101 00000000 00000000 00000000) (5) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 49 ce 00 20 (01001001 11001110 00000000 00100000) (536923721) 12 4 (loss due to the next object alignment) Instance size: 16 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total com.mashibing.insidesync.T02_Sync2$Lock object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 90 2e 1e (00000101 10010000 00101110 00011110) (506368005) 4 4 (object header) 1b 02 00 00 (00011011 00000010 00000000 00000000) (539) 8 4 (object header) 49 ce 00 20 (01001001 11001110 00000000 00100000) (536923721) 12 4 (loss due to the next object alignment) Instance size: 16 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes tota InterpreterRuntime:: monitorenter\u65b9\u6cd5 IRT_ENTRY_NO_ASYNC(void, InterpreterRuntime::monitorenter(JavaThread* thread, BasicObjectLock* elem)) #ifdef ASSERT thread->last_frame().interpreter_frame_verify_monitor(elem); #endif if (PrintBiasedLockingStatistics) { Atomic::inc(BiasedLocking::slow_path_entry_count_addr()); } Handle h_obj(thread, elem->obj()); assert(Universe::heap()->is_in_reserved_or_null(h_obj()), \"must be NULL or an object\"); if (UseBiasedLocking) { // Retry fast entry if bias is revoked to avoid unnecessary inflation ObjectSynchronizer::fast_enter(h_obj, elem->lock(), true, CHECK); } else { ObjectSynchronizer::slow_enter(h_obj, elem->lock(), CHECK); } assert(Universe::heap()->is_in_reserved_or_null(elem->obj()), \"must be NULL or an object\"); #ifdef ASSERT thread->last_frame().interpreter_frame_verify_monitor(elem); #endif IRT_END synchronizer.cpp revoke_and_rebias void ObjectSynchronizer::fast_enter(Handle obj, BasicLock* lock, bool attempt_rebias, TRAPS) { if (UseBiasedLocking) { if (!SafepointSynchronize::is_at_safepoint()) { BiasedLocking::Condition cond = BiasedLocking::revoke_and_rebias(obj, attempt_rebias, THREAD); if (cond == BiasedLocking::BIAS_REVOKED_AND_REBIASED) { return; } } else { assert(!attempt_rebias, \"can not rebias toward VM thread\"); BiasedLocking::revoke_at_safepoint(obj); } assert(!obj->mark()->has_bias_pattern(), \"biases should be revoked by now\"); } slow_enter (obj, lock, THREAD) ; } void ObjectSynchronizer::slow_enter(Handle obj, BasicLock* lock, TRAPS) { markOop mark = obj->mark(); assert(!mark->has_bias_pattern(), \"should not see bias pattern here\"); if (mark->is_neutral()) { // Anticipate successful CAS -- the ST of the displaced mark must // be visible <= the ST performed by the CAS. lock->set_displaced_header(mark); if (mark == (markOop) Atomic::cmpxchg_ptr(lock, obj()->mark_addr(), mark)) { TEVENT (slow_enter: release stacklock) ; return ; } // Fall through to inflate() ... } else if (mark->has_locker() && THREAD->is_lock_owned((address)mark->locker())) { assert(lock != mark->locker(), \"must not re-lock the same lock\"); assert(lock != (BasicLock*)obj->mark(), \"don't relock with same BasicLock\"); lock->set_displaced_header(NULL); return; } #if 0 // The following optimization isn't particularly useful. if (mark->has_monitor() && mark->monitor()->is_entered(THREAD)) { lock->set_displaced_header (NULL) ; return ; } #endif // The object header will never be displaced to this lock, // so it does not matter what the value is, except that it // must be non-zero to avoid looking like a re-entrant lock, // and must not look locked either. lock->set_displaced_header(markOopDesc::unused_mark()); ObjectSynchronizer::inflate(THREAD, obj())->enter(THREAD); } inflate\u65b9\u6cd5\uff1a\u81a8\u80c0\u4e3a\u91cd\u91cf\u7ea7\u9501","title":"JVM\u5c42\u7ea7\uff08Hotspot\uff09"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#_2","text":"","title":"\u9501\u5347\u7ea7\u8fc7\u7a0b"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#jdk8-markword","text":"\u65e0\u9501 - \u504f\u5411\u9501 - \u8f7b\u91cf\u7ea7\u9501 \uff08\u81ea\u65cb\u9501\uff0c\u81ea\u9002\u5e94\u81ea\u65cb\uff09- \u91cd\u91cf\u7ea7\u9501 synchronized\u4f18\u5316\u7684\u8fc7\u7a0b\u548cmarkword\u606f\u606f\u76f8\u5173 \u7528markword\u4e2d\u6700\u4f4e\u7684\u4e09\u4f4d\u4ee3\u8868\u9501\u72b6\u6001 \u5176\u4e2d1\u4f4d\u662f\u504f\u5411\u9501\u4f4d \u4e24\u4f4d\u662f\u666e\u901a\u9501\u4f4d Object o = new Object() \u9501 = 0 01 \u65e0\u9501\u6001 o.hashCode() 001 + hashcode java 00000001 10101101 00110100 00110110 01011001 00000000 00000000 00000000 little endian big endian 00000000 00000000 00000000 01011001 00110110 00110100 10101101 00000000 \u9ed8\u8ba4synchronized(o) 00 -> \u8f7b\u91cf\u7ea7\u9501 \u9ed8\u8ba4\u60c5\u51b5 \u504f\u5411\u9501\u6709\u4e2a\u65f6\u5ef6\uff0c\u9ed8\u8ba4\u662f4\u79d2 why? \u56e0\u4e3aJVM\u865a\u62df\u673a\u81ea\u5df1\u6709\u4e00\u4e9b\u9ed8\u8ba4\u542f\u52a8\u7684\u7ebf\u7a0b\uff0c\u91cc\u9762\u6709\u597d\u591async\u4ee3\u7801\uff0c\u8fd9\u4e9bsync\u4ee3\u7801\u542f\u52a8\u65f6\u5c31\u77e5\u9053\u80af\u5b9a\u4f1a\u6709\u7ade\u4e89\uff0c\u5982\u679c\u4f7f\u7528\u504f\u5411\u9501\uff0c\u5c31\u4f1a\u9020\u6210\u504f\u5411\u9501\u4e0d\u65ad\u7684\u8fdb\u884c\u9501\u64a4\u9500\u548c\u9501\u5347\u7ea7\u7684\u64cd\u4f5c\uff0c\u6548\u7387\u8f83\u4f4e\u3002 shell -XX:BiasedLockingStartupDelay=0 \u5982\u679c\u8bbe\u5b9a\u4e0a\u8ff0\u53c2\u6570 new Object () - > 101 \u504f\u5411\u9501 ->\u7ebf\u7a0bID\u4e3a0 -> Anonymous BiasedLock \u6253\u5f00\u504f\u5411\u9501\uff0cnew\u51fa\u6765\u7684\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u5c31\u662f\u4e00\u4e2a\u53ef\u504f\u5411\u533f\u540d\u5bf9\u8c61101 \u5982\u679c\u6709\u7ebf\u7a0b\u4e0a\u9501 \u4e0a\u504f\u5411\u9501\uff0c\u6307\u7684\u5c31\u662f\uff0c\u628amarkword\u7684\u7ebf\u7a0bID\u6539\u4e3a\u81ea\u5df1\u7ebf\u7a0bID\u7684\u8fc7\u7a0b \u504f\u5411\u9501\u4e0d\u53ef\u91cd\u504f\u5411 \u6279\u91cf\u504f\u5411 \u6279\u91cf\u64a4\u9500 \u5982\u679c\u6709\u7ebf\u7a0b\u7ade\u4e89 \u64a4\u9500\u504f\u5411\u9501\uff0c\u5347\u7ea7\u8f7b\u91cf\u7ea7\u9501 \u7ebf\u7a0b\u5728\u81ea\u5df1\u7684\u7ebf\u7a0b\u6808\u751f\u6210LockRecord \uff0c\u7528CAS\u64cd\u4f5c\u5c06markword\u8bbe\u7f6e\u4e3a\u6307\u5411\u81ea\u5df1\u8fd9\u4e2a\u7ebf\u7a0b\u7684LR\u7684\u6307\u9488\uff0c\u8bbe\u7f6e\u6210\u529f\u8005\u5f97\u5230\u9501 \u5982\u679c\u7ade\u4e89\u52a0\u5267 \u7ade\u4e89\u52a0\u5267\uff1a\u6709\u7ebf\u7a0b\u8d85\u8fc710\u6b21\u81ea\u65cb\uff0c -XX:PreBlockSpin\uff0c \u6216\u8005\u81ea\u65cb\u7ebf\u7a0b\u6570\u8d85\u8fc7CPU\u6838\u6570\u7684\u4e00\u534a\uff0c 1.6\u4e4b\u540e\uff0c\u52a0\u5165\u81ea\u9002\u5e94\u81ea\u65cb Adapative Self Spinning \uff0c JVM\u81ea\u5df1\u63a7\u5236 \u5347\u7ea7\u91cd\u91cf\u7ea7\u9501\uff1a-> \u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u8d44\u6e90\uff0clinux mutex , CPU\u4ece3\u7ea7-0\u7ea7\u7cfb\u7edf\u8c03\u7528\uff0c\u7ebf\u7a0b\u6302\u8d77\uff0c\u8fdb\u5165\u7b49\u5f85\u961f\u5217\uff0c\u7b49\u5f85\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\uff0c\u7136\u540e\u518d\u6620\u5c04\u56de\u7528\u6237\u7a7a\u95f4 (\u4ee5\u4e0a\u5b9e\u9a8c\u73af\u5883\u662fJDK11\uff0c\u6253\u5f00\u5c31\u662f\u504f\u5411\u9501\uff0c\u800cJDK8\u9ed8\u8ba4\u5bf9\u8c61\u5934\u662f\u65e0\u9501) \u504f\u5411\u9501\u9ed8\u8ba4\u662f\u6253\u5f00\u7684\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u65f6\u5ef6\uff0c\u5982\u679c\u8981\u89c2\u5bdf\u5230\u504f\u5411\u9501\uff0c\u5e94\u8be5\u8bbe\u5b9a\u53c2\u6570 \u6ca1\u9519\uff0c\u6211\u5c31\u662f\u5395\u6240\u6240\u957f \u52a0\u9501\uff0c\u6307\u7684\u662f\u9501\u5b9a\u5bf9\u8c61 \u9501\u5347\u7ea7\u7684\u8fc7\u7a0b JDK\u8f83\u65e9\u7684\u7248\u672c OS\u7684\u8d44\u6e90 \u4e92\u65a5\u91cf \u7528\u6237\u6001 -> \u5185\u6838\u6001\u7684\u8f6c\u6362 \u91cd\u91cf\u7ea7 \u6548\u7387\u6bd4\u8f83\u4f4e \u73b0\u4ee3\u7248\u672c\u8fdb\u884c\u4e86\u4f18\u5316 \u65e0\u9501 - \u504f\u5411\u9501 -\u8f7b\u91cf\u7ea7\u9501\uff08\u81ea\u65cb\u9501\uff09-\u91cd\u91cf\u7ea7\u9501 \u504f\u5411\u9501 - markword \u4e0a\u8bb0\u5f55\u5f53\u524d\u7ebf\u7a0b\u6307\u9488\uff0c\u4e0b\u6b21\u540c\u4e00\u4e2a\u7ebf\u7a0b\u52a0\u9501\u7684\u65f6\u5019\uff0c\u4e0d\u9700\u8981\u4e89\u7528\uff0c\u53ea\u9700\u8981\u5224\u65ad\u7ebf\u7a0b\u6307\u9488\u662f\u5426\u540c\u4e00\u4e2a\uff0c\u6240\u4ee5\uff0c\u504f\u5411\u9501\uff0c\u504f\u5411\u52a0\u9501\u7684\u7b2c\u4e00\u4e2a\u7ebf\u7a0b \u3002hashCode\u5907\u4efd\u5728\u7ebf\u7a0b\u6808\u4e0a \u7ebf\u7a0b\u9500\u6bc1\uff0c\u9501\u964d\u7ea7\u4e3a\u65e0\u9501 \u6709\u4e89\u7528 - \u9501\u5347\u7ea7\u4e3a\u8f7b\u91cf\u7ea7\u9501 - \u6bcf\u4e2a\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684LockRecord\u5728\u81ea\u5df1\u7684\u7ebf\u7a0b\u6808\u4e0a\uff0c\u7528CAS\u53bb\u4e89\u7528markword\u7684LR\u7684\u6307\u9488\uff0c\u6307\u9488\u6307\u5411\u54ea\u4e2a\u7ebf\u7a0b\u7684LR\uff0c\u54ea\u4e2a\u7ebf\u7a0b\u5c31\u62e5\u6709\u9501 \u81ea\u65cb\u8d85\u8fc710\u6b21\uff0c\u5347\u7ea7\u4e3a\u91cd\u91cf\u7ea7\u9501 - \u5982\u679c\u592a\u591a\u7ebf\u7a0b\u81ea\u65cb CPU\u6d88\u8017\u8fc7\u5927\uff0c\u4e0d\u5982\u5347\u7ea7\u4e3a\u91cd\u91cf\u7ea7\u9501\uff0c\u8fdb\u5165\u7b49\u5f85\u961f\u5217\uff08\u4e0d\u6d88\u8017CPU\uff09-XX:PreBlockSpin \u81ea\u65cb\u9501\u5728 JDK1.4.2 \u4e2d\u5f15\u5165\uff0c\u4f7f\u7528 -XX:+UseSpinning \u6765\u5f00\u542f\u3002JDK 6 \u4e2d\u53d8\u4e3a\u9ed8\u8ba4\u5f00\u542f\uff0c\u5e76\u4e14\u5f15\u5165\u4e86\u81ea\u9002\u5e94\u7684\u81ea\u65cb\u9501\uff08\u9002\u5e94\u6027\u81ea\u65cb\u9501\uff09\u3002 \u81ea\u9002\u5e94\u81ea\u65cb\u9501\u610f\u5473\u7740\u81ea\u65cb\u7684\u65f6\u95f4\uff08\u6b21\u6570\uff09\u4e0d\u518d\u56fa\u5b9a\uff0c\u800c\u662f\u7531\u524d\u4e00\u6b21\u5728\u540c\u4e00\u4e2a\u9501\u4e0a\u7684\u81ea\u65cb\u65f6\u95f4\u53ca\u9501\u7684\u62e5\u6709\u8005\u7684\u72b6\u6001\u6765\u51b3\u5b9a\u3002\u5982\u679c\u5728\u540c\u4e00\u4e2a\u9501\u5bf9\u8c61\u4e0a\uff0c\u81ea\u65cb\u7b49\u5f85\u521a\u521a\u6210\u529f\u83b7\u5f97\u8fc7\u9501\uff0c\u5e76\u4e14\u6301\u6709\u9501\u7684\u7ebf\u7a0b\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u90a3\u4e48\u865a\u62df\u673a\u5c31\u4f1a\u8ba4\u4e3a\u8fd9\u6b21\u81ea\u65cb\u4e5f\u662f\u5f88\u6709\u53ef\u80fd\u518d\u6b21\u6210\u529f\uff0c\u8fdb\u800c\u5b83\u5c06\u5141\u8bb8\u81ea\u65cb\u7b49\u5f85\u6301\u7eed\u76f8\u5bf9\u66f4\u957f\u7684\u65f6\u95f4\u3002\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u9501\uff0c\u81ea\u65cb\u5f88\u5c11\u6210\u529f\u83b7\u5f97\u8fc7\uff0c\u90a3\u5728\u4ee5\u540e\u5c1d\u8bd5\u83b7\u53d6\u8fd9\u4e2a\u9501\u65f6\u5c06\u53ef\u80fd\u7701\u7565\u6389\u81ea\u65cb\u8fc7\u7a0b\uff0c\u76f4\u63a5\u963b\u585e\u7ebf\u7a0b\uff0c\u907f\u514d\u6d6a\u8d39\u5904\u7406\u5668\u8d44\u6e90\u3002 \u504f\u5411\u9501\u7531\u4e8e\u6709\u9501\u64a4\u9500\u7684\u8fc7\u7a0brevoke\uff0c\u4f1a\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\uff0c\u6240\u4ee5\uff0c\u5728\u9501\u4e89\u7528\u7279\u522b\u6fc0\u70c8\u7684\u65f6\u5019\uff0c\u7528\u504f\u5411\u9501\u672a\u5fc5\u6548\u7387\u9ad8\u3002\u8fd8\u4e0d\u5982\u76f4\u63a5\u4f7f\u7528\u8f7b\u91cf\u7ea7\u9501\u3002","title":"JDK8 markword\u5b9e\u73b0\u8868\uff1a"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#synchronized_1","text":"public class T { static volatile int i = 0; public static void n() { i++; } public static synchronized void m() {} publics static void main(String[] args) { for(int j=0; j<1000_000; j++) { m(); n(); } } } java -XX:+UnlockDiagonositicVMOptions -XX:+PrintAssembly T C1 Compile Level 1 (\u4e00\u7ea7\u4f18\u5316) C2 Compile Level 2 (\u4e8c\u7ea7\u4f18\u5316) \u627e\u5230m() n()\u65b9\u6cd5\u7684\u6c47\u7f16\u7801\uff0c\u4f1a\u770b\u5230 lock comxchg .....\u6307\u4ee4","title":"synchronized\u6700\u5e95\u5c42\u5b9e\u73b0"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#synchronized-vs-lock-cas","text":"\u5728\u9ad8\u4e89\u7528 \u9ad8\u8017\u65f6\u7684\u73af\u5883\u4e0bsynchronized\u6548\u7387\u66f4\u9ad8 \u5728\u4f4e\u4e89\u7528 \u4f4e\u8017\u65f6\u7684\u73af\u5883\u4e0bCAS\u6548\u7387\u66f4\u9ad8 synchronized\u5230\u91cd\u91cf\u7ea7\u4e4b\u540e\u662f\u7b49\u5f85\u961f\u5217\uff08\u4e0d\u6d88\u8017CPU\uff09 CAS\uff08\u7b49\u5f85\u671f\u95f4\u6d88\u8017CPU\uff09 \u4e00\u5207\u4ee5\u5b9e\u6d4b\u4e3a\u51c6","title":"synchronized vs Lock (CAS)"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#lock-eliminate","text":"public void add(String str1,String str2){ StringBuffer sb = new StringBuffer(); sb.append(str1).append(str2); } \u6211\u4eec\u90fd\u77e5\u9053 StringBuffer \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u5173\u952e\u65b9\u6cd5\u90fd\u662f\u88ab synchronized \u4fee\u9970\u8fc7\u7684\uff0c\u4f46\u6211\u4eec\u770b\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0csb \u8fd9\u4e2a\u5f15\u7528\u53ea\u4f1a\u5728 add \u65b9\u6cd5\u4e2d\u4f7f\u7528\uff0c\u4e0d\u53ef\u80fd\u88ab\u5176\u5b83\u7ebf\u7a0b\u5f15\u7528\uff08\u56e0\u4e3a\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u6808\u79c1\u6709\uff09\uff0c\u56e0\u6b64 sb \u662f\u4e0d\u53ef\u80fd\u5171\u4eab\u7684\u8d44\u6e90\uff0cJVM \u4f1a\u81ea\u52a8\u6d88\u9664 StringBuffer \u5bf9\u8c61\u5185\u90e8\u7684\u9501\u3002","title":"\u9501\u6d88\u9664 lock eliminate"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#lock-coarsening","text":"public String test(String str){ int i = 0; StringBuffer sb = new StringBuffer(): while(i < 100){ sb.append(str); i++; } return sb.toString(): } JVM \u4f1a\u68c0\u6d4b\u5230\u8fd9\u6837\u4e00\u8fde\u4e32\u7684\u64cd\u4f5c\u90fd\u5bf9\u540c\u4e00\u4e2a\u5bf9\u8c61\u52a0\u9501\uff08while \u5faa\u73af\u5185 100 \u6b21\u6267\u884c append\uff0c\u6ca1\u6709\u9501\u7c97\u5316\u7684\u5c31\u8981\u8fdb\u884c 100 \u6b21\u52a0\u9501/\u89e3\u9501\uff09\uff0c\u6b64\u65f6 JVM \u5c31\u4f1a\u5c06\u52a0\u9501\u7684\u8303\u56f4\u7c97\u5316\u5230\u8fd9\u4e00\u8fde\u4e32\u7684\u64cd\u4f5c\u7684\u5916\u90e8\uff08\u6bd4\u5982 while \u865a\u5e7b\u4f53\u5916\uff09\uff0c\u4f7f\u5f97\u8fd9\u4e00\u8fde\u4e32\u64cd\u4f5c\u53ea\u9700\u8981\u52a0\u4e00\u6b21\u9501\u5373\u53ef\u3002","title":"\u9501\u7c97\u5316 lock coarsening"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#_3","text":"https://www.zhihu.com/question/63859501 \u5176\u5b9e\uff0c\u53ea\u88abVMThread\u8bbf\u95ee\uff0c\u964d\u7ea7\u4e5f\u5c31\u6ca1\u5565\u610f\u4e49\u4e86\u3002\u6240\u4ee5\u53ef\u4ee5\u7b80\u5355\u8ba4\u4e3a\u9501\u964d\u7ea7\u4e0d\u5b58\u5728\uff01","title":"\u9501\u964d\u7ea7\uff08\u4e0d\u91cd\u8981\uff09"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#_4","text":"\u4e00\u4e2aALU + \u4e24\u7ec4Registers + PC","title":"\u8d85\u7ebf\u7a0b"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/#_5","text":"http://openjdk.java.net/groups/hotspot/docs/HotSpotGlossary.html","title":"\u53c2\u8003\u8d44\u6599"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/","text":"Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb \u8bfb\u5199\u5206\u79bb\u5b9e\u672c\u8d28\u4e0a\u5c31\u662f\u628a\u7a0b\u5e8f\u5bf9\u6570\u636e\u5e93\u8bfb\u64cd\u4f5c\u548c\u5199\u64cd\u4f5c\u5206\u53d1\u5230\u4e0d\u540c\u7684\u6570\u636e\u5e93\u4e2d\u3002\u4e0d\u540c\u7684\u6570\u636e\u5e93\u5c31\u662f\u591a\u4e2a\u6570\u636e\u6e90\uff0c\u90a3 \u8bfb\u5199\u5206\u79bb \u8fd9\u91cc\u5c31\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u591a\u6570\u636e\u6e90\u95ee\u9898\u3002 \u5728spring\u4e2d\uff0c\u591a\u6570\u636e\u6e90\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7 AbstractRoutingDataSource \u548cspring aop\u6765\u89e3\u51b3\u3002 \u4ee3\u7801\u5b9e\u73b0 \u7ee7\u627f\u62bd\u8c61\u7c7b AbstractRoutingDataSource \uff0c\u5b9e\u73b0 determineCurrentLookupKey \u65b9\u6cd5\u3002 \u521b\u5efa\u5207\u9762\u62e6\u622a\u5668\uff0c\u62e6\u622a\u7b26\u5408\u6761\u4ef6\u7684\u65b9\u6cd5\u3002 \u5728\u65b9\u6cd5\u6267\u884c\u524d\u540e\u8fdb\u884c\u6570\u636e\u6e90\u5207\u6362\u3002 \u914d\u7f6e\u6587\u4ef6\uff1a # master spring.datasource.master.url=jdbc:mysql://192.168.31.100:3306/test?autoReconnect=true spring.datasource.master.username=root spring.datasource.master.password=123456 spring.datasource.master.driver-class-name=com.mysql.jdbc.Driver # slave spring.datasource.slave.url=jdbc:mysql://192.168.31.101:3306/course-study?autoReconnect=true spring.datasource.slave.username=root spring.datasource.slave.password=123456 spring.datasource.slave.driver-class-name=com.mysql.jdbc.Driver java\u76f8\u5173\u914d\u7f6e\u7c7b\u4ee3\u7801\uff1a public class DbProperties { private String url; private String username; private String password; private String driverClassName; // \u7701\u7565 getter \u548c setter \u65b9\u6cd5 } @Component @ConfigurationProperties(prefix = \"spring.datasource.master\") class MasterProperties extends DbProperties { } @Component @ConfigurationProperties(prefix = \"spring.datasource.slave\") class SlaveProperties extends DbProperties { } @Configuration public class DataSourceConfig { public static final String MASTER = \"master\"; public static final String SLAVE = \"slave\"; /** * \u4e3b\u5e93\u6570\u636e\u6e90 * * @param properties * @return */ @Bean(MASTER) public DataSource master(MasterProperties properties) { return build(properties); } /** * \u4ece\u5e93\u6570\u636e\u6e90 * * @param properties * @return */ @Bean(SLAVE) public DataSource slave(SlaveProperties properties) { return build(properties); } /** * \u6839\u636e\u914d\u7f6e\u4fe1\u606f\u6784\u5efa\u6570\u636e\u6e90 * * @param properties * @return */ private DataSource build(DbProperties properties) { return DataSourceBuilder .create() .url(properties.getUrl()) .username(properties.getUsername()) .password(properties.getPassword()) .driverClassName(properties.getDriverClassName()) .build(); } } /** * todo \u91cd\u70b9 * \u7ee7\u627fAbstractRoutingDataSource\uff0c\u5b9e\u73b0determineCurrentLookupKey\u65b9\u6cd5 */ public class DynamicDataSource extends AbstractRoutingDataSource { @Override protected Object determineCurrentLookupKey() { return DataSourceContext.get(); } } public class DataSourceContext { private static final ThreadLocal<String> datasource = new ThreadLocal<>(); public static String get() { String key = datasource.get(); return key == null ? \"master\" : key; } public static void setDatasource(String key) { datasource.set(key); } public static void clean() { datasource.remove(); } } @Configuration public class TransactionConfig { /** * \u914d\u7f6e\u52a8\u6001\u6570\u636e\u6e90 * * @param master * @param slave * @return */ @Bean public DynamicDataSource dynamic( @Autowired @Qualifier(MASTER) DataSource master, @Autowired @Qualifier(SLAVE) DataSource slave ) { Map<Object, Object> map = new HashMap<>(); map.put(MASTER, master); map.put(SLAVE, slave); DynamicDataSource routing = new DynamicDataSource(); routing.setTargetDataSources(map); routing.setDefaultTargetDataSource(master); return routing; } @Bean public PlatformTransactionManager platformTransactionManager(DynamicDataSource dataSource) { return new DataSourceTransactionManager(dataSource); } } // --------------------------------------------\u62e6\u622a\u5668\u914d\u7f6e----------------------------------------- public class DatasourceInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { before(invocation.getMethod()); Object invoke = null; try { invoke = invocation.proceed(); } finally { after(); } return invoke; } public void before(Method method) { //\u5982\u679c\u6709\u4e8b\u7269\u6ce8\u89e3\uff0c\u5219\u4f18\u5148\u4f7f\u7528\u4e8b\u7269\u6ce8\u89e3\u7684\u7279\u6027\u3002\u5982\u679c\u4e8b\u52a1\u5c5e\u6027\u4e3a\u53ea\u8bfb\u7684\uff0c\u90a3\u6beb\u65e0\u7591\u95ee\u53ef\u4ee5\u628a\u5b83\u5bf9\u6570\u636e\u7684\u8bf7\u6c42\u6253\u5230\u4ece\u5e93 Transactional transactional = method.getAnnotation(Transactional.class); if (transactional != null) { changeDatasource(transactional.readOnly() ? SLAVE : MASTER); return; } //\u8fd9\u91cc\u662f\u81ea\u5b9a\u4e49\u5c5e\u6027\uff0c\u5982\u679c\u6709\u7684\u65b9\u6cd5\u6ca1\u6709\u52a0\u4e8b\u7269\u6ce8\u89e3\uff0c\u4f46\u662f\u52a0\u4e86\u81ea\u5b9a\u4e49\u6ce8\u89e3\u7684\uff0c\u90a3\u4e48\u5c31\u4f1a\u8d70\u8fd9\u6bb5\u903b\u8f91 Datasource datasource = method.getAnnotation(Datasource.class); if (datasource != null && SLAVE.equals(datasource.value())) { changeDatasource(SLAVE); } } public void after() { // \u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e DataSourceContext.clean(); } private void changeDatasource(String type) { DataSourceContext.setDatasource(type); } } public class DatasourceMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Datasource \u548c @Transactional \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Datasource \u548c @Transactional \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Datasource.class) || method.isAnnotationPresent(Transactional.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Datasource.class) || clazz.isAnnotationPresent(Transactional.class); } } @Configuration public class AopConfig { /** * DefaultAdvisorAutoProxyCreator \u8fd9\u4e2a\u662f\u4e00\u4e2a\u53ef\u9009\u914d\u7f6e\u9879\uff0c\u5982\u679c\u5728\u4f60\u7684spring-boot\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86\u4e0b\u9762\u4efb\u610f\u4e00\u4e2a\u6ce8\u89e3\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2abean\u53ef\u4ee5\u4e0d\u7528\u914d\u7f6e * @EnableTransactionManagement * @EnableAspectJAutoProxy * @EnableCaching */ @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public DatasourceMethodPointcutAdvisor methodPointcutAdvisor(DatasourceInterceptor txInterceptor) { DatasourceMethodPointcutAdvisor advisor = new DatasourceMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public DatasourceInterceptor methodInterceptor() { return new DatasourceInterceptor(); } } AbstractRoutingDataSource\u8be6\u89e3 \u200b \uff08\u56fe-1\uff09 \u5f53\u7a0b\u5e8f\u6267\u884cCURD\u64cd\u4f5c\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528 AbstractRoutingDataSource \u7c7b\u7684 getConnection \u65b9\u6cd5\u6765\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5 Connection \u5bf9\u8c61\uff0c\u6700\u7ec8\u901a\u8fc7\u8be5\u8fde\u63a5\u5bf9\u8c61\u6765\u8bbf\u95ee\u6570\u636e\u5e93\u3002\u800c AbstractRoutingDataSource \u8fd9\u4e2a\u62bd\u8c61\u7c7b\u5b9e\u73b0\u4e86 DataSource \u63a5\u53e3\uff0c\u540c\u65f6\u4e5f\u5b9e\u73b0\u4e86 DataSource \u63a5\u53e3\u4e0b\u7684\u4e24\u4e2a getConnection \u65b9\u6cd5\uff0c\u6e90\u7801\u5982\u4e0b\uff1a \u200b \uff08\u56fe-2\uff09 \u200b \uff08\u56fe-3\uff09 \u200b \uff08\u56fe-4\uff09 \u901a\u8fc7\u4e0a\u9762\u7684\u6e90\u7801\u53ef\u4ee5\u770b\u51fa\uff0c DataSource \u5bf9\u8c61\u6700\u7ec8\u901a\u8fc7 determineCurrentLookupKey \u8fd9\u4e2a\u65b9\u6cd5\u786e\u5b9a\u3002\u56e0\u6b64\u6211\u4eec\u5b9e\u73b0\u8be5\u65b9\u6cd5\u5c31\u53ef\u4ee5\uff0c\u6b64\u5916\uff0c\u9664\u4e86\u5b9e\u73b0\u8be5\u65b9\u6cd5\u5916\uff0c\u8fd8\u9700\u8981\u901a\u8fc7 setTargetDataSources \u65b9\u6cd5\u5c06\u6240\u6709\u7684\u6570\u636e\u6e90\u4ee5 \u7684\u5f62\u5f0f\u4fdd\u5b58\u5230\u8fd9\u4e2a\u5bf9\u8c61\u91cc\u9762\u3002 \u200b \uff08\u56fe-5\uff09 \u200b \uff08\u56fe-6\uff09 \u200b \uff08\u56fe-7\uff09 \u7531\u4e8e AbstractRoutingDataSource \u7c7b\u540c\u65f6\u8fd8\u5b9e\u73b0\u4e86 InitializingBean \u63a5\u53e3\uff0c\u56e0\u6b64\u5f53\u8fd9\u4e2abean\u5b9e\u4f8b\u5316\u5b8c\u6210\u7684\u65f6\u5019\uff0c\u4f1a\u89e6\u53d1 afterPropertiesSet \u65b9\u6cd5\u6267\u884c\uff0c\u8be5\u65b9\u6cd5\u4e3b\u8981\u65f6\u901a\u8fc7 targetDataSources \u751f\u6210 resolvedDataSources \u5bf9\u8c61\uff0c\u4ee5\u53ca\u8bbe\u7f6e\u9ed8\u8ba4\u6570\u636e\u6e90\u3002\u5728\uff08\u56fe-3\uff09\u4e2d\u7684 determineTargetDataSource \u65b9\u6cd5\u4e2d\uff0c\u4f1a\u4ece resolvedDataSources \u5bf9\u8c61\u4e2d\u83b7\u53d6 DataSource \u3002 \u200b \uff08\u56fe-8\uff09 spring aop\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u5728\u672c\u6587\u7684\u89e3\u51b3\u65b9\u6848\u4ee3\u7801\u4e2d\u5e76\u6ca1\u6709\u4f7f\u7528\u5e38\u89c4\u7684aop\u62e6\u622a\u5668\u5199\u6cd5\uff0c\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u79cd\u3002\u56e0\u4e3a\u5728\u672c\u89e3\u51b3\u65b9\u6848\u4e2d\u9664\u4e86\u62e6\u622a\u4e86\u81ea\u5b9a\u7684 @Datasource \u6ce8\u89e3\u4e4b\u5916\uff0c\u8fd8\u62e6\u622a\u4e86 @Transactional \u6ce8\u89e3\u3002\u6211\u4eec\u90fd\u77e5\u9053 @Transactional \u6ce8\u89e3\u5199\u5728\u63a5\u53e3\u65b9\u6cd5\u548c\u5b9e\u73b0\u7c7b\u65b9\u6cd5\u4e0a\u662f\u90fd\u53ef\u4ee5\u751f\u6548\u7684\uff0c\u90a3\u4e0b\u9762\u8fd9\u79cd\u666e\u901a\u7684aop\u5199\u6cd5\u5bf9\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u662f\u65e0\u6cd5\u62e6\u622a\u7684\uff0c\u56e0\u6b64\u624d\u4f7f\u7528\u4e86\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668\u7684\u5199\u6cd5\u3002 \u5bf9\u4e8e\u5982\u4f55\u89e3\u51b3spring aop\u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u95ee\u9898\uff0c\u5728 Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u8fd9\u7bc7\u6587\u7ae0\u91cc\u9762\u6709\u8be6\u7ec6\u8bf4\u660e\u3002 @Aspect @Component @EnableAspectJAutoProxy public class DataSourceAspect { @Around(\"@annotation(com.xxx.Datasource)\") public Object around(ProceedingJoinPoint joinPoint) throws Throwable { // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u8bbe\u7f6e\u6570\u636e\u6e90... doingSomthingBefore(); // \u6267\u884c\u4e1a\u52a1\u65b9\u6cd5 Object result = joinPoint.proceed(); // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e... doingSomthingAfter(); return result; } }","title":"Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/#spring-aop","text":"\u8bfb\u5199\u5206\u79bb\u5b9e\u672c\u8d28\u4e0a\u5c31\u662f\u628a\u7a0b\u5e8f\u5bf9\u6570\u636e\u5e93\u8bfb\u64cd\u4f5c\u548c\u5199\u64cd\u4f5c\u5206\u53d1\u5230\u4e0d\u540c\u7684\u6570\u636e\u5e93\u4e2d\u3002\u4e0d\u540c\u7684\u6570\u636e\u5e93\u5c31\u662f\u591a\u4e2a\u6570\u636e\u6e90\uff0c\u90a3 \u8bfb\u5199\u5206\u79bb \u8fd9\u91cc\u5c31\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u591a\u6570\u636e\u6e90\u95ee\u9898\u3002 \u5728spring\u4e2d\uff0c\u591a\u6570\u636e\u6e90\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7 AbstractRoutingDataSource \u548cspring aop\u6765\u89e3\u51b3\u3002","title":"Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/#_1","text":"\u7ee7\u627f\u62bd\u8c61\u7c7b AbstractRoutingDataSource \uff0c\u5b9e\u73b0 determineCurrentLookupKey \u65b9\u6cd5\u3002 \u521b\u5efa\u5207\u9762\u62e6\u622a\u5668\uff0c\u62e6\u622a\u7b26\u5408\u6761\u4ef6\u7684\u65b9\u6cd5\u3002 \u5728\u65b9\u6cd5\u6267\u884c\u524d\u540e\u8fdb\u884c\u6570\u636e\u6e90\u5207\u6362\u3002 \u914d\u7f6e\u6587\u4ef6\uff1a # master spring.datasource.master.url=jdbc:mysql://192.168.31.100:3306/test?autoReconnect=true spring.datasource.master.username=root spring.datasource.master.password=123456 spring.datasource.master.driver-class-name=com.mysql.jdbc.Driver # slave spring.datasource.slave.url=jdbc:mysql://192.168.31.101:3306/course-study?autoReconnect=true spring.datasource.slave.username=root spring.datasource.slave.password=123456 spring.datasource.slave.driver-class-name=com.mysql.jdbc.Driver java\u76f8\u5173\u914d\u7f6e\u7c7b\u4ee3\u7801\uff1a public class DbProperties { private String url; private String username; private String password; private String driverClassName; // \u7701\u7565 getter \u548c setter \u65b9\u6cd5 } @Component @ConfigurationProperties(prefix = \"spring.datasource.master\") class MasterProperties extends DbProperties { } @Component @ConfigurationProperties(prefix = \"spring.datasource.slave\") class SlaveProperties extends DbProperties { } @Configuration public class DataSourceConfig { public static final String MASTER = \"master\"; public static final String SLAVE = \"slave\"; /** * \u4e3b\u5e93\u6570\u636e\u6e90 * * @param properties * @return */ @Bean(MASTER) public DataSource master(MasterProperties properties) { return build(properties); } /** * \u4ece\u5e93\u6570\u636e\u6e90 * * @param properties * @return */ @Bean(SLAVE) public DataSource slave(SlaveProperties properties) { return build(properties); } /** * \u6839\u636e\u914d\u7f6e\u4fe1\u606f\u6784\u5efa\u6570\u636e\u6e90 * * @param properties * @return */ private DataSource build(DbProperties properties) { return DataSourceBuilder .create() .url(properties.getUrl()) .username(properties.getUsername()) .password(properties.getPassword()) .driverClassName(properties.getDriverClassName()) .build(); } } /** * todo \u91cd\u70b9 * \u7ee7\u627fAbstractRoutingDataSource\uff0c\u5b9e\u73b0determineCurrentLookupKey\u65b9\u6cd5 */ public class DynamicDataSource extends AbstractRoutingDataSource { @Override protected Object determineCurrentLookupKey() { return DataSourceContext.get(); } } public class DataSourceContext { private static final ThreadLocal<String> datasource = new ThreadLocal<>(); public static String get() { String key = datasource.get(); return key == null ? \"master\" : key; } public static void setDatasource(String key) { datasource.set(key); } public static void clean() { datasource.remove(); } } @Configuration public class TransactionConfig { /** * \u914d\u7f6e\u52a8\u6001\u6570\u636e\u6e90 * * @param master * @param slave * @return */ @Bean public DynamicDataSource dynamic( @Autowired @Qualifier(MASTER) DataSource master, @Autowired @Qualifier(SLAVE) DataSource slave ) { Map<Object, Object> map = new HashMap<>(); map.put(MASTER, master); map.put(SLAVE, slave); DynamicDataSource routing = new DynamicDataSource(); routing.setTargetDataSources(map); routing.setDefaultTargetDataSource(master); return routing; } @Bean public PlatformTransactionManager platformTransactionManager(DynamicDataSource dataSource) { return new DataSourceTransactionManager(dataSource); } } // --------------------------------------------\u62e6\u622a\u5668\u914d\u7f6e----------------------------------------- public class DatasourceInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { before(invocation.getMethod()); Object invoke = null; try { invoke = invocation.proceed(); } finally { after(); } return invoke; } public void before(Method method) { //\u5982\u679c\u6709\u4e8b\u7269\u6ce8\u89e3\uff0c\u5219\u4f18\u5148\u4f7f\u7528\u4e8b\u7269\u6ce8\u89e3\u7684\u7279\u6027\u3002\u5982\u679c\u4e8b\u52a1\u5c5e\u6027\u4e3a\u53ea\u8bfb\u7684\uff0c\u90a3\u6beb\u65e0\u7591\u95ee\u53ef\u4ee5\u628a\u5b83\u5bf9\u6570\u636e\u7684\u8bf7\u6c42\u6253\u5230\u4ece\u5e93 Transactional transactional = method.getAnnotation(Transactional.class); if (transactional != null) { changeDatasource(transactional.readOnly() ? SLAVE : MASTER); return; } //\u8fd9\u91cc\u662f\u81ea\u5b9a\u4e49\u5c5e\u6027\uff0c\u5982\u679c\u6709\u7684\u65b9\u6cd5\u6ca1\u6709\u52a0\u4e8b\u7269\u6ce8\u89e3\uff0c\u4f46\u662f\u52a0\u4e86\u81ea\u5b9a\u4e49\u6ce8\u89e3\u7684\uff0c\u90a3\u4e48\u5c31\u4f1a\u8d70\u8fd9\u6bb5\u903b\u8f91 Datasource datasource = method.getAnnotation(Datasource.class); if (datasource != null && SLAVE.equals(datasource.value())) { changeDatasource(SLAVE); } } public void after() { // \u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e DataSourceContext.clean(); } private void changeDatasource(String type) { DataSourceContext.setDatasource(type); } } public class DatasourceMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Datasource \u548c @Transactional \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Datasource \u548c @Transactional \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Datasource.class) || method.isAnnotationPresent(Transactional.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Datasource.class) || clazz.isAnnotationPresent(Transactional.class); } } @Configuration public class AopConfig { /** * DefaultAdvisorAutoProxyCreator \u8fd9\u4e2a\u662f\u4e00\u4e2a\u53ef\u9009\u914d\u7f6e\u9879\uff0c\u5982\u679c\u5728\u4f60\u7684spring-boot\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86\u4e0b\u9762\u4efb\u610f\u4e00\u4e2a\u6ce8\u89e3\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2abean\u53ef\u4ee5\u4e0d\u7528\u914d\u7f6e * @EnableTransactionManagement * @EnableAspectJAutoProxy * @EnableCaching */ @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public DatasourceMethodPointcutAdvisor methodPointcutAdvisor(DatasourceInterceptor txInterceptor) { DatasourceMethodPointcutAdvisor advisor = new DatasourceMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public DatasourceInterceptor methodInterceptor() { return new DatasourceInterceptor(); } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/#abstractroutingdatasource","text":"\u200b \uff08\u56fe-1\uff09 \u5f53\u7a0b\u5e8f\u6267\u884cCURD\u64cd\u4f5c\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528 AbstractRoutingDataSource \u7c7b\u7684 getConnection \u65b9\u6cd5\u6765\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5 Connection \u5bf9\u8c61\uff0c\u6700\u7ec8\u901a\u8fc7\u8be5\u8fde\u63a5\u5bf9\u8c61\u6765\u8bbf\u95ee\u6570\u636e\u5e93\u3002\u800c AbstractRoutingDataSource \u8fd9\u4e2a\u62bd\u8c61\u7c7b\u5b9e\u73b0\u4e86 DataSource \u63a5\u53e3\uff0c\u540c\u65f6\u4e5f\u5b9e\u73b0\u4e86 DataSource \u63a5\u53e3\u4e0b\u7684\u4e24\u4e2a getConnection \u65b9\u6cd5\uff0c\u6e90\u7801\u5982\u4e0b\uff1a \u200b \uff08\u56fe-2\uff09 \u200b \uff08\u56fe-3\uff09 \u200b \uff08\u56fe-4\uff09 \u901a\u8fc7\u4e0a\u9762\u7684\u6e90\u7801\u53ef\u4ee5\u770b\u51fa\uff0c DataSource \u5bf9\u8c61\u6700\u7ec8\u901a\u8fc7 determineCurrentLookupKey \u8fd9\u4e2a\u65b9\u6cd5\u786e\u5b9a\u3002\u56e0\u6b64\u6211\u4eec\u5b9e\u73b0\u8be5\u65b9\u6cd5\u5c31\u53ef\u4ee5\uff0c\u6b64\u5916\uff0c\u9664\u4e86\u5b9e\u73b0\u8be5\u65b9\u6cd5\u5916\uff0c\u8fd8\u9700\u8981\u901a\u8fc7 setTargetDataSources \u65b9\u6cd5\u5c06\u6240\u6709\u7684\u6570\u636e\u6e90\u4ee5 \u7684\u5f62\u5f0f\u4fdd\u5b58\u5230\u8fd9\u4e2a\u5bf9\u8c61\u91cc\u9762\u3002 \u200b \uff08\u56fe-5\uff09 \u200b \uff08\u56fe-6\uff09 \u200b \uff08\u56fe-7\uff09 \u7531\u4e8e AbstractRoutingDataSource \u7c7b\u540c\u65f6\u8fd8\u5b9e\u73b0\u4e86 InitializingBean \u63a5\u53e3\uff0c\u56e0\u6b64\u5f53\u8fd9\u4e2abean\u5b9e\u4f8b\u5316\u5b8c\u6210\u7684\u65f6\u5019\uff0c\u4f1a\u89e6\u53d1 afterPropertiesSet \u65b9\u6cd5\u6267\u884c\uff0c\u8be5\u65b9\u6cd5\u4e3b\u8981\u65f6\u901a\u8fc7 targetDataSources \u751f\u6210 resolvedDataSources \u5bf9\u8c61\uff0c\u4ee5\u53ca\u8bbe\u7f6e\u9ed8\u8ba4\u6570\u636e\u6e90\u3002\u5728\uff08\u56fe-3\uff09\u4e2d\u7684 determineTargetDataSource \u65b9\u6cd5\u4e2d\uff0c\u4f1a\u4ece resolvedDataSources \u5bf9\u8c61\u4e2d\u83b7\u53d6 DataSource \u3002 \u200b \uff08\u56fe-8\uff09","title":"AbstractRoutingDataSource\u8be6\u89e3"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/#spring-aop_1","text":"\u5728\u672c\u6587\u7684\u89e3\u51b3\u65b9\u6848\u4ee3\u7801\u4e2d\u5e76\u6ca1\u6709\u4f7f\u7528\u5e38\u89c4\u7684aop\u62e6\u622a\u5668\u5199\u6cd5\uff0c\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u79cd\u3002\u56e0\u4e3a\u5728\u672c\u89e3\u51b3\u65b9\u6848\u4e2d\u9664\u4e86\u62e6\u622a\u4e86\u81ea\u5b9a\u7684 @Datasource \u6ce8\u89e3\u4e4b\u5916\uff0c\u8fd8\u62e6\u622a\u4e86 @Transactional \u6ce8\u89e3\u3002\u6211\u4eec\u90fd\u77e5\u9053 @Transactional \u6ce8\u89e3\u5199\u5728\u63a5\u53e3\u65b9\u6cd5\u548c\u5b9e\u73b0\u7c7b\u65b9\u6cd5\u4e0a\u662f\u90fd\u53ef\u4ee5\u751f\u6548\u7684\uff0c\u90a3\u4e0b\u9762\u8fd9\u79cd\u666e\u901a\u7684aop\u5199\u6cd5\u5bf9\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u662f\u65e0\u6cd5\u62e6\u622a\u7684\uff0c\u56e0\u6b64\u624d\u4f7f\u7528\u4e86\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668\u7684\u5199\u6cd5\u3002 \u5bf9\u4e8e\u5982\u4f55\u89e3\u51b3spring aop\u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u95ee\u9898\uff0c\u5728 Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u8fd9\u7bc7\u6587\u7ae0\u91cc\u9762\u6709\u8be6\u7ec6\u8bf4\u660e\u3002 @Aspect @Component @EnableAspectJAutoProxy public class DataSourceAspect { @Around(\"@annotation(com.xxx.Datasource)\") public Object around(ProceedingJoinPoint joinPoint) throws Throwable { // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u8bbe\u7f6e\u6570\u636e\u6e90... doingSomthingBefore(); // \u6267\u884c\u4e1a\u52a1\u65b9\u6cd5 Object result = joinPoint.proceed(); // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e... doingSomthingAfter(); return result; } }","title":"spring aop\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/","text":"Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u6700\u8fd1\u5728spring-boot\u9879\u76ee\u4e2d\u505amysql\u8bfb\u5199\u5206\u79bb\u65f6\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u901a\u8fc7\u5e38\u89c4\u7684spring aop\u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u3002\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u662f \u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u3002 \u672c\u6587\u5c06\u5148\u7ed9\u51fa\u5177\u4f53\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u7136\u540e\u518d\u6df1\u5165\u5206\u6790\u5176\u4e2d\u539f\u7406\u3002 \u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 1\u3001\u524d\u7f6e\u51c6\u5907\u4ee3\u7801\uff0c\u542f\u52a8\u7c7b\uff0c\u4e1a\u52a1\u4ee3\u7801\uff0c\u81ea\u5b9a\u4e49\u6ce8\u89e3\u7b49\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u6362\u6210\u81ea\u5df1\u7684\u3002 @SpringBootApplication public class DefaultProxyCreatorApplication { public static void main(String[] args) { SpringApplication.run(DefaultProxyCreatorApplication.class, args); } } public interface Test2Service { /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx void a(); void b(); void c(); } @Service public class Test2ServiceImpl implements Test2Service { @Override public void a() { System.out.println(\"test2 method a\"); } /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx @Override public void b() { System.out.println(\"test2 method b\"); } @Override public void c() { System.out.println(\"test2 method c\"); } } @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.TYPE}) public @interface Tx { } 2\u3001\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\u6838\u5fc3\u4ee3\u7801 public class TxInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(String.format(\"------------%s: before----------\", name)); Object object = invocation.proceed(); System.out.println(String.format(\"------------%s: after----------\", name)); return object; } } public class TxMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Tx.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Tx.class); } } 3\u3001\u914d\u7f6e\u65b9\u6cd5\u62e6\u622a\u5668\uff0c\u4f7f\u5176\u751f\u6548 @Configuration public class MethodInterceptorConfig { @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public TxInterceptor methodInterceptor() { return new TxInterceptor(); } } 4\u3001\u5355\u5143\u6d4b\u8bd5\uff0c\u529f\u80fd\u9a8c\u8bc1 @SpringBootTest class TxInterceptorTest { @Autowired private Test2Service test2Service; @Test void test1() { test2Service.a(); System.out.println(\"\\n\"); test2Service.b(); System.out.println(\"\\n\"); test2Service.c(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230 service#a \u548c service#b \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u88ab\u62e6\u622a\u5230\u4e86\u3002\u5176\u4e2d\u65b9\u6cd5 a \u7684\u6ce8\u89e3\u5728\u63a5\u53e3\u4e0a\uff0c\u65b9\u6cd5b\u7684\u6ce8\u89e3\u5728\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u89c1\u95ee\u9898\u5df2\u89e3\u51b3\u3002 \u539f\u7406\u5256\u6790 \u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u4e3a\u4ec0\u4e48\u5931\u6548 @Aspect @Component @EnableAspectJAutoProxy public class DataSourceAspect { @Around(\"@annotation(com.xxx.DataSource)\") public Object around(ProceedingJoinPoint joinPoint) throws Throwable { // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u8bbe\u7f6e\u6570\u636e\u6e90... doingSomthingBefore(); // \u6267\u884c\u4e1a\u52a1\u65b9\u6cd5 Object result = joinPoint.proceed(); // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e... doingSomthingAfter(); return result; } } \u8fd9\u662f\u4e00\u6bb5\u975e\u5e38\u666e\u901a\u7684spring aop\u62e6\u622a\u5668\u4ee3\u7801\uff0c\u7531\u4e8e\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u4e8b\u52a1\u6ce8\u89e3\u5168\u90e8\u90fd\u662f\u5199\u5728\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4e5f\u5c31\u4e60\u60ef\u6027\u7684\u628a\u6ce8\u89e3 @DataSource \u5199\u5728\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0a\uff0c\u4e00\u8c03\u8bd5\u4ee3\u7801\uff0c\u8fd9\u65f6\u5019\u53d1\u73b0spring aop\u6839\u672c\u5c31\u4e0d\u9e1f\u4f60\uff0c\u62e6\u622a\u5668\u6ca1\u751f\u6548\u3002\u7f51\u4e0a\u4e00\u901a\u641c\u7d22\u540e\uff0c\u53d1\u73b0\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u4eba\u975e\u5e38\u591a\uff0c\u7b54\u6848\u4e5f\u662f\u4e94\u82b1\u516b\u95e8\uff0c\u6709\u7684\u8bf4\u662fspring-boot 1.x\u7248\u672c\u7684bug\uff0c\u5347\u7ea7\u52302.x\u7248\u672c\u5c31\u53ef\u4ee5\u4e86\u3002\u7136\u540e\u5c31\u5c41\u98a0\u5c41\u98a0\u7684\u628aspring-boot\u7248\u672c\u6362\u6210\u6700\u65b0\u7684 2.3.0.RELEASE \u7248\u672c\uff0c\u6839\u672c\u5c31\u6ca1\u7528\uff1b\u4e5f\u6709\u4eba\u5206\u6790\u8bf4aop\u4ee3\u7406\u7684\u662fspring\u7684bean\u5b9e\u4f8b\uff0c\u7136\u800c\u63a5\u53e3\u5f88\u663e\u7136\u662f\u4e0d\u80fd\u5b9e\u4f8b\u5316\u7684\uff0c\u6240\u4ee5aop\u65e0\u6cd5\u751f\u6548\u3002\u67e5\u4e86\u5f88\u591a\uff0c\u90fd\u662f\u5206\u6790\u4e3a\u4ec0\u4e48\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u53ef\u80fd\u662f\u6211\u641c\u7d22\u7684\u5173\u952e\u5b57\u4e0d\u5bf9\u7684\u539f\u56e0\uff0c\u5c31\u6ca1\u600e\u4e48\u770b\u5230\u6709\u89e3\u51b3\u65b9\u6848\u7684\u5e16\u5b50\u3002 \u540c\u6837\u7684\u5199\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684 @Transactional \u4e3a\u4ec0\u4e48\u5c31\u80fd\u751f\u6548\u5462\uff08\u81f3\u4e8espring\u4e8b\u52a1\u539f\u7406\u7684\u89e3\u6790\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u4e86\uff0c\u7f51\u4e0a\u4e00\u5927\u628a\uff09\uff1f \u6e90\u7801 \u901a\u8fc7 @EnableTransactionManagement \u8fdb\u53bb\u770b\u4e86\u4e0bspring\u4e8b\u52a1\u7684\u6e90\u7801\uff0c \u4e0a\u56fe\u4e2d\u770b\u5230 @EnableTransactionManagement \u6ce8\u89e3\u4e0a\u5bfc\u5165\u4e86\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u77e5\u9053\u5e72\u4ec0\u4e48\u7684\uff0c\u70b9\u8fdb\u53bb\u770b\u770b TransactionManagementConfigurationSelector \u7ee7\u627f\u4e86 AdviceModeImportSelector \uff0c\u5c31\u662f\u60f3\u52a0\u8f7d\u522b\u7684\u7c7b\uff0c\u5728 selectImports \u65b9\u6cd5\u8fd4\u56de\u7684\u5185\u5bb9\u5c31\u662f\u8981\u52a0\u8f7d\u7684\u7c7b\uff0c\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u5206\u522b\u52a0\u8f7d\u4e86 AutoProxyRegistrar \uff0c ProxyTransactionManagementConfiguration \u8fd9\u4e24\u4e2a\u7c7b\uff0c\u901a\u8fc7\u540d\u5b57\u80fd\u731c\u51fa ProxyTransactionManagementConfiguration \u8fd9\u4e2a\u7c7b\u5e94\u8be5\u662f\u4e00\u4e2a\u4e8b\u52a1\u76f8\u5173\u7684\u914d\u7f6e\u7c7b\uff0c\u7ee7\u7eed\u70b9\u8fdb\u53bb\u770b\u4e0b \u70b9\u5f00 ProxyTransactionManagementConfiguration \u7c7b\u540e\uff0c\u679c\u7136\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff0c\u5728\u8fd9\u4e2a\u7c7b\u4e2d\u5176\u5b9e\u5b83\u4e3b\u8981\u662f\u5e72\u4e86\u4e00\u4ef6\u4e8b\uff0c\u914d\u7f6espring\u7684 advisor \uff08\u589e\u5f3a\u5668\uff09\u3002\u8fd9\u91cc\u7684 TransactionAttributeSource \u8868\u793a\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u5b83\u662f\u7528\u6765\u751f\u6210\u4e8b\u52a1\u76f8\u5173\u7684\u5c5e\u6027\u7684\uff0c\u6bd4\u5982\u4ec0\u4e48\u4e8b\u52a1\u662f\u5426\u4e3a\u53ea\u8bfb\u554a\uff0c\u4f20\u64ad\u7279\u6027\u554a\u7b49\u7b49\uff0c\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u6765\u83b7\u53d6\u7684\uff0c\u90a3\u8fd9\u4e2a\u63a5\u53e3\u6709\u5f88\u591a\u5b9e\u73b0\u7c7b\uff0c\u5982\u56fe\uff1a \u8fd9\u91cc\u9ed8\u8ba4\u662f\u7528\u7684 AnnotationTransactionAttributeSource \u6ce8\u89e3\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u662f\u7528\u6765\u5904\u7406 @Transactional \u6ce8\u89e3\u7684\u3002 \u521a\u521a\u7684 ProxyTransactionManagementConfiguration \u914d\u7f6e\u7c7b\u4e2d\u8fd8\u6709\u4e00\u4e2abean\uff0c TransactionInterceptor \u4e8b\u52a1\u62e6\u622a\u5668\uff0c\u8fd9\u4e2a\u7c7b\u624d\u662f\u771f\u6b63\u7684\u5904\u7406\u4e8b\u52a1\u76f8\u5173\u7684\u4e00\u5207\u903b\u8f91\u7684\uff0c\u53ef\u4ee5\u770b\u4e0b\u4e00\u5b83\u7684\u7c7b\u56fe\u7ed3\u6784\uff0c \u53ef\u4ee5\u770b\u5230 TransactionInterceptor \u7ee7\u627f\u4e86 TransactionAspectSupport \u7c7b\u548c\u5b9e\u73b0\u4e86 MethodInterceptor \u63a5\u53e3\uff0c\u5176\u4e2d TransactionAspectSupport \u662f\u63d0\u4f9b\u4e8b\u52a1\u652f\u6301\u7684\uff0c MethodInterceptor \u662f\u7528\u6765\u62e6\u622a\u52a0\u4e86 @Transactional \u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\uff0c\u804c\u8d23\u5206\u660e\u3002\u90a3\u8fd9\u91cc\u77e5\u9053\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u62e6\u622a\u5668\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u4e00\u4e9b\u9a9a\u64cd\u4f5c\u4e86\u3002 \u8fd9\u91cc\u6211\u4eec\u5148\u56de\u5230\u6211\u4eec\u7684\u9700\u6c42\u70b9\u4e0a\uff0c\u6211\u4eec\u8981\u505a\u7684\u662f\u5b9e\u73b0\u7a0b\u5e8f\u81ea\u52a8\u8bfb\u5199\u5206\u79bb\uff0c\u90a3\u4e48\u8bfb\u5199\u5206\u79bb\u7684\u672c\u8d28\u662f\u5565\uff0c\u4e0d\u5c31\u662f\u5207\u6362\u6570\u636e\u6e90\u4e48\uff0c\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u600e\u4e48\u5b9e\u73b0\u591a\u6570\u636e\u6e90\u5207\u6362\u7684\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u52a8\u6001\u6570\u636e\u6e90\u65b9\u6848\u7f51\u4e0a\u53c8\u662f\u4e00\u5927\u628a\u7684\uff0c\u4f46\u662f\u6709\u7684\u662f\u6709\u5751\u7684\uff0c\u6bd4\u5982\u4e3a\u4ec0\u4e48\u4f60\u914d\u4e86\u52a8\u6001\u6570\u636e\u6e90\u52a0\u4e0a\u4e8b\u52a1\u6ce8\u89e3\u4e4b\u540e\u5c31\u65e0\u6548\u4e86\u5462\uff0c\u53bb\u6389\u4e8b\u52a1\u6ce8\u89e3\u53c8\u53ef\u4ee5\u4e86\uff0c\u662f\u4e0d\u662f\u5f88\u86cb\u75bc\u3002\u52a8\u6001\u5207\u6362\u6570\u636e\u6e90\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff1a \u5728\u9002\u5f53\u7684\u65f6\u673a\u5207\u6362\u6570\u636e\u6e90 \uff09\u3002\u90a3\u6211\u8fd9\u91cc\u7684\u9047\u5230\u7684\u95ee\u9898\u662f \u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u4e0a\u7684\u6ce8\u89e3 \uff08\u5176\u5b9e\u4f60\u628a\u6ce8\u89e3\u653e\u5230\u5b9e\u73b0\u7c7b\u7684\u65b9\u6cd5\u4e0a\uff0c\u5565\u4e8b\u513f\u90fd\u6ca1\u4e86\u3002\u4f46\u6211\u8fd9\u4e2a\u4eba\u5c31\u662f\u559c\u6b22\u6760\uff0c\u975e\u8981\u653e\u5230\u63a5\u53e3\u65b9\u6cd5\u4e0a\uff09 \u90a3\u600e\u4e48\u641e\u5b9a\u8fd9\u4e2a\u95ee\u9898\u5462\uff0c\u5176\u5b9e\u901a\u8fc7\u4e0a\u9762\u5bf9\u4e8b\u52a1\u6e90\u7801\u7684\u7b80\u5355\u5206\u6790\u4e4b\u540e\u5927\u81f4\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a \u91cd\u5199\u4e8b\u52a1\u62e6\u622a\u5668\uff0c\u5728\u4e8b\u52a1\u5904\u7406\u7684\u524d\u540e\u52a0\u4e0a\u81ea\u5df1\u7684\u903b\u8f91\uff0c\u5207\u6362\u6570\u636e\u6e90\u3002\u7136\u540e\u5c06\u81ea\u5df1\u91cd\u5199\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u8bbe\u7f6e\u5230\u521a\u5f00\u59cb\u7684 advisor \u4e2d\u5c31\u53ef\u5df2\u4e86 \u521d\u6b65\u89e3\u51b3\u65b9\u6848 \u91cd\u5199\u4e8b\u52a1\u62e6\u622a\u5668 public class CustomInterceptor extends TransactionInterceptor { private static final long serialVersionUID = 1154144110124764905L; public CustomInterceptor(PlatformTransactionManager ptm, TransactionAttributeSource tas) { super(ptm, tas); } @Override public Object invoke(MethodInvocation invocation) throws Throwable { before(invocation.getMethod()); Object invoke = null; try { invoke = super.invoke(invocation); } finally { after(); } return invoke; } public void before(Method method) { // \u8fd9\u91cc\u90fd\u62ff\u5230method\u5bf9\u8c61\u4e86\uff0c\u90a3\u901a\u8fc7\u53cd\u5c04\u53ef\u4ee5\u505a\u7684\u4e8b\u60c5\u5c31\u5f88\u591a\u4e86\uff0c\u80fd\u5230\u8fd9\u91cc\u6765\u7684\uff0c\u90a3\u65b9\u6cd5\u4e0a\u9762\u80af\u5b9a\u662f\u6709Transactional\u6ce8\u89e3\u7684\uff0c\u62ff\u5230\u5b83\u5e76\u83b7\u53d6\u76f8\u5173\u5c5e\u6027\uff0c\u5982\u679c\u4e8b\u52a1\u5c5e\u6027\u4e3a\u53ea\u8bfb\u7684\uff0c\u90a3\u6beb\u65e0\u7591\u95ee\u53ef\u4ee5\u628a\u5b83\u5bf9\u6570\u636e\u7684\u8bf7\u6c42\u6253\u5230\u4ece\u5e93 Transactional transactional = method.getAnnotation(Transactional.class); boolean readOnly = transactional.readOnly(); if (readOnly) { // \u53ea\u8bfb\u4e8b\u52a1\uff0c\u5207\u6362\u5230mysql\u7684\u4ece\u5e93 changeDatasource(DatasourceType.SLAVE); } else { // \u975e\u53ea\u8bfb\u4e8b\u52a1\uff0c\u5207\u6362\u5230mysql\u4e3b\u5e93 changeDatasource(DatasourceType.MASTER); } } public void after() { // \u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e changeDatasource(DatasourceType.CLEAN); } private void changeDatasource(DatasourceType type) { //\u6a21\u62df\u6570\u636e\u6e90\u5207\u6362 System.out.println(\"\\n\\n\\n===========================================================\"); System.out.println(\"Datasource = \" + type); System.out.println(\"===========================================================\\n\\n\\n\"); } } enum DatasourceType { MASTER, SLAVE, CLEAN } \u8bbe\u7f6e\u62e6\u622a\u5668 \u5c06\u81ea\u5df1\u91cd\u5199\u540e\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u8bbe\u7f6e\u5230 advisor \u4e2d\uff0c\u5c06\u5b83\u9ed8\u8ba4\u7684\u8986\u76d6\u6389 @Configuration public class TransactionConfig implements InitializingBean, BeanFactoryAware { @Override public void afterPropertiesSet() throws Exception { // \u83b7\u53d6\u589e\u5f3a\u5668 BeanFactoryTransactionAttributeSourceAdvisor advisor = factory.getBean(BeanFactoryTransactionAttributeSourceAdvisor.class); PlatformTransactionManager platformTransactionManager = factory.getBean(PlatformTransactionManager.class); // spring\u539f\u6709\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u7528\u7684\u5c31\u662f\u6ce8\u89e3\u7c7b\u578b\u7684\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u90a3\u6211\u4eec\u4e5f\u7528\u8fd9\u4e2a\uff0c\u4e0d\u7136\u4f60\u7684\u4e8b\u52a1\u6ce8\u89e3\u5c31\u5931\u6548\u4e86\uff0c\u90a3\u4e0d\u5c31\u767d\u5fd9\u6d3b\u4e86\u4e48 TransactionAttributeSource attributeSource = new AnnotationTransactionAttributeSource(); // \u5b9e\u4f8b\u5316\u81ea\u5df1\u7684\u4e8b\u52a1\u62e6\u622a\u5668 CustomInterceptor advice = new CustomInterceptor(platformTransactionManager, attributeSource); // \u628a\u5b83\u539f\u6709\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u66ff\u6362\u6210\u81ea\u5df1\u7684\uff0c\u56e0\u4e3a\u4f60\u91cd\u5199\u7684\u4e8b\u52a1\u62e6\u622a\u662f\u7ee7\u627f\u5b83\u539f\u6709\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u641e advisor.setAdvice(advice); } private DefaultListableBeanFactory factory; @Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException { if (beanFactory instanceof DefaultListableBeanFactory) { this.factory = (DefaultListableBeanFactory) beanFactory; } } } \u5230\u8fd9\u91cc\uff0c\u5bf9\u4e8e\u63a5\u53e3\u4e0a\u6709\u4e8b\u52a1\u6ce8\u89e3\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u52a8\u6001\u7684\u5207\u6362\u5b83\u7684\u6570\u636e\u6e90\u4e86\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u4e0d\u7528\u81ea\u5b9a\u6ce8\u89e3\uff0c\u76f4\u63a5\u7528spring\u81ea\u5e26\u7684\u6ce8\u89e3\u5c31\u597d\u3002 \u90a3\u7ecf\u8fc7\u4e0a\u9762\u7684\u4e00\u987f\u64cd\u4f5c\u540e\uff0c\u7ec8\u4e8e\u53ef\u4ee5\u5728\u4e8b\u52a1\u7684\u524d\u540e\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u4e86\u3002 \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u6765\u5c06\uff0c\u8fd9\u4e2a\u65b9\u6848\u786e\u5b9e\u89e3\u51b3\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u95ee\u9898\uff0c\u4f46\u4e5f\u53ea\u662f\u4ec5\u9650\u4e8espring\u7684\u4e8b\u52a1\u6ce8\u89e3\u3002\u90a3\u5bf9\u4e8e\u672c\u6587\u6807\u9898\u6240\u8ff0\u7684\u95ee\u9898\uff0c\u5728\u672c\u8d28\u4e0a\u5e76\u6ca1\u6709\u5f97\u5230\u89e3\u51b3\uff0c\u56e0\u4e3a\u4e8b\u52a1\u8fd9\u91cc\u662fspring-transaction\u6a21\u5757\u5b9e\u73b0\u7684\u6ce8\u89e3\u5904\u7406\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u662f\u7528\u4e86\u4e00\u79cd\u6295\u673a\u53d6\u5de7\u7684\u65b9\u6cd5\u8fbe\u5230\u4e86\u76ee\u7684\u800c\u5df2\u3002 \u901a\u7528\u89e3\u51b3\u65b9\u6848 \u6240\u8c13\u901a\u7528\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u6a21\u4effspring-transaction\u5199\u4e00\u4e2a\u81ea\u5df1\u7684\u65b9\u6cd5\u62e6\u622a\u5668\uff0c\u90a3\u8fd9\u91cc\u5c31\u4e0d\u9650\u4e8e\u6ce8\u89e3\u4e86\uff0c\u901a\u8fc7\u6ce8\u89e3\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u4e0d\u8fc7\u9664\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7spring aop\u62e6\u622a\u5916\uff0c\u5176\u4ed6\u7684\u65b9\u5f0f\u597d\u50cf\u90fd\u53ef\u4ee5\u901a\u8fc7spring aop\u76f4\u63a5\u5b9e\u73b0\u3002 \u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\u62e6\u622a\u5668\uff1a \u521b\u5efa ProxyFactoryBean \u9700\u8981\u6709\u4e00\u4e2a Advisor \u5bf9\u8c61\uff08 AbstractBeanFactoryPointcutAdvisor \uff09\uff0c\u7136\u540e\u628a\u8fd9\u4e2aadvisor\u5bf9\u8c61\u8bbe\u7f6e\u5230 ProxyFactoryBean \u4e2d \u9700\u8981\u6709\u4e00\u4e2a PointCut \u5bf9\u8c61\uff08 StaticMethodMatcherPointcut \uff09\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 advisor \u5bf9\u8c61\u4e2d \u9700\u8981\u6709\u4e00\u4e2a Advice \u5bf9\u8c61\uff08 MethodInterceptor \uff09\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 advisor \u5bf9\u8c61\u4e2d demo /** * \u4e1a\u52a1\u63a5\u53e3 */ interface Service { void test1(); /** * \u6253\u4e0a\u6807\u8bb0\uff0c\u9700\u8981\u88ab\u62e6\u622a\u7684\u65b9\u6cd5 */ @DataSource void test2(); } /** * \u4e1a\u52a1\u5b9e\u73b0 */ class ServiceImpl implements Service { @Override public void test1() { System.out.println(\"hello world\"); } @Override public void test2() { System.out.println(\"I'm doing something in DB\"); } } /** * \u65b9\u6cd5\u62e6\u622a\u6807\u8bb0 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE, ElementType.METHOD}) @interface DataSource { } class DataSourceAdvisor extends AbstractBeanFactoryPointcutAdvisor { private DataSourcePointCut pointCut; public void setPointCut(DataSourcePointCut pointCut) { this.pointCut = pointCut; } @Override public Pointcut getPointcut() { return pointCut; } } class DataSourceInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(\"==============\" + name + \" before ================\"); Object result = invocation.proceed(); System.out.println(\"==============\" + name + \" after ================\"); return result; } } class DataSourcePointCut extends StaticMethodMatcherPointcut { /** * \u65b9\u6cd5\u5339\u914d\u5668\uff0c\u8fd9\u4e2a\u624d\u662f\u771f\u6b63\u8d77\u4f5c\u7528\u7684\u4e3b * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return method.isAnnotationPresent(DataSource.class); } } /** * \u5355\u5143\u6d4b\u8bd5 */ public class MethodInterceptorTest { private ProxyFactoryBean proxyFactoryBean; @BeforeEach public void before() { Service service = new ServiceImpl(); ProxyFactoryBean pfb = new ProxyFactoryBean(); // \u8bbe\u7f6e\u54ea\u4e2a\u5bf9\u8c61\u9700\u8981\u88ab\u4ee3\u7406 pfb.setTarget(service); // \u521d\u59cb\u5316 advisor DataSourceAdvisor advisor = new DataSourceAdvisor(); // \u8bbe\u7f6epointcut advisor.setPointCut(new DataSourcePointCut()); // \u8bbe\u7f6e\u65b9\u6cd5\u62e6\u622a\u5668 advisor.setAdvice(new DataSourceInterceptor()); // \u5c06advisor\u6dfb\u52a0\u5230\u4ee3\u7406\u4e2d pfb.addAdvisor(advisor); proxyFactoryBean = pfb; } @Test public void test() { // \u901a\u8fc7\u4ee3\u7406\u751f\u6210 service \u5b9e\u4f8b Service proxy = (Service) proxyFactoryBean.getObject(); proxy.test1(); System.out.println(\"\\n\\n\"); proxy.test2(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230\u6210\u529f\u7684\u62e6\u622a\u5230\u4e86 service#test2 \u65b9\u6cd5\u3002\u5b9e\u73b0\u65b9\u6cd5\u62e6\u622a\u5c31\u8fd9\u4e48\u51e0\u4e2a\u6b65\u9aa4\uff0c\u8fd9\u662f\u4e00\u4e2abean\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u7684\u4f01\u4e1a\u7ea7\u5f00\u53d1\u4e2d\uff0c\u8fd9\u4e48\u5199\u5f88\u663e\u7136\u4e0d\u73b0\u5b9e\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u8981\u662f\u8fd9\u4e48\u5199\uff0c\u90a3\u5c31\u79bb\u62ce\u76d2\u996d\u4e0d\u8fdc\u4e86... Pro\u7248 \u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\u6211\u4eec\u53ea\u9700\u8981\u89e3\u51b3\u4e00\u4ef6\u4e8b\u60c5\uff0c\u90a3\u5c31\u662f\u8ba9spring\u80fd\u591f\u81ea\u52a8\u4e3a\u6211\u4eec\u521b\u5efa ProxyFactoryBean @SpringBootApplication public class DefaultProxyCreatorApplication { public static void main(String[] args) { SpringApplication.run(DefaultProxyCreatorApplication.class, args); } } public interface Test2Service { /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx void a(); void b(); void c(); } @Service public class Test2ServiceImpl implements Test2Service { @Override public void a() { System.out.println(\"test2 method a\"); } /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx @Override public void b() { System.out.println(\"test2 method b\"); } @Override public void c() { System.out.println(\"test2 method c\"); } } @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.TYPE}) public @interface Tx { } public class TxInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(String.format(\"------------%s: before----------\", name)); Object object = invocation.proceed(); System.out.println(String.format(\"------------%s: after----------\", name)); return object; } } public class TxMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Tx.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Tx.class); } } @Configuration public class AopConfig { @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public TxInterceptor methodInterceptor() { return new TxInterceptor(); } } \u521b\u5efa\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u9a8c\u8bc1\u529f\u80fd @SpringBootTest class TxInterceptorTest { @Autowired private Test2Service test2Service; @Test void test1() { test2Service.a(); System.out.println(\"\\n\"); test2Service.b(); System.out.println(\"\\n\"); test2Service.c(); } } \u5355\u5143\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230 service#a \u548c service#b \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u88ab\u62e6\u622a\u5230\u4e86\u3002\u5176\u4e2d\u65b9\u6cd5 a \u7684\u6ce8\u89e3\u5728\u63a5\u53e3\u4e0a\uff0c\u65b9\u6cd5b\u7684\u6ce8\u89e3\u5728\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u89c1\u8fd9\u5df2\u7ecf\u8fbe\u5230\u4e86\u6211\u7684\u76ee\u7684\uff0c\u6210\u529f\u7684\u62e6\u622a\u5230\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u3002 \u6ce8\u610f\u7ec6\u8282 \u90a3\u5982\u679c\u8bf4\u4ec5\u4ec5\u5c06\u4e0a\u9762\u7684\u914d\u7f6e\u4ee3\u7801\u590d\u5236\u5230\u9879\u76ee\u4e2d\u53bb\u7528\u7684\u8bdd\uff0c\u662f\u53ef\u4ee5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u6ce8\u89e3\u7684\uff0c\u4f46\u662f\u5982\u679c\u8981\u548cspring\u7684\u4e8b\u52a1\u6ce8\u89e3\u4e00\u8d77\u7528\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u8981\u5931\u671b\u4e86\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5148\u7ecf\u8fc7\u4e8b\u52a1\u7684\u62e6\u622a\uff0c\u7136\u540e\u624d\u5230\u4f60\u7684\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\uff0c\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u7b80\u5355\uff0c\u5c06advisor\u8bbe\u7f6e\u4e00\u4e2a\u6267\u884c\u987a\u5e8f\u5c31\u53ef\u4ee5\u4e86 @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); advisor.setOrder(1);//\u8bbe\u7f6e\u987a\u5e8f\uff0c\u503c\u8d8a\u5c0f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u4e5f\u5c31\u662f\u8d8a\u88ab\u5148\u6267\u884c return advisor; } advisor.setOrder(1) \u90a3\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u53d6\u7684\u5462\uff0c\u96be\u9053\u8bbe\u7f6e\u62101\u5c31\u4e00\u5b9a\u4f1a\u88ab\u5148\u6267\u884c\u4e48\uff0c \u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230spring\u4e8b\u52a1\u7684advisor\u6267\u884c\u987a\u5e8f\u503c\u4e3aInteger\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u4e5f\u5c31\u662f\u4f60\u968f\u4fbf\u8bbe\u7f6e\u4e00\u4e2a\u503c\uff08\u53ea\u8981\u5b83\u4e0d\u662fInteger.MAX_VALUE\uff09\uff0c\u5b83\u90fd\u4f1a\u6bd4spring\u4e8b\u52a1\u62e6\u622a\u5668\u5148\u6267\u884c\u3002","title":"Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#spring-aop","text":"\u6700\u8fd1\u5728spring-boot\u9879\u76ee\u4e2d\u505amysql\u8bfb\u5199\u5206\u79bb\u65f6\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u901a\u8fc7\u5e38\u89c4\u7684spring aop\u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u3002\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u662f \u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u3002 \u672c\u6587\u5c06\u5148\u7ed9\u51fa\u5177\u4f53\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u7136\u540e\u518d\u6df1\u5165\u5206\u6790\u5176\u4e2d\u539f\u7406\u3002","title":"Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_1","text":"","title":"\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#1","text":"@SpringBootApplication public class DefaultProxyCreatorApplication { public static void main(String[] args) { SpringApplication.run(DefaultProxyCreatorApplication.class, args); } } public interface Test2Service { /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx void a(); void b(); void c(); } @Service public class Test2ServiceImpl implements Test2Service { @Override public void a() { System.out.println(\"test2 method a\"); } /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx @Override public void b() { System.out.println(\"test2 method b\"); } @Override public void c() { System.out.println(\"test2 method c\"); } } @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.TYPE}) public @interface Tx { }","title":"1\u3001\u524d\u7f6e\u51c6\u5907\u4ee3\u7801\uff0c\u542f\u52a8\u7c7b\uff0c\u4e1a\u52a1\u4ee3\u7801\uff0c\u81ea\u5b9a\u4e49\u6ce8\u89e3\u7b49\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u6362\u6210\u81ea\u5df1\u7684\u3002"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#2","text":"public class TxInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(String.format(\"------------%s: before----------\", name)); Object object = invocation.proceed(); System.out.println(String.format(\"------------%s: after----------\", name)); return object; } } public class TxMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Tx.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Tx.class); } }","title":"2\u3001\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\u6838\u5fc3\u4ee3\u7801"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#3","text":"@Configuration public class MethodInterceptorConfig { @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public TxInterceptor methodInterceptor() { return new TxInterceptor(); } }","title":"3\u3001\u914d\u7f6e\u65b9\u6cd5\u62e6\u622a\u5668\uff0c\u4f7f\u5176\u751f\u6548"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#4","text":"@SpringBootTest class TxInterceptorTest { @Autowired private Test2Service test2Service; @Test void test1() { test2Service.a(); System.out.println(\"\\n\"); test2Service.b(); System.out.println(\"\\n\"); test2Service.c(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230 service#a \u548c service#b \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u88ab\u62e6\u622a\u5230\u4e86\u3002\u5176\u4e2d\u65b9\u6cd5 a \u7684\u6ce8\u89e3\u5728\u63a5\u53e3\u4e0a\uff0c\u65b9\u6cd5b\u7684\u6ce8\u89e3\u5728\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u89c1\u95ee\u9898\u5df2\u89e3\u51b3\u3002","title":"4\u3001\u5355\u5143\u6d4b\u8bd5\uff0c\u529f\u80fd\u9a8c\u8bc1"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_2","text":"","title":"\u539f\u7406\u5256\u6790"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_3","text":"@Aspect @Component @EnableAspectJAutoProxy public class DataSourceAspect { @Around(\"@annotation(com.xxx.DataSource)\") public Object around(ProceedingJoinPoint joinPoint) throws Throwable { // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u8bbe\u7f6e\u6570\u636e\u6e90... doingSomthingBefore(); // \u6267\u884c\u4e1a\u52a1\u65b9\u6cd5 Object result = joinPoint.proceed(); // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e... doingSomthingAfter(); return result; } } \u8fd9\u662f\u4e00\u6bb5\u975e\u5e38\u666e\u901a\u7684spring aop\u62e6\u622a\u5668\u4ee3\u7801\uff0c\u7531\u4e8e\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u4e8b\u52a1\u6ce8\u89e3\u5168\u90e8\u90fd\u662f\u5199\u5728\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4e5f\u5c31\u4e60\u60ef\u6027\u7684\u628a\u6ce8\u89e3 @DataSource \u5199\u5728\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0a\uff0c\u4e00\u8c03\u8bd5\u4ee3\u7801\uff0c\u8fd9\u65f6\u5019\u53d1\u73b0spring aop\u6839\u672c\u5c31\u4e0d\u9e1f\u4f60\uff0c\u62e6\u622a\u5668\u6ca1\u751f\u6548\u3002\u7f51\u4e0a\u4e00\u901a\u641c\u7d22\u540e\uff0c\u53d1\u73b0\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u4eba\u975e\u5e38\u591a\uff0c\u7b54\u6848\u4e5f\u662f\u4e94\u82b1\u516b\u95e8\uff0c\u6709\u7684\u8bf4\u662fspring-boot 1.x\u7248\u672c\u7684bug\uff0c\u5347\u7ea7\u52302.x\u7248\u672c\u5c31\u53ef\u4ee5\u4e86\u3002\u7136\u540e\u5c31\u5c41\u98a0\u5c41\u98a0\u7684\u628aspring-boot\u7248\u672c\u6362\u6210\u6700\u65b0\u7684 2.3.0.RELEASE \u7248\u672c\uff0c\u6839\u672c\u5c31\u6ca1\u7528\uff1b\u4e5f\u6709\u4eba\u5206\u6790\u8bf4aop\u4ee3\u7406\u7684\u662fspring\u7684bean\u5b9e\u4f8b\uff0c\u7136\u800c\u63a5\u53e3\u5f88\u663e\u7136\u662f\u4e0d\u80fd\u5b9e\u4f8b\u5316\u7684\uff0c\u6240\u4ee5aop\u65e0\u6cd5\u751f\u6548\u3002\u67e5\u4e86\u5f88\u591a\uff0c\u90fd\u662f\u5206\u6790\u4e3a\u4ec0\u4e48\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u53ef\u80fd\u662f\u6211\u641c\u7d22\u7684\u5173\u952e\u5b57\u4e0d\u5bf9\u7684\u539f\u56e0\uff0c\u5c31\u6ca1\u600e\u4e48\u770b\u5230\u6709\u89e3\u51b3\u65b9\u6848\u7684\u5e16\u5b50\u3002 \u540c\u6837\u7684\u5199\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684 @Transactional \u4e3a\u4ec0\u4e48\u5c31\u80fd\u751f\u6548\u5462\uff08\u81f3\u4e8espring\u4e8b\u52a1\u539f\u7406\u7684\u89e3\u6790\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u4e86\uff0c\u7f51\u4e0a\u4e00\u5927\u628a\uff09\uff1f","title":"\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u4e3a\u4ec0\u4e48\u5931\u6548"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_4","text":"\u901a\u8fc7 @EnableTransactionManagement \u8fdb\u53bb\u770b\u4e86\u4e0bspring\u4e8b\u52a1\u7684\u6e90\u7801\uff0c \u4e0a\u56fe\u4e2d\u770b\u5230 @EnableTransactionManagement \u6ce8\u89e3\u4e0a\u5bfc\u5165\u4e86\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u77e5\u9053\u5e72\u4ec0\u4e48\u7684\uff0c\u70b9\u8fdb\u53bb\u770b\u770b TransactionManagementConfigurationSelector \u7ee7\u627f\u4e86 AdviceModeImportSelector \uff0c\u5c31\u662f\u60f3\u52a0\u8f7d\u522b\u7684\u7c7b\uff0c\u5728 selectImports \u65b9\u6cd5\u8fd4\u56de\u7684\u5185\u5bb9\u5c31\u662f\u8981\u52a0\u8f7d\u7684\u7c7b\uff0c\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u5206\u522b\u52a0\u8f7d\u4e86 AutoProxyRegistrar \uff0c ProxyTransactionManagementConfiguration \u8fd9\u4e24\u4e2a\u7c7b\uff0c\u901a\u8fc7\u540d\u5b57\u80fd\u731c\u51fa ProxyTransactionManagementConfiguration \u8fd9\u4e2a\u7c7b\u5e94\u8be5\u662f\u4e00\u4e2a\u4e8b\u52a1\u76f8\u5173\u7684\u914d\u7f6e\u7c7b\uff0c\u7ee7\u7eed\u70b9\u8fdb\u53bb\u770b\u4e0b \u70b9\u5f00 ProxyTransactionManagementConfiguration \u7c7b\u540e\uff0c\u679c\u7136\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff0c\u5728\u8fd9\u4e2a\u7c7b\u4e2d\u5176\u5b9e\u5b83\u4e3b\u8981\u662f\u5e72\u4e86\u4e00\u4ef6\u4e8b\uff0c\u914d\u7f6espring\u7684 advisor \uff08\u589e\u5f3a\u5668\uff09\u3002\u8fd9\u91cc\u7684 TransactionAttributeSource \u8868\u793a\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u5b83\u662f\u7528\u6765\u751f\u6210\u4e8b\u52a1\u76f8\u5173\u7684\u5c5e\u6027\u7684\uff0c\u6bd4\u5982\u4ec0\u4e48\u4e8b\u52a1\u662f\u5426\u4e3a\u53ea\u8bfb\u554a\uff0c\u4f20\u64ad\u7279\u6027\u554a\u7b49\u7b49\uff0c\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u6765\u83b7\u53d6\u7684\uff0c\u90a3\u8fd9\u4e2a\u63a5\u53e3\u6709\u5f88\u591a\u5b9e\u73b0\u7c7b\uff0c\u5982\u56fe\uff1a \u8fd9\u91cc\u9ed8\u8ba4\u662f\u7528\u7684 AnnotationTransactionAttributeSource \u6ce8\u89e3\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u662f\u7528\u6765\u5904\u7406 @Transactional \u6ce8\u89e3\u7684\u3002 \u521a\u521a\u7684 ProxyTransactionManagementConfiguration \u914d\u7f6e\u7c7b\u4e2d\u8fd8\u6709\u4e00\u4e2abean\uff0c TransactionInterceptor \u4e8b\u52a1\u62e6\u622a\u5668\uff0c\u8fd9\u4e2a\u7c7b\u624d\u662f\u771f\u6b63\u7684\u5904\u7406\u4e8b\u52a1\u76f8\u5173\u7684\u4e00\u5207\u903b\u8f91\u7684\uff0c\u53ef\u4ee5\u770b\u4e0b\u4e00\u5b83\u7684\u7c7b\u56fe\u7ed3\u6784\uff0c \u53ef\u4ee5\u770b\u5230 TransactionInterceptor \u7ee7\u627f\u4e86 TransactionAspectSupport \u7c7b\u548c\u5b9e\u73b0\u4e86 MethodInterceptor \u63a5\u53e3\uff0c\u5176\u4e2d TransactionAspectSupport \u662f\u63d0\u4f9b\u4e8b\u52a1\u652f\u6301\u7684\uff0c MethodInterceptor \u662f\u7528\u6765\u62e6\u622a\u52a0\u4e86 @Transactional \u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\uff0c\u804c\u8d23\u5206\u660e\u3002\u90a3\u8fd9\u91cc\u77e5\u9053\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u62e6\u622a\u5668\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u4e00\u4e9b\u9a9a\u64cd\u4f5c\u4e86\u3002 \u8fd9\u91cc\u6211\u4eec\u5148\u56de\u5230\u6211\u4eec\u7684\u9700\u6c42\u70b9\u4e0a\uff0c\u6211\u4eec\u8981\u505a\u7684\u662f\u5b9e\u73b0\u7a0b\u5e8f\u81ea\u52a8\u8bfb\u5199\u5206\u79bb\uff0c\u90a3\u4e48\u8bfb\u5199\u5206\u79bb\u7684\u672c\u8d28\u662f\u5565\uff0c\u4e0d\u5c31\u662f\u5207\u6362\u6570\u636e\u6e90\u4e48\uff0c\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u600e\u4e48\u5b9e\u73b0\u591a\u6570\u636e\u6e90\u5207\u6362\u7684\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u52a8\u6001\u6570\u636e\u6e90\u65b9\u6848\u7f51\u4e0a\u53c8\u662f\u4e00\u5927\u628a\u7684\uff0c\u4f46\u662f\u6709\u7684\u662f\u6709\u5751\u7684\uff0c\u6bd4\u5982\u4e3a\u4ec0\u4e48\u4f60\u914d\u4e86\u52a8\u6001\u6570\u636e\u6e90\u52a0\u4e0a\u4e8b\u52a1\u6ce8\u89e3\u4e4b\u540e\u5c31\u65e0\u6548\u4e86\u5462\uff0c\u53bb\u6389\u4e8b\u52a1\u6ce8\u89e3\u53c8\u53ef\u4ee5\u4e86\uff0c\u662f\u4e0d\u662f\u5f88\u86cb\u75bc\u3002\u52a8\u6001\u5207\u6362\u6570\u636e\u6e90\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff1a \u5728\u9002\u5f53\u7684\u65f6\u673a\u5207\u6362\u6570\u636e\u6e90 \uff09\u3002\u90a3\u6211\u8fd9\u91cc\u7684\u9047\u5230\u7684\u95ee\u9898\u662f \u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u4e0a\u7684\u6ce8\u89e3 \uff08\u5176\u5b9e\u4f60\u628a\u6ce8\u89e3\u653e\u5230\u5b9e\u73b0\u7c7b\u7684\u65b9\u6cd5\u4e0a\uff0c\u5565\u4e8b\u513f\u90fd\u6ca1\u4e86\u3002\u4f46\u6211\u8fd9\u4e2a\u4eba\u5c31\u662f\u559c\u6b22\u6760\uff0c\u975e\u8981\u653e\u5230\u63a5\u53e3\u65b9\u6cd5\u4e0a\uff09 \u90a3\u600e\u4e48\u641e\u5b9a\u8fd9\u4e2a\u95ee\u9898\u5462\uff0c\u5176\u5b9e\u901a\u8fc7\u4e0a\u9762\u5bf9\u4e8b\u52a1\u6e90\u7801\u7684\u7b80\u5355\u5206\u6790\u4e4b\u540e\u5927\u81f4\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a \u91cd\u5199\u4e8b\u52a1\u62e6\u622a\u5668\uff0c\u5728\u4e8b\u52a1\u5904\u7406\u7684\u524d\u540e\u52a0\u4e0a\u81ea\u5df1\u7684\u903b\u8f91\uff0c\u5207\u6362\u6570\u636e\u6e90\u3002\u7136\u540e\u5c06\u81ea\u5df1\u91cd\u5199\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u8bbe\u7f6e\u5230\u521a\u5f00\u59cb\u7684 advisor \u4e2d\u5c31\u53ef\u5df2\u4e86","title":"\u6e90\u7801"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_5","text":"","title":"\u521d\u6b65\u89e3\u51b3\u65b9\u6848"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_6","text":"public class CustomInterceptor extends TransactionInterceptor { private static final long serialVersionUID = 1154144110124764905L; public CustomInterceptor(PlatformTransactionManager ptm, TransactionAttributeSource tas) { super(ptm, tas); } @Override public Object invoke(MethodInvocation invocation) throws Throwable { before(invocation.getMethod()); Object invoke = null; try { invoke = super.invoke(invocation); } finally { after(); } return invoke; } public void before(Method method) { // \u8fd9\u91cc\u90fd\u62ff\u5230method\u5bf9\u8c61\u4e86\uff0c\u90a3\u901a\u8fc7\u53cd\u5c04\u53ef\u4ee5\u505a\u7684\u4e8b\u60c5\u5c31\u5f88\u591a\u4e86\uff0c\u80fd\u5230\u8fd9\u91cc\u6765\u7684\uff0c\u90a3\u65b9\u6cd5\u4e0a\u9762\u80af\u5b9a\u662f\u6709Transactional\u6ce8\u89e3\u7684\uff0c\u62ff\u5230\u5b83\u5e76\u83b7\u53d6\u76f8\u5173\u5c5e\u6027\uff0c\u5982\u679c\u4e8b\u52a1\u5c5e\u6027\u4e3a\u53ea\u8bfb\u7684\uff0c\u90a3\u6beb\u65e0\u7591\u95ee\u53ef\u4ee5\u628a\u5b83\u5bf9\u6570\u636e\u7684\u8bf7\u6c42\u6253\u5230\u4ece\u5e93 Transactional transactional = method.getAnnotation(Transactional.class); boolean readOnly = transactional.readOnly(); if (readOnly) { // \u53ea\u8bfb\u4e8b\u52a1\uff0c\u5207\u6362\u5230mysql\u7684\u4ece\u5e93 changeDatasource(DatasourceType.SLAVE); } else { // \u975e\u53ea\u8bfb\u4e8b\u52a1\uff0c\u5207\u6362\u5230mysql\u4e3b\u5e93 changeDatasource(DatasourceType.MASTER); } } public void after() { // \u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e changeDatasource(DatasourceType.CLEAN); } private void changeDatasource(DatasourceType type) { //\u6a21\u62df\u6570\u636e\u6e90\u5207\u6362 System.out.println(\"\\n\\n\\n===========================================================\"); System.out.println(\"Datasource = \" + type); System.out.println(\"===========================================================\\n\\n\\n\"); } } enum DatasourceType { MASTER, SLAVE, CLEAN }","title":"\u91cd\u5199\u4e8b\u52a1\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_7","text":"\u5c06\u81ea\u5df1\u91cd\u5199\u540e\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u8bbe\u7f6e\u5230 advisor \u4e2d\uff0c\u5c06\u5b83\u9ed8\u8ba4\u7684\u8986\u76d6\u6389 @Configuration public class TransactionConfig implements InitializingBean, BeanFactoryAware { @Override public void afterPropertiesSet() throws Exception { // \u83b7\u53d6\u589e\u5f3a\u5668 BeanFactoryTransactionAttributeSourceAdvisor advisor = factory.getBean(BeanFactoryTransactionAttributeSourceAdvisor.class); PlatformTransactionManager platformTransactionManager = factory.getBean(PlatformTransactionManager.class); // spring\u539f\u6709\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u7528\u7684\u5c31\u662f\u6ce8\u89e3\u7c7b\u578b\u7684\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u90a3\u6211\u4eec\u4e5f\u7528\u8fd9\u4e2a\uff0c\u4e0d\u7136\u4f60\u7684\u4e8b\u52a1\u6ce8\u89e3\u5c31\u5931\u6548\u4e86\uff0c\u90a3\u4e0d\u5c31\u767d\u5fd9\u6d3b\u4e86\u4e48 TransactionAttributeSource attributeSource = new AnnotationTransactionAttributeSource(); // \u5b9e\u4f8b\u5316\u81ea\u5df1\u7684\u4e8b\u52a1\u62e6\u622a\u5668 CustomInterceptor advice = new CustomInterceptor(platformTransactionManager, attributeSource); // \u628a\u5b83\u539f\u6709\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u66ff\u6362\u6210\u81ea\u5df1\u7684\uff0c\u56e0\u4e3a\u4f60\u91cd\u5199\u7684\u4e8b\u52a1\u62e6\u622a\u662f\u7ee7\u627f\u5b83\u539f\u6709\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u641e advisor.setAdvice(advice); } private DefaultListableBeanFactory factory; @Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException { if (beanFactory instanceof DefaultListableBeanFactory) { this.factory = (DefaultListableBeanFactory) beanFactory; } } } \u5230\u8fd9\u91cc\uff0c\u5bf9\u4e8e\u63a5\u53e3\u4e0a\u6709\u4e8b\u52a1\u6ce8\u89e3\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u52a8\u6001\u7684\u5207\u6362\u5b83\u7684\u6570\u636e\u6e90\u4e86\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u4e0d\u7528\u81ea\u5b9a\u6ce8\u89e3\uff0c\u76f4\u63a5\u7528spring\u81ea\u5e26\u7684\u6ce8\u89e3\u5c31\u597d\u3002 \u90a3\u7ecf\u8fc7\u4e0a\u9762\u7684\u4e00\u987f\u64cd\u4f5c\u540e\uff0c\u7ec8\u4e8e\u53ef\u4ee5\u5728\u4e8b\u52a1\u7684\u524d\u540e\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u4e86\u3002 \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u6765\u5c06\uff0c\u8fd9\u4e2a\u65b9\u6848\u786e\u5b9e\u89e3\u51b3\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u95ee\u9898\uff0c\u4f46\u4e5f\u53ea\u662f\u4ec5\u9650\u4e8espring\u7684\u4e8b\u52a1\u6ce8\u89e3\u3002\u90a3\u5bf9\u4e8e\u672c\u6587\u6807\u9898\u6240\u8ff0\u7684\u95ee\u9898\uff0c\u5728\u672c\u8d28\u4e0a\u5e76\u6ca1\u6709\u5f97\u5230\u89e3\u51b3\uff0c\u56e0\u4e3a\u4e8b\u52a1\u8fd9\u91cc\u662fspring-transaction\u6a21\u5757\u5b9e\u73b0\u7684\u6ce8\u89e3\u5904\u7406\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u662f\u7528\u4e86\u4e00\u79cd\u6295\u673a\u53d6\u5de7\u7684\u65b9\u6cd5\u8fbe\u5230\u4e86\u76ee\u7684\u800c\u5df2\u3002","title":"\u8bbe\u7f6e\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_8","text":"\u6240\u8c13\u901a\u7528\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u6a21\u4effspring-transaction\u5199\u4e00\u4e2a\u81ea\u5df1\u7684\u65b9\u6cd5\u62e6\u622a\u5668\uff0c\u90a3\u8fd9\u91cc\u5c31\u4e0d\u9650\u4e8e\u6ce8\u89e3\u4e86\uff0c\u901a\u8fc7\u6ce8\u89e3\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u4e0d\u8fc7\u9664\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7spring aop\u62e6\u622a\u5916\uff0c\u5176\u4ed6\u7684\u65b9\u5f0f\u597d\u50cf\u90fd\u53ef\u4ee5\u901a\u8fc7spring aop\u76f4\u63a5\u5b9e\u73b0\u3002 \u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\u62e6\u622a\u5668\uff1a \u521b\u5efa ProxyFactoryBean \u9700\u8981\u6709\u4e00\u4e2a Advisor \u5bf9\u8c61\uff08 AbstractBeanFactoryPointcutAdvisor \uff09\uff0c\u7136\u540e\u628a\u8fd9\u4e2aadvisor\u5bf9\u8c61\u8bbe\u7f6e\u5230 ProxyFactoryBean \u4e2d \u9700\u8981\u6709\u4e00\u4e2a PointCut \u5bf9\u8c61\uff08 StaticMethodMatcherPointcut \uff09\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 advisor \u5bf9\u8c61\u4e2d \u9700\u8981\u6709\u4e00\u4e2a Advice \u5bf9\u8c61\uff08 MethodInterceptor \uff09\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 advisor \u5bf9\u8c61\u4e2d","title":"\u901a\u7528\u89e3\u51b3\u65b9\u6848"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#demo","text":"/** * \u4e1a\u52a1\u63a5\u53e3 */ interface Service { void test1(); /** * \u6253\u4e0a\u6807\u8bb0\uff0c\u9700\u8981\u88ab\u62e6\u622a\u7684\u65b9\u6cd5 */ @DataSource void test2(); } /** * \u4e1a\u52a1\u5b9e\u73b0 */ class ServiceImpl implements Service { @Override public void test1() { System.out.println(\"hello world\"); } @Override public void test2() { System.out.println(\"I'm doing something in DB\"); } } /** * \u65b9\u6cd5\u62e6\u622a\u6807\u8bb0 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE, ElementType.METHOD}) @interface DataSource { } class DataSourceAdvisor extends AbstractBeanFactoryPointcutAdvisor { private DataSourcePointCut pointCut; public void setPointCut(DataSourcePointCut pointCut) { this.pointCut = pointCut; } @Override public Pointcut getPointcut() { return pointCut; } } class DataSourceInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(\"==============\" + name + \" before ================\"); Object result = invocation.proceed(); System.out.println(\"==============\" + name + \" after ================\"); return result; } } class DataSourcePointCut extends StaticMethodMatcherPointcut { /** * \u65b9\u6cd5\u5339\u914d\u5668\uff0c\u8fd9\u4e2a\u624d\u662f\u771f\u6b63\u8d77\u4f5c\u7528\u7684\u4e3b * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return method.isAnnotationPresent(DataSource.class); } } /** * \u5355\u5143\u6d4b\u8bd5 */ public class MethodInterceptorTest { private ProxyFactoryBean proxyFactoryBean; @BeforeEach public void before() { Service service = new ServiceImpl(); ProxyFactoryBean pfb = new ProxyFactoryBean(); // \u8bbe\u7f6e\u54ea\u4e2a\u5bf9\u8c61\u9700\u8981\u88ab\u4ee3\u7406 pfb.setTarget(service); // \u521d\u59cb\u5316 advisor DataSourceAdvisor advisor = new DataSourceAdvisor(); // \u8bbe\u7f6epointcut advisor.setPointCut(new DataSourcePointCut()); // \u8bbe\u7f6e\u65b9\u6cd5\u62e6\u622a\u5668 advisor.setAdvice(new DataSourceInterceptor()); // \u5c06advisor\u6dfb\u52a0\u5230\u4ee3\u7406\u4e2d pfb.addAdvisor(advisor); proxyFactoryBean = pfb; } @Test public void test() { // \u901a\u8fc7\u4ee3\u7406\u751f\u6210 service \u5b9e\u4f8b Service proxy = (Service) proxyFactoryBean.getObject(); proxy.test1(); System.out.println(\"\\n\\n\"); proxy.test2(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230\u6210\u529f\u7684\u62e6\u622a\u5230\u4e86 service#test2 \u65b9\u6cd5\u3002\u5b9e\u73b0\u65b9\u6cd5\u62e6\u622a\u5c31\u8fd9\u4e48\u51e0\u4e2a\u6b65\u9aa4\uff0c\u8fd9\u662f\u4e00\u4e2abean\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u7684\u4f01\u4e1a\u7ea7\u5f00\u53d1\u4e2d\uff0c\u8fd9\u4e48\u5199\u5f88\u663e\u7136\u4e0d\u73b0\u5b9e\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u8981\u662f\u8fd9\u4e48\u5199\uff0c\u90a3\u5c31\u79bb\u62ce\u76d2\u996d\u4e0d\u8fdc\u4e86...","title":"demo"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#pro","text":"\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\u6211\u4eec\u53ea\u9700\u8981\u89e3\u51b3\u4e00\u4ef6\u4e8b\u60c5\uff0c\u90a3\u5c31\u662f\u8ba9spring\u80fd\u591f\u81ea\u52a8\u4e3a\u6211\u4eec\u521b\u5efa ProxyFactoryBean @SpringBootApplication public class DefaultProxyCreatorApplication { public static void main(String[] args) { SpringApplication.run(DefaultProxyCreatorApplication.class, args); } } public interface Test2Service { /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx void a(); void b(); void c(); } @Service public class Test2ServiceImpl implements Test2Service { @Override public void a() { System.out.println(\"test2 method a\"); } /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx @Override public void b() { System.out.println(\"test2 method b\"); } @Override public void c() { System.out.println(\"test2 method c\"); } } @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.TYPE}) public @interface Tx { } public class TxInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(String.format(\"------------%s: before----------\", name)); Object object = invocation.proceed(); System.out.println(String.format(\"------------%s: after----------\", name)); return object; } } public class TxMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Tx.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Tx.class); } } @Configuration public class AopConfig { @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public TxInterceptor methodInterceptor() { return new TxInterceptor(); } } \u521b\u5efa\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u9a8c\u8bc1\u529f\u80fd @SpringBootTest class TxInterceptorTest { @Autowired private Test2Service test2Service; @Test void test1() { test2Service.a(); System.out.println(\"\\n\"); test2Service.b(); System.out.println(\"\\n\"); test2Service.c(); } } \u5355\u5143\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230 service#a \u548c service#b \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u88ab\u62e6\u622a\u5230\u4e86\u3002\u5176\u4e2d\u65b9\u6cd5 a \u7684\u6ce8\u89e3\u5728\u63a5\u53e3\u4e0a\uff0c\u65b9\u6cd5b\u7684\u6ce8\u89e3\u5728\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u89c1\u8fd9\u5df2\u7ecf\u8fbe\u5230\u4e86\u6211\u7684\u76ee\u7684\uff0c\u6210\u529f\u7684\u62e6\u622a\u5230\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u3002","title":"Pro\u7248"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_9","text":"\u90a3\u5982\u679c\u8bf4\u4ec5\u4ec5\u5c06\u4e0a\u9762\u7684\u914d\u7f6e\u4ee3\u7801\u590d\u5236\u5230\u9879\u76ee\u4e2d\u53bb\u7528\u7684\u8bdd\uff0c\u662f\u53ef\u4ee5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u6ce8\u89e3\u7684\uff0c\u4f46\u662f\u5982\u679c\u8981\u548cspring\u7684\u4e8b\u52a1\u6ce8\u89e3\u4e00\u8d77\u7528\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u8981\u5931\u671b\u4e86\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5148\u7ecf\u8fc7\u4e8b\u52a1\u7684\u62e6\u622a\uff0c\u7136\u540e\u624d\u5230\u4f60\u7684\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\uff0c\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u7b80\u5355\uff0c\u5c06advisor\u8bbe\u7f6e\u4e00\u4e2a\u6267\u884c\u987a\u5e8f\u5c31\u53ef\u4ee5\u4e86 @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); advisor.setOrder(1);//\u8bbe\u7f6e\u987a\u5e8f\uff0c\u503c\u8d8a\u5c0f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u4e5f\u5c31\u662f\u8d8a\u88ab\u5148\u6267\u884c return advisor; } advisor.setOrder(1) \u90a3\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u53d6\u7684\u5462\uff0c\u96be\u9053\u8bbe\u7f6e\u62101\u5c31\u4e00\u5b9a\u4f1a\u88ab\u5148\u6267\u884c\u4e48\uff0c \u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230spring\u4e8b\u52a1\u7684advisor\u6267\u884c\u987a\u5e8f\u503c\u4e3aInteger\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u4e5f\u5c31\u662f\u4f60\u968f\u4fbf\u8bbe\u7f6e\u4e00\u4e2a\u503c\uff08\u53ea\u8981\u5b83\u4e0d\u662fInteger.MAX_VALUE\uff09\uff0c\u5b83\u90fd\u4f1a\u6bd4spring\u4e8b\u52a1\u62e6\u622a\u5668\u5148\u6267\u884c\u3002","title":"\u6ce8\u610f\u7ec6\u8282"},{"location":"spring/Spring%20Boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/","text":"new SpringApplication(sources) \u5224\u65ad\u662f\u5426\u4e3aweb\u73af\u5883 \u8bfb\u53d6 META-INF/spring.factories \u914d\u7f6e\u6587\u4ef6 \u5b9e\u4f8b\u5316\u5b9e\u4f8b\u5316springFactories \u8bbe\u7f6e\u76d1\u542c run(args) \u5f00\u542f\u79d2\u8868\u8ba1\u65f6\u76d1\u63a7 \u8bbe\u7f6e headless\u6a21\u5f0f \u83b7\u53d6\u6240\u6709\u7684SpringApplicationRunListeners\uff08\u76d1\u542c\u7a0b\u5e8f\u542f\u52a8\u7684\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u505a\u4e00\u4e9b\u81ea\u5df1\u7684\u4e8b\u60c5\uff09\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e9b\u76d1\u542c listeners.starting() \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5e94\u7528\u53c2\u6570\u5b9e\u4f8b\uff08\u5c31\u662f\u5c06 main \u65b9\u6cd5\u7684\u53c2\u6570\u5305\u88c5\u6210 DefaultApplicationArguments \uff09 \u51c6\u5907\u73af\u5883\uff08 Environment \uff09\uff0c\u8fd9\u91cc\u9762\u6709\u5f88\u591a\u64cd\u4f5c prepareEnvironment(listeners,applicationArguments) \u6253\u5370banner\uff08\u5c31\u662f\u63a7\u5236\u53f0\u4e0a\u9762spring\u7684\u90a3\u4e2alogo\uff09 printBanner(environment) \u521b\u5efaspring\u4e0a\u4e0b\u6587 createApplicationContext \u2014\u2014\u91cd\u70b9 \u521b\u5efa\u4e00\u4e2a\u6545\u969c\u5206\u6790\u5668 new FailureAnalyzers(context) \u51c6\u5907\u4e0a\u4e0b\u6587 prepareContext(context, environment, listeners, applicationArguments,printedBanner) \u2014\u2014\u91cd\u70b9 \u5237\u65b0\u4e0a\u4e0b\u6587 refreshContext(context) \u2014\u2014\u91cd\u70b9 \u5237\u65b0\u4e0a\u4e0b\u6587\u540e\u7684\u540e\u7f6e\u5904\u7406 afterRefresh(context, applicationArguments) \u4e3b\u7a0b\u5e8f\u4e2d\u7684run\u65b9\u6cd5\u5b8c\u6210\u540e\u518d\u6b21\u8c03\u7528\u7b2c3\u6b65\u7684\u76d1\u542c\uff0c listeners.finished(context, null) \u505c\u6b62\u79d2\u8868","title":"Spring Boot\u542f\u52a8\u6d41\u7a0b"},{"location":"spring/Spring%20Boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/#new-springapplicationsources","text":"\u5224\u65ad\u662f\u5426\u4e3aweb\u73af\u5883 \u8bfb\u53d6 META-INF/spring.factories \u914d\u7f6e\u6587\u4ef6 \u5b9e\u4f8b\u5316\u5b9e\u4f8b\u5316springFactories \u8bbe\u7f6e\u76d1\u542c","title":"new SpringApplication(sources)"},{"location":"spring/Spring%20Boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/#runargs","text":"\u5f00\u542f\u79d2\u8868\u8ba1\u65f6\u76d1\u63a7 \u8bbe\u7f6e headless\u6a21\u5f0f \u83b7\u53d6\u6240\u6709\u7684SpringApplicationRunListeners\uff08\u76d1\u542c\u7a0b\u5e8f\u542f\u52a8\u7684\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u505a\u4e00\u4e9b\u81ea\u5df1\u7684\u4e8b\u60c5\uff09\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e9b\u76d1\u542c listeners.starting() \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5e94\u7528\u53c2\u6570\u5b9e\u4f8b\uff08\u5c31\u662f\u5c06 main \u65b9\u6cd5\u7684\u53c2\u6570\u5305\u88c5\u6210 DefaultApplicationArguments \uff09 \u51c6\u5907\u73af\u5883\uff08 Environment \uff09\uff0c\u8fd9\u91cc\u9762\u6709\u5f88\u591a\u64cd\u4f5c prepareEnvironment(listeners,applicationArguments) \u6253\u5370banner\uff08\u5c31\u662f\u63a7\u5236\u53f0\u4e0a\u9762spring\u7684\u90a3\u4e2alogo\uff09 printBanner(environment) \u521b\u5efaspring\u4e0a\u4e0b\u6587 createApplicationContext \u2014\u2014\u91cd\u70b9 \u521b\u5efa\u4e00\u4e2a\u6545\u969c\u5206\u6790\u5668 new FailureAnalyzers(context) \u51c6\u5907\u4e0a\u4e0b\u6587 prepareContext(context, environment, listeners, applicationArguments,printedBanner) \u2014\u2014\u91cd\u70b9 \u5237\u65b0\u4e0a\u4e0b\u6587 refreshContext(context) \u2014\u2014\u91cd\u70b9 \u5237\u65b0\u4e0a\u4e0b\u6587\u540e\u7684\u540e\u7f6e\u5904\u7406 afterRefresh(context, applicationArguments) \u4e3b\u7a0b\u5e8f\u4e2d\u7684run\u65b9\u6cd5\u5b8c\u6210\u540e\u518d\u6b21\u8c03\u7528\u7b2c3\u6b65\u7684\u76d1\u542c\uff0c listeners.finished(context, null) \u505c\u6b62\u79d2\u8868","title":"run(args)"},{"location":"spring/spring%20bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","text":"Spring Bean\u751f\u547d\u5468\u671f Bean factory implementations should support the standard bean lifecycle interfaces as far as possible. The full set of initialization methods and their standard order is: ==BeanNameAware's setBeanName == ==BeanClassLoaderAware's setBeanClassLoader == ==BeanFactoryAware's setBeanFactory == ==EnvironmentAware's setEnvironment == ==EmbeddedValueResolverAware's setEmbeddedValueResolver == ResourceLoaderAware's setResourceLoader (only applicable when running in an application context) ApplicationEventPublisherAware's setApplicationEventPublisher (only applicable when running in an application context) MessageSourceAware's setMessageSource (only applicable when running in an application context) ApplicationContextAware's setApplicationContext (only applicable when running in an application context) ServletContextAware's setServletContext (only applicable when running in a web application context) == postProcessBeforeInitialization methods of BeanPostProcessors== ==InitializingBean's afterPropertiesSet == ==a custom init-method definition== == postProcessAfterInitialization methods of BeanPostProcessors== On shutdown of a bean factory, the following lifecycle methods apply: postProcessBeforeDestruction methods of DestructionAwareBeanPostProcessors DisposableBean's destroy a custom destroy-method definition","title":"Spring Bean\u751f\u547d\u5468\u671f"},{"location":"spring/spring%20bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#spring-bean","text":"Bean factory implementations should support the standard bean lifecycle interfaces as far as possible. The full set of initialization methods and their standard order is: ==BeanNameAware's setBeanName == ==BeanClassLoaderAware's setBeanClassLoader == ==BeanFactoryAware's setBeanFactory == ==EnvironmentAware's setEnvironment == ==EmbeddedValueResolverAware's setEmbeddedValueResolver == ResourceLoaderAware's setResourceLoader (only applicable when running in an application context) ApplicationEventPublisherAware's setApplicationEventPublisher (only applicable when running in an application context) MessageSourceAware's setMessageSource (only applicable when running in an application context) ApplicationContextAware's setApplicationContext (only applicable when running in an application context) ServletContextAware's setServletContext (only applicable when running in a web application context) == postProcessBeforeInitialization methods of BeanPostProcessors== ==InitializingBean's afterPropertiesSet == ==a custom init-method definition== == postProcessAfterInitialization methods of BeanPostProcessors== On shutdown of a bean factory, the following lifecycle methods apply: postProcessBeforeDestruction methods of DestructionAwareBeanPostProcessors DisposableBean's destroy a custom destroy-method definition","title":"Spring Bean\u751f\u547d\u5468\u671f"},{"location":"spring/spring%20boot%20jvm%20%E5%86%85%E5%AD%98%E8%AE%BE%E7%BD%AE/","text":"\u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58 -XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=64m -Xms100m -Xmx100m -Xmn100m -Xss256k -XX:SurvivorRatio=8 -XX:+UseG1GC -XX:+PrintGCDetails","title":"\u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58"},{"location":"spring/spring%20boot%20jvm%20%E5%86%85%E5%AD%98%E8%AE%BE%E7%BD%AE/#8gspring-boot-jvm","text":"-XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=64m -Xms100m -Xmx100m -Xmn100m -Xss256k -XX:SurvivorRatio=8 -XX:+UseG1GC -XX:+PrintGCDetails","title":"\u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58"},{"location":"spring/springmvc%20%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D/","text":"\u5173\u4e8eSpringMVC\u62e6\u622a\u5668\u6267\u884c\u4e24\u904d\u7684\u539f\u56e0\u5206\u6790\u4ee5\u53ca\u5982\u4f55\u89e3\u51b3 \u6700\u8fd1\u5728\u9879\u76ee\u4e2d\u78b0\u5230\u4e86\u5982\u9898\u7684\u95ee\u9898\uff0c\u5728spring-boot\u9879\u76ee\u4e2d\uff0c\u540c\u4e00\u6b21http\u8bf7\u6c42\uff0cHandlerInterceptor\u62e6\u622a\u5668\u6267\u884c\u4e86\u4e24\u6b21\uff0c\u4e0e\u6b64\u540c\u65f6\u8fd9\u4e2a\u95ee\u9898\u8fd8\u6709\u4e2a\u7279\u70b9\uff0c\u5b83\u5e76\u6ca1\u6709\u5e72\u6270\u5177\u4f53\u7684\u4e1a\u52a1\u529f\u80fd\uff0c\u5c31\u662fcontroller\u6b63\u5e38\u8fd4\u56de\uff0c\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u3002 \u4ec0\u4e48\u60c5\u51b5\u4e0bHandlerInterceptor\u4f1a\u6267\u884c\u4e24\u904d\uff1f \u5e76\u4e0d\u662f\u6240\u6709\u7684controller\u90fd\u662f\u8fd9\u6837\u7684\uff0c\u7ecf\u8fc7\u6d4b\u8bd5\u76ee\u524d\u53d1\u73b0\u6709\u4ee5\u4e0b\u4e24\u79cd\u7684controller\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff08\u524d\u63d0\u662f\u4f60\u6ca1\u6709\u91cd\u5199\u8fc7\u5b83\u7684 RequestMappingHandlerAdapter \u548c ViewNameMethodReturnValueHandler \uff09\u3002 @Controller public class GreetingController { /** * \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u5b58\u5728\u8fd4\u56de\u5185\u5bb9\u5bf9\u5e94\u7684\u89c6\u56fe * * @param name * @throws IOException */ @RequestMapping(\"/greet1\") public void greet1(String name) throws IOException { System.out.println(\"name = \" + name); RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes(); HttpServletResponse response = ((ServletRequestAttributes) requestAttributes).getResponse(); PrintWriter writer = response.getWriter(); writer.write(name); writer.flush(); writer.close(); } /** * \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a String \u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u5b58\u5728\u8fd4\u56de\u5185\u5bb9\u5bf9\u5e94\u7684\u89c6\u56fe * * @param name * @return */ @RequestMapping(\"/greet2\") public String greet2(String name) { System.out.println(\"name = \" + name); return name; } } \u5bf9\u4e8e\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\uff0c\u4f60\u6240\u6709\u7684 HandlerInterceptor \u90fd\u81f3\u5c11\u4f1a\u6267\u884c\u4e24\u904d\uff0c\u751a\u81f3\u4e09\u904d\u3002\u8fd9\u91cc\u5148\u7ed9\u51fa\u600e\u4e48\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6848\uff0c\u540e\u9762\u518d\u5206\u6790\u95ee\u9898\u539f\u56e0\u3002 \u5982\u4f55\u89e3\u51b3 HandlerInterceptor \u62e6\u622a\u5668\u6267\u884c\u591a\u6b21\u95ee\u9898\uff1f \u91cd\u5199 RequestMappingHandlerAdapter \u548c ViewNameMethodReturnValueHandler \u8fd9\u4e24\u4e2a\u7c7b\uff0c\u5e76\u5c06\u5176\u6ce8\u5165\u5bb9\u5668\u4e2d public class CustomizedHandlerAdapter extends RequestMappingHandlerAdapter { @Override public void afterPropertiesSet() { super.afterPropertiesSet(); setReturnValueHandlers(getReturnValueHandlers().stream().filter( h -> h.getClass() != ViewNameMethodReturnValueHandler.class ).collect(Collectors.toList())); } } public class HandlerVoidMethod extends ViewNameMethodReturnValueHandler { @Override public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception { /* * \u8fd9\u91cc\u53ea\u5904\u7406\u4e86void\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\uff0c\u5bf9\u4e8eString\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\u5219\u6ca1\u6709\u5904\u7406\uff0c\u539f\u56e0\u662f\u7cfb\u7edf\u4e2d\u53ef\u80fd\u8fd8\u4f1a\u7528\u5230springmvc\u7684\u89c6\u56fe\u529f\u80fd\uff08\u4f8b\u5982jsp\uff09 * \u5982\u679c\u8bf4\u662f\u524d\u540e\u5206\u79bb\u7684\u9879\u76ee\uff0cspringmvc\u5c42\u53ea\u63d0\u4f9b\u7eaf\u63a5\u53e3\u7684\u8bdd\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u4e0b\u9762\u4ee3\u7801\u5168\u90e8\u5220\u9664\uff0c * \u53ea\u5199\u4e0a\u4e00\u884c mavContainer.setRequestHandled(true); \u5373\u53ef */ if (void.class == returnType.getParameterType()) { mavContainer.setRequestHandled(true);//\u8fd9\u884c\u4ee3\u7801\u662f\u91cd\u70b9\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u544a\u8bc9\u5176\u4ed6\u7ec4\u4ef6\u672c\u6b21\u8bf7\u6c42\u5df2\u7ecf\u88ab\u7a0b\u5e8f\u5185\u90e8\u5904\u7406\u5b8c\u6bd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u653e\u884c\u4e86 } else { super.handleReturnValue(returnValue, returnType, mavContainer, webRequest); } } } @Configuration public class WebConfig { @Bean public HandlerVoidMethod handlerVoidMethod() { return new HandlerVoidMethod(); } @Bean public CustomizedHandlerAdapter handlerAdapter(HandlerVoidMethod handlerVoidMethod) { CustomizedHandlerAdapter chl = new CustomizedHandlerAdapter(); chl.setCustomReturnValueHandlers(Arrays.asList(handlerVoidMethod)); return chl; } } \u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5219\u80fd\u89e3\u51b3mvc\u62e6\u622a\u5668\u6267\u884c\u591a\u6b21\u7684\u95ee\u9898\u3002 springmvc\u62e6\u622a\u5668\u4e3a\u4ec0\u4e48\u4f1a\u6267\u884c\u591a\u6b21\uff1f \u7b80\u5355\u6765\u8bb2\u5c31\u662fcontroller\u4e2d\u7684void\u65b9\u6cd5\u4f1a\u5bfc\u81f4springmvc\u4f7f\u7528\u4f60\u7684\u8bf7\u6c42url\u4f5c\u4e3a\u89c6\u56fe\u540d\u79f0\uff0c\u7136\u540e\u5b83\u5728\u6e32\u67d3\u89c6\u56fe\u4e4b\u524d\u4f1a\u68c0\u67e5\u4f60\u7684\u89c6\u56fe\u540d\u79f0\uff0c\u53d1\u73b0\u8fd9\u89c6\u56fe\u4f1a\u5bfc\u81f4\u5faa\u73af\u8bf7\u6c42\uff0c\u5c31\u629b\u51fa\u4e00\u4e2aServletException\uff0ctomcat\u622a\u53d6\u5230\u8fd9\u4e2a\u5f02\u5e38\u540e\u5c31\u8f6c\u53d1\u5230/error\u9875\u9762\uff0c\u5c31\u5728\u8fd9\u4e2a\u8f6c\u53d1\u7684\u8fc7\u7a0b\u4e2d\u5bfc\u81f4\u4e86springmvc\u91cd\u65b0\u5f00\u59cb DispatcherServlet \u7684\u6574\u4e2a\u6d41\u7a0b\uff0c\u6240\u4ee5\u62e6\u622a\u5668\u81ea\u7136\u5c31\u6267\u884c\u4e86\u591a\u6b21\u3002 HandlerInterceptor\u76f8\u5173\u77e5\u8bc6 \u5bf9\u4e8e\u62e6\u622a\u5668 HandlerInterceptor \u7684\u673a\u5236\u9700\u8981\u6709\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\uff0c\u8fd9\u91cc\u7b80\u5355\u8bb2\u4e0bspringmvc\u4e2d\u7684\u62e6\u622a\u5668\u662f\u600e\u4e48\u6267\u884c\u7684\uff0c\u6211\u4eec\u90fd\u77e5\u9053springmvc\u4e2d\u5904\u7406\u8bf7\u6c42\u90fd\u662f\u4ece DispatcherServlet \u7684 doDispatch \u65b9\u6cd5\u5f00\u59cb\u7684\uff0c // DispatcherServlet\u7c7b doDispatch\u65b9\u6cd5 protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception { ......\u7701\u7565\u90e8\u5206\u524d\u9762\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u4ece 1035\u884c\u8fd9\u91cc\u5f00\u59cb // HandlerExecutionChain mappedHandler = getHandler(processedRequest); \u57281016\u884c\u6709\u8bbe\u7f6emappedHandler\u7684\u503c\uff0cHandlerExecutionChain\u662f\u4e00\u4e2a\u62e6\u622a\u5668\u8c03\u7528\u94fe\uff0c\u5b83\u662f\u94fe\u5f0f\u6267\u884c\u7684\uff0c\u8fd9\u91cc\u662f\u94fe\u5f0f\u6267\u884c\u6240\u6709\u7684\u62e6\u622a\u5668\u91cc\u9762\u7684 preHandle \u65b9\u6cd5 if (!mappedHandler.applyPreHandle(processedRequest, response)) { return; } // \u771f\u6b63\u4ee3\u7528\u6211\u4eec\u81ea\u5df1\u5199\u7684\u4e1a\u52a1\u4ee3\u7801\u7684\u5165\u53e3 mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); if (asyncManager.isConcurrentHandlingStarted()) { return; } applyDefaultViewName(processedRequest, mv); // \u8fd9\u91cc\u662f\u94fe\u5f0f\u6267\u884c\u6240\u6709\u7684\u62e6\u622a\u5668\u91cc\u9762\u7684 postHandle \u65b9\u6cd5 mappedHandler.applyPostHandle(processedRequest, response, mv); ......\u7701\u7565\u540e\u9762\u7684\u4ee3\u7801 } \u591a\u4e2a\u62e6\u622a\u5668\u5b83\u7684\u6267\u884c\u987a\u5e8f\u662f\u548c\u6808\u7684\u5165\u6808\u51fa\u6808\u987a\u5e8f\u6709\u70b9\u7c7b\u4f3c\uff0c\u6211\u4eec\u628a preHandle \u65b9\u6cd5\u6bd4\u4f5c\u5165\u6808\uff0c postHandle \u65b9\u6cd5\u6bd4\u4f5c\u51fa\u6808\uff0c\u6240\u4ee5\u5c31\u662f preHandle \u5148\u6267\u884c\u7684 postHandle \u53cd\u800c\u540e\u6267\u884c\u3002 \u4f8b\u5982\u6211\u4eec\u6709\u4e09\u4e2a\u62e6\u622a\u5668\uff0c\u5206\u522b\u4e3a A\uff0cB\uff0cC\u3002\u5b83\u4eec\u7684\u6267\u884c\u987a\u5e8f\u5982\u4e0b\u56fe\uff1a \u62e6\u622a\u5668\u6267\u884c\u7684\u76f8\u5173\u6e90\u7801\uff1a boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception { HandlerInterceptor[] interceptors = getInterceptors();//\u83b7\u53d6\u6240\u6709\u7684\u62e6\u622a\u5668 if (!ObjectUtils.isEmpty(interceptors)) { for (int i = 0; i < interceptors.length; i++) {// \u8fd9\u91cc\u662f\u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb HandlerInterceptor interceptor = interceptors[i]; if (!interceptor.preHandle(request, response, this.handler)) { triggerAfterCompletion(request, response, null); return false; } this.interceptorIndex = i; } } return true; } void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv) throws Exception { HandlerInterceptor[] interceptors = getInterceptors();//\u83b7\u53d6\u6240\u6709\u7684\u62e6\u622a\u5668 if (!ObjectUtils.isEmpty(interceptors)) { for (int i = interceptors.length - 1; i >= 0; i--) {// \u8fd9\u91cc\u662f\u4ece\u6700\u540e\u4e00\u4e2a\u5f00\u59cb HandlerInterceptor interceptor = interceptors[i]; interceptor.postHandle(request, response, this.handler, mv); } } } \u4e0a\u9762\u7b80\u8981\u7684\u8bb2\u4e86\u4e0b\u62e6\u622a\u5668\u4ece\u54ea\u91cc\u5f00\u59cb\u4ee5\u53ca\u5b83\u7684\u6267\u884c\u987a\u5e8f\u76f8\u5173\u7684\u4e1c\u897f\uff0c\u7ecf\u8fc7\u4e86\u62e6\u622a\u5668\u7684\u524d\u7f6e\u62e6\u622a\u4e4b\u540e\uff0cspringmvc\u901a\u8fc7\u53cd\u5c04\u6267\u884c\u4e86\u6211\u4eec\u7684\u5177\u4f53\u4e1a\u52a1\u65b9\u6cd5\uff0c\u90a3\u5728\u6267\u884c\u5177\u4f53\u7684\u4e1a\u52a1\u65b9\u6cd5\u65f6\u6709\u4e24\u4e2a\u5f88\u91cd\u8981\u7684\u95ee\u9898\uff0c\u4e00\u662f\u5982\u4f55\u5904\u7406\u6211\u4eec\u4e1a\u52a1\u65b9\u6cd5\u7684\u53c2\u6570\uff08\u5343\u5947\u767e\u602a\u7684\uff09\uff1b\u4e8c\u662f\u5982\u4f55\u5904\u7406\u6211\u4eec\u4e1a\u52a1\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff08\u4e5f\u662f\u591a\u79cd\u591a\u6837\u7684\uff09\u3002\u5728springmvc\u4e2d\u901a\u8fc7 HandlerMethodArgumentResolver \u6765\u5904\u7406\u65b9\u6cd5\u53c2\u6570\uff0c\u901a\u8fc7 HandlerMethodReturnValueHandler \u6765\u5904\u7406\u65b9\u6cd5\u8fd4\u56de\u503c\u3002\u5728\u672c\u6587\u4e2d\uff0c\u65b9\u6cd5\u7684\u5165\u53c2\u4e0e\u672c\u6587\u6240\u8ba8\u8bba\u7684\u95ee\u9898\u5173\u7cfb\u4e0d\u5927\uff0c\u56e0\u6b64\u8fd9\u91cc\u5c31\u4e0d\u5c55\u5f00\u53d9\u8ff0 HandlerMethodArgumentResolver \u76f8\u5173\u7684\u4e1c\u897f\u4e86\u3002\u91cd\u70b9\u8bf4\u4e0b\u4e0e\u95ee\u9898\u76f8\u5173\u7684 HandlerMethodReturnValueHandler \u7c7b\u3002 HandlerMethodReturnValueHandler \u5bf9\u4e8econtroller\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7684\u5904\u7406\uff0cspringmvc\u6846\u67b6\u4e2d\u5185\u7f6e\u4e8620\u591a\u79cd\u9ed8\u8ba4\u7684\u8fd4\u56de\u503c\u5904\u7406\u5668\uff0c\u5728 RequestMappingHandlerAdapter#getDefaultReturnValueHandlers \u65b9\u6cd5\u4e2d\u53ef\u4ee5\u770b\u5230\u5b83\u8bbe\u7f6e\u7684\u4e00\u4e9b\u9ed8\u8ba4\u7684HandlerMethodReturnValueHandler private List<HandlerMethodReturnValueHandler> getDefaultReturnValueHandlers() { List<HandlerMethodReturnValueHandler> handlers = new ArrayList<>(); // Single-purpose return value types // \u8fd4\u56de\u503c\u7c7b\u578b\u662fModelAndView\u6216\u5176\u5b50\u7c7b handlers.add(new ModelAndViewMethodReturnValueHandler()); // \u8fd4\u56de\u503c\u7c7b\u578b\u662fModel\u6216\u5176\u5b50\u7c7b handlers.add(new ModelMethodProcessor()); // \u8fd4\u56de\u503c\u7c7b\u578b\u662fView\u6216\u5176\u5b50\u7c7b handlers.add(new ViewMethodReturnValueHandler()); // ResponseBody\u6ce8\u89e3 handlers.add(new ResponseBodyEmitterReturnValueHandler(getMessageConverters(), this.reactiveAdapterRegistry, this.taskExecutor, this.contentNegotiationManager)); handlers.add(new StreamingResponseBodyReturnValueHandler()); // \u7528\u6765\u5904\u7406\u8fd4\u56de\u503c\u7c7b\u578b\u662fHttpEntity\u7684\u65b9\u6cd5 handlers.add(new HttpEntityMethodProcessor(getMessageConverters(), this.contentNegotiationManager, this.requestResponseBodyAdvice)); handlers.add(new HttpHeadersReturnValueHandler()); handlers.add(new CallableMethodReturnValueHandler()); handlers.add(new DeferredResultMethodReturnValueHandler()); handlers.add(new AsyncTaskMethodReturnValueHandler(this.beanFactory)); // Annotation-based return value types // \u8fd4\u56de\u503c\u6709@ModelAttribute\u6ce8\u89e3 handlers.add(new ModelAttributeMethodProcessor(false)); handlers.add(new RequestResponseBodyMethodProcessor(getMessageConverters(), this.contentNegotiationManager, this.requestResponseBodyAdvice)); // Multi-purpose return value types // \u8fd4\u56de\u503c\u662fvoid\u6216String, \u5c06\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3aview\u89c6\u56fe\u7684\u540d\u5b57 handlers.add(new ViewNameMethodReturnValueHandler()); // \u8fd4\u56de\u503c\u7c7b\u578b\u662fMap handlers.add(new MapMethodProcessor()); // Custom return value types\uff0c\u81ea\u5b9a\u4e49\u8fd4\u56de\u503c\u5904\u7406 if (getCustomReturnValueHandlers() != null) { handlers.addAll(getCustomReturnValueHandlers()); } // Catch-all if (!CollectionUtils.isEmpty(getModelAndViewResolvers())) { handlers.add(new ModelAndViewResolverMethodReturnValueHandler(getModelAndViewResolvers())); } else { handlers.add(new ModelAttributeMethodProcessor(true)); } return handlers; } \u5728\u672c\u6587\u7684\u95ee\u9898\u4e2d\uff0ccontroller\u7684\u8fd4\u56de\u503c\u4e3avoid\u548cString\u4e24\u79cd\u90fd\u6709\uff0c\u521a\u597d\u5bf9\u5e94 ViewNameMethodReturnValueHandler \u8fd9\u4e2a\u5904\u7406\u5668 public class ViewNameMethodReturnValueHandler implements HandlerMethodReturnValueHandler { @Override public boolean supportsReturnType(MethodParameter returnType) { Class<?> paramType = returnType.getParameterType(); // \u8fd4\u56de\u503c\u7c7b\u578b\u5339\u914d\uff0cvoid\u548cString return (void.class == paramType || CharSequence.class.isAssignableFrom(paramType)); } @Override public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception { // \u8fd4\u56de\u503c\u5904\u7406\u8fd9\u91cc\uff0c\u53ea\u5904\u7406\u4e86String\u7c7b\u578b\u7684\u8fd4\u56de\u503c\uff0c\u5c06\u8fd4\u56de\u503c\u7684\u7ed3\u679c\u4f5c\u4e3a\u89c6\u56fe\u540d\u79f0\u8bbe\u7f6e\u5230ModelAndViewContainer\u5bf9\u8c61\u4e2d // \u5bf9\u4e8evoid\u7c7b\u578b\u7684\u8fd4\u56de\u503c\uff0c\u8fd9\u91cc\u5e76\u6ca1\u6709\u5904\u7406\uff0c if (returnValue instanceof CharSequence) { String viewName = returnValue.toString(); mavContainer.setViewName(viewName); if (isRedirectViewName(viewName)) { mavContainer.setRedirectModelScenario(true); } } else if (returnValue != null) { // should not happen throw new UnsupportedOperationException(\"Unexpected return type: \" + returnType.getParameterType().getName() + \" in method: \" + returnType.getMethod()); } } } \u8fd9\u91cc\u6709\u4e2a\u5c0f\u7ec6\u8282\uff0chandleReturnValue\u65b9\u6cd5\u4e2dreturnValue\u53c2\u6570\u524d\u9762\u662f\u52a0\u4e86\u4e00\u4e2a @Nullable \u6ce8\u89e3\u7684\uff0c\u610f\u5473\u8fd9\u8fd9\u4e2a\u53c2\u6570\u7684\u503c\u53ef\u80fd\u662f null \uff0c\u5f53\u4f60\u7684controller\u4e3avoid\u65b9\u6cd5\u65f6\uff0creturnValue\u5c31\u4f1a\u4e3anull\uff0c\u90a3handleReturnValue\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u4e0d\u4f1a\u5bf9 mavContainer \u8fd9\u4e2a\u5bf9\u8c61\u505a\u4efb\u4f55\u5904\u7406\u3002 ModelAndView\u5bf9\u8c61\u7684\u6d41\u8f6c\u8fc7\u7a0b mavContainer \u8fd9\u4e2a\u53c2\u6570\u662f\u4ece RequestMappingHandlerAdapter \u4e2d\u7684 invokeHandlerMethod \u65b9\u6cd5\u4e2d\u521b\u5efa\u5e76\u4e00\u8def\u4f20\u8fdb\u6765\u7684\uff0c\u6574\u4e2a\u8c03\u7528\u94fe\u5982\u4e0b\u56fe\uff1a \u6700\u7ec8\u5728 DispatcherServlet \u7684 doDispatch \u65b9\u6cd5\u4e2d\u5f97\u5230\u4e0a\u56fe\u4e2d\u6700\u540e\u8fd4\u56de\u7684ModelAndView\u5bf9\u8c61 protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception { ......\u7701\u7565\u90e8\u5206\u524d\u9762\u7684\u4ee3\u7801 // Actually invoke the handler. mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); ......\u7701\u7565\u90e8\u4ee3\u7801 // \u76f4\u63a5\u770b\u8fd9\u91cc\uff0c\u8bbe\u7f6e\u9ed8\u8ba4\u89c6\u56fe applyDefaultViewName(processedRequest, mv); ......\u7701\u7565\u90e8\u5206\u524d\u9762\u7684\u4ee3\u7801 } private void applyDefaultViewName(HttpServletRequest request, @Nullable ModelAndView mv) throws Exception { // \u8fd9\u91cc\u5224\u65ad\u662f\u5426\u8bbe\u7f6e\u4e86\u89c6\u56fe\uff0c\u901a\u8fc7\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7531\u4e8e\u6211\u4eec\u7684controller\u662fvoid\u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u662f\u6ca1\u6709\u8bbe\u7f6e\u89c6\u56fe\u7684 if (mv != null && !mv.hasView()) { // \u83b7\u53d6\u9ed8\u8ba4\u89c6\u56fe\u540d\u79f0 String defaultViewName = getDefaultViewName(request); if (defaultViewName != null) { // \u8bbe\u7f6e\u9ed8\u8ba4\u89c6\u56fe\u540d\u79f0 mv.setViewName(defaultViewName); } } } \u83b7\u53d6\u9ed8\u8ba4\u89c6\u56fe\u540d\u79f0\u7684\u65b9\u6cd5\uff1a getDefaultViewName \uff0c\u7531\u4e8e\u8fd9\u4e2a\u65b9\u6cd5\u91cc\u9762\u8c03\u7528\u6808\u6bd4\u8f83\u6df1\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u5b83\u8c03\u7528\u7684\u6700\u91cc\u9762\u7684\u90a3\u4e2a\u65b9\u6cd5\uff1a org.springframework.web.util.UrlPathHelper#getPathWithinApplication public String getPathWithinApplication(HttpServletRequest request) { String contextPath = getContextPath(request); String requestUri = getRequestUri(request); String path = getRemainingPath(requestUri, contextPath, true); if (path != null) { // Normal case: URI contains context path. return (StringUtils.hasText(path) ? path : \"/\"); } else { return requestUri; } } \u6700\u540e\u8fd9\u4e2a\u65b9\u6cd5\u5176\u5b9e\u5c31\u662f\u83b7\u53d6\u4e86controller\u7684requestMapping\uff0c\u7136\u540e\u8fd4\u56de\u51fa\u53bb\u3002\u518d\u7ed3\u5408\u524d\u9762\u7684 getDefaultViewName \u65b9\u6cd5\u53ef\u77e5\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u89c6\u56fe\u540d\u79f0\u5c31\u662frequestMapping\u7684\u503c\u3002\u5728\u6e32\u67d3\u89c6\u56fe\u4e4b\u524dspringmvc\u8fd8\u505a\u4e86\u4e2a\u5224\u65ad\uff0c\u5c31\u662f\u770b\u4f60\u7684\u89c6\u56fe\u540d\u79f0\u662f\u4e0d\u662f\u672c\u6b21\u8bf7\u7684uri\u4e2d\u7684\u4e00\u90e8\u5206\u6216\u8005\u548curi\u4e00\u6837\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u8bf4\u4f60\u662f\u4e00\u4e2a\u5faa\u73af\u89c6\u56fe\u8def\u5f84 tomcat\u5bf9\u9519\u8bef\u9875\u9762\u7684\u5904\u7406 \u5728tomcat\u7684 StandardHostValve \u7c7b\u4e2d\uff0c\u5b83\u83b7\u53d6\u5230\u4e86\u4e0a\u9762springmvc\u629b\u51fa\u7684ServletException\u5f02\u5e38\uff0c\u5b83\u5199\u4e86\u4e2a\u5f88\u660e\u4e86\u7684\u6ce8\u91ca\uff0c\u5bfb\u627e\u4e00\u4e2a\u5e94\u7528\u7ea7\u522b\u7684\u9519\u8bef\u9875\u9762\uff0c\u5982\u679c\u5b58\u5728\u7684\u8bdd\u5219\u6e32\u67d3\u5b83\uff08\u5c31\u662f\u91cd\u5b9a\u5411\u5230\u9519\u8bef\u9875\u9762\uff09 \u901a\u8fc7debug\u76f4\u5230\u6267\u884c\u5230\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u901a\u8fc7\u4e0b\u56fe\u4e2d\u7b2c\u4e8c\u884c\u540e\u9762\u7684debug\u4fe1\u606f\u4e5f\u53ef\u4ee5\u770b\u5230\u9519\u8bef\u9875\u9762\u7684\u8def\u5f84\u4e3a /error \u901a\u8fc7 RequestDispatcher \u8fd9\u4e2a\u7c7b\u540d\u80fd\u731c\u5230\u5e94\u8be5\u662f\u8bf7\u6c42\u5206\u53d1\u5668\uff0c\u770b\u770b\u5b83\u662f\u5982\u4f55\u521b\u5efa RequestDispatcher \u5bf9\u8c61\u7684 public RequestDispatcher getRequestDispatcher(final String path) { ......\u7701\u7565\u90e8\u4ee3\u7801 try { ......\u7701\u7565\u90e8\u4ee3\u7801 // Construct a RequestDispatcher to process this request // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42\u8c03\u5ea6\u5668\u6765\u5904\u7406\u8be5\u8bf7\u6c42 return new ApplicationDispatcher(wrapper, uri, wrapperPath, pathInfo, queryString, mapping, null); } finally { mappingData.recycle(); } } \u8fd9\u91cc\u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u5230\u5f00\u59cb\u4e86\u8bf7\u6c42\u8f6c\u53d1\uff0c\u8fd9\u5bf9\u4e8espringmvc\u6765\u8bb2\u5c31\u5df2\u7ecf\u5f00\u59cb\u4e86\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42\uff0c\u5b83\u4f1a\u518d\u6b21\u8fdb\u5165\u5230 DispatcherServlet \u7684 doDispatch \u65b9\u6cd5\u4e2d\uff0c\u6574\u4e2aspringmvc\u7684\u6d41\u7a0b\u4f1a\u518d\u91cd\u65b0\u8d70\u4e00\u904d\uff0c\u6240\u4ee5\u62e6\u622a\u5668\u81ea\u7136\u4e5f\u4f1a\u518d\u6267\u884c\u4e00\u6b21\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u5728\u62e6\u622a\u5668\u4e2d\u770b\u5230\u7684url\u5df2\u7ecf\u53d8\u6210 /error \u4e86\uff0c\u800c\u4e0d\u662f\u4e4b\u524d\u7684requestMapping\u91cc\u9762\u7684\u503c\u3002","title":"\u5173\u4e8eSpringMVC\u62e6\u622a\u5668\u6267\u884c\u4e24\u904d\u7684\u539f\u56e0\u5206\u6790\u4ee5\u53ca\u5982\u4f55\u89e3\u51b3"},{"location":"spring/springmvc%20%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D/#springmvc","text":"\u6700\u8fd1\u5728\u9879\u76ee\u4e2d\u78b0\u5230\u4e86\u5982\u9898\u7684\u95ee\u9898\uff0c\u5728spring-boot\u9879\u76ee\u4e2d\uff0c\u540c\u4e00\u6b21http\u8bf7\u6c42\uff0cHandlerInterceptor\u62e6\u622a\u5668\u6267\u884c\u4e86\u4e24\u6b21\uff0c\u4e0e\u6b64\u540c\u65f6\u8fd9\u4e2a\u95ee\u9898\u8fd8\u6709\u4e2a\u7279\u70b9\uff0c\u5b83\u5e76\u6ca1\u6709\u5e72\u6270\u5177\u4f53\u7684\u4e1a\u52a1\u529f\u80fd\uff0c\u5c31\u662fcontroller\u6b63\u5e38\u8fd4\u56de\uff0c\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u3002","title":"\u5173\u4e8eSpringMVC\u62e6\u622a\u5668\u6267\u884c\u4e24\u904d\u7684\u539f\u56e0\u5206\u6790\u4ee5\u53ca\u5982\u4f55\u89e3\u51b3"},{"location":"spring/springmvc%20%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D/#handlerinterceptor","text":"\u5e76\u4e0d\u662f\u6240\u6709\u7684controller\u90fd\u662f\u8fd9\u6837\u7684\uff0c\u7ecf\u8fc7\u6d4b\u8bd5\u76ee\u524d\u53d1\u73b0\u6709\u4ee5\u4e0b\u4e24\u79cd\u7684controller\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff08\u524d\u63d0\u662f\u4f60\u6ca1\u6709\u91cd\u5199\u8fc7\u5b83\u7684 RequestMappingHandlerAdapter \u548c ViewNameMethodReturnValueHandler \uff09\u3002 @Controller public class GreetingController { /** * \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u5b58\u5728\u8fd4\u56de\u5185\u5bb9\u5bf9\u5e94\u7684\u89c6\u56fe * * @param name * @throws IOException */ @RequestMapping(\"/greet1\") public void greet1(String name) throws IOException { System.out.println(\"name = \" + name); RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes(); HttpServletResponse response = ((ServletRequestAttributes) requestAttributes).getResponse(); PrintWriter writer = response.getWriter(); writer.write(name); writer.flush(); writer.close(); } /** * \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a String \u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u5b58\u5728\u8fd4\u56de\u5185\u5bb9\u5bf9\u5e94\u7684\u89c6\u56fe * * @param name * @return */ @RequestMapping(\"/greet2\") public String greet2(String name) { System.out.println(\"name = \" + name); return name; } } \u5bf9\u4e8e\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\uff0c\u4f60\u6240\u6709\u7684 HandlerInterceptor \u90fd\u81f3\u5c11\u4f1a\u6267\u884c\u4e24\u904d\uff0c\u751a\u81f3\u4e09\u904d\u3002\u8fd9\u91cc\u5148\u7ed9\u51fa\u600e\u4e48\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6848\uff0c\u540e\u9762\u518d\u5206\u6790\u95ee\u9898\u539f\u56e0\u3002","title":"\u4ec0\u4e48\u60c5\u51b5\u4e0bHandlerInterceptor\u4f1a\u6267\u884c\u4e24\u904d\uff1f"},{"location":"spring/springmvc%20%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D/#handlerinterceptor_1","text":"\u91cd\u5199 RequestMappingHandlerAdapter \u548c ViewNameMethodReturnValueHandler \u8fd9\u4e24\u4e2a\u7c7b\uff0c\u5e76\u5c06\u5176\u6ce8\u5165\u5bb9\u5668\u4e2d public class CustomizedHandlerAdapter extends RequestMappingHandlerAdapter { @Override public void afterPropertiesSet() { super.afterPropertiesSet(); setReturnValueHandlers(getReturnValueHandlers().stream().filter( h -> h.getClass() != ViewNameMethodReturnValueHandler.class ).collect(Collectors.toList())); } } public class HandlerVoidMethod extends ViewNameMethodReturnValueHandler { @Override public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception { /* * \u8fd9\u91cc\u53ea\u5904\u7406\u4e86void\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\uff0c\u5bf9\u4e8eString\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\u5219\u6ca1\u6709\u5904\u7406\uff0c\u539f\u56e0\u662f\u7cfb\u7edf\u4e2d\u53ef\u80fd\u8fd8\u4f1a\u7528\u5230springmvc\u7684\u89c6\u56fe\u529f\u80fd\uff08\u4f8b\u5982jsp\uff09 * \u5982\u679c\u8bf4\u662f\u524d\u540e\u5206\u79bb\u7684\u9879\u76ee\uff0cspringmvc\u5c42\u53ea\u63d0\u4f9b\u7eaf\u63a5\u53e3\u7684\u8bdd\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u4e0b\u9762\u4ee3\u7801\u5168\u90e8\u5220\u9664\uff0c * \u53ea\u5199\u4e0a\u4e00\u884c mavContainer.setRequestHandled(true); \u5373\u53ef */ if (void.class == returnType.getParameterType()) { mavContainer.setRequestHandled(true);//\u8fd9\u884c\u4ee3\u7801\u662f\u91cd\u70b9\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u544a\u8bc9\u5176\u4ed6\u7ec4\u4ef6\u672c\u6b21\u8bf7\u6c42\u5df2\u7ecf\u88ab\u7a0b\u5e8f\u5185\u90e8\u5904\u7406\u5b8c\u6bd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u653e\u884c\u4e86 } else { super.handleReturnValue(returnValue, returnType, mavContainer, webRequest); } } } @Configuration public class WebConfig { @Bean public HandlerVoidMethod handlerVoidMethod() { return new HandlerVoidMethod(); } @Bean public CustomizedHandlerAdapter handlerAdapter(HandlerVoidMethod handlerVoidMethod) { CustomizedHandlerAdapter chl = new CustomizedHandlerAdapter(); chl.setCustomReturnValueHandlers(Arrays.asList(handlerVoidMethod)); return chl; } } \u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5219\u80fd\u89e3\u51b3mvc\u62e6\u622a\u5668\u6267\u884c\u591a\u6b21\u7684\u95ee\u9898\u3002","title":"\u5982\u4f55\u89e3\u51b3HandlerInterceptor\u62e6\u622a\u5668\u6267\u884c\u591a\u6b21\u95ee\u9898\uff1f"},{"location":"spring/springmvc%20%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D/#springmvc_1","text":"\u7b80\u5355\u6765\u8bb2\u5c31\u662fcontroller\u4e2d\u7684void\u65b9\u6cd5\u4f1a\u5bfc\u81f4springmvc\u4f7f\u7528\u4f60\u7684\u8bf7\u6c42url\u4f5c\u4e3a\u89c6\u56fe\u540d\u79f0\uff0c\u7136\u540e\u5b83\u5728\u6e32\u67d3\u89c6\u56fe\u4e4b\u524d\u4f1a\u68c0\u67e5\u4f60\u7684\u89c6\u56fe\u540d\u79f0\uff0c\u53d1\u73b0\u8fd9\u89c6\u56fe\u4f1a\u5bfc\u81f4\u5faa\u73af\u8bf7\u6c42\uff0c\u5c31\u629b\u51fa\u4e00\u4e2aServletException\uff0ctomcat\u622a\u53d6\u5230\u8fd9\u4e2a\u5f02\u5e38\u540e\u5c31\u8f6c\u53d1\u5230/error\u9875\u9762\uff0c\u5c31\u5728\u8fd9\u4e2a\u8f6c\u53d1\u7684\u8fc7\u7a0b\u4e2d\u5bfc\u81f4\u4e86springmvc\u91cd\u65b0\u5f00\u59cb DispatcherServlet \u7684\u6574\u4e2a\u6d41\u7a0b\uff0c\u6240\u4ee5\u62e6\u622a\u5668\u81ea\u7136\u5c31\u6267\u884c\u4e86\u591a\u6b21\u3002","title":"springmvc\u62e6\u622a\u5668\u4e3a\u4ec0\u4e48\u4f1a\u6267\u884c\u591a\u6b21\uff1f"},{"location":"spring/springmvc%20%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D/#handlerinterceptor_2","text":"\u5bf9\u4e8e\u62e6\u622a\u5668 HandlerInterceptor \u7684\u673a\u5236\u9700\u8981\u6709\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\uff0c\u8fd9\u91cc\u7b80\u5355\u8bb2\u4e0bspringmvc\u4e2d\u7684\u62e6\u622a\u5668\u662f\u600e\u4e48\u6267\u884c\u7684\uff0c\u6211\u4eec\u90fd\u77e5\u9053springmvc\u4e2d\u5904\u7406\u8bf7\u6c42\u90fd\u662f\u4ece DispatcherServlet \u7684 doDispatch \u65b9\u6cd5\u5f00\u59cb\u7684\uff0c // DispatcherServlet\u7c7b doDispatch\u65b9\u6cd5 protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception { ......\u7701\u7565\u90e8\u5206\u524d\u9762\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u4ece 1035\u884c\u8fd9\u91cc\u5f00\u59cb // HandlerExecutionChain mappedHandler = getHandler(processedRequest); \u57281016\u884c\u6709\u8bbe\u7f6emappedHandler\u7684\u503c\uff0cHandlerExecutionChain\u662f\u4e00\u4e2a\u62e6\u622a\u5668\u8c03\u7528\u94fe\uff0c\u5b83\u662f\u94fe\u5f0f\u6267\u884c\u7684\uff0c\u8fd9\u91cc\u662f\u94fe\u5f0f\u6267\u884c\u6240\u6709\u7684\u62e6\u622a\u5668\u91cc\u9762\u7684 preHandle \u65b9\u6cd5 if (!mappedHandler.applyPreHandle(processedRequest, response)) { return; } // \u771f\u6b63\u4ee3\u7528\u6211\u4eec\u81ea\u5df1\u5199\u7684\u4e1a\u52a1\u4ee3\u7801\u7684\u5165\u53e3 mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); if (asyncManager.isConcurrentHandlingStarted()) { return; } applyDefaultViewName(processedRequest, mv); // \u8fd9\u91cc\u662f\u94fe\u5f0f\u6267\u884c\u6240\u6709\u7684\u62e6\u622a\u5668\u91cc\u9762\u7684 postHandle \u65b9\u6cd5 mappedHandler.applyPostHandle(processedRequest, response, mv); ......\u7701\u7565\u540e\u9762\u7684\u4ee3\u7801 } \u591a\u4e2a\u62e6\u622a\u5668\u5b83\u7684\u6267\u884c\u987a\u5e8f\u662f\u548c\u6808\u7684\u5165\u6808\u51fa\u6808\u987a\u5e8f\u6709\u70b9\u7c7b\u4f3c\uff0c\u6211\u4eec\u628a preHandle \u65b9\u6cd5\u6bd4\u4f5c\u5165\u6808\uff0c postHandle \u65b9\u6cd5\u6bd4\u4f5c\u51fa\u6808\uff0c\u6240\u4ee5\u5c31\u662f preHandle \u5148\u6267\u884c\u7684 postHandle \u53cd\u800c\u540e\u6267\u884c\u3002 \u4f8b\u5982\u6211\u4eec\u6709\u4e09\u4e2a\u62e6\u622a\u5668\uff0c\u5206\u522b\u4e3a A\uff0cB\uff0cC\u3002\u5b83\u4eec\u7684\u6267\u884c\u987a\u5e8f\u5982\u4e0b\u56fe\uff1a \u62e6\u622a\u5668\u6267\u884c\u7684\u76f8\u5173\u6e90\u7801\uff1a boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception { HandlerInterceptor[] interceptors = getInterceptors();//\u83b7\u53d6\u6240\u6709\u7684\u62e6\u622a\u5668 if (!ObjectUtils.isEmpty(interceptors)) { for (int i = 0; i < interceptors.length; i++) {// \u8fd9\u91cc\u662f\u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb HandlerInterceptor interceptor = interceptors[i]; if (!interceptor.preHandle(request, response, this.handler)) { triggerAfterCompletion(request, response, null); return false; } this.interceptorIndex = i; } } return true; } void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv) throws Exception { HandlerInterceptor[] interceptors = getInterceptors();//\u83b7\u53d6\u6240\u6709\u7684\u62e6\u622a\u5668 if (!ObjectUtils.isEmpty(interceptors)) { for (int i = interceptors.length - 1; i >= 0; i--) {// \u8fd9\u91cc\u662f\u4ece\u6700\u540e\u4e00\u4e2a\u5f00\u59cb HandlerInterceptor interceptor = interceptors[i]; interceptor.postHandle(request, response, this.handler, mv); } } } \u4e0a\u9762\u7b80\u8981\u7684\u8bb2\u4e86\u4e0b\u62e6\u622a\u5668\u4ece\u54ea\u91cc\u5f00\u59cb\u4ee5\u53ca\u5b83\u7684\u6267\u884c\u987a\u5e8f\u76f8\u5173\u7684\u4e1c\u897f\uff0c\u7ecf\u8fc7\u4e86\u62e6\u622a\u5668\u7684\u524d\u7f6e\u62e6\u622a\u4e4b\u540e\uff0cspringmvc\u901a\u8fc7\u53cd\u5c04\u6267\u884c\u4e86\u6211\u4eec\u7684\u5177\u4f53\u4e1a\u52a1\u65b9\u6cd5\uff0c\u90a3\u5728\u6267\u884c\u5177\u4f53\u7684\u4e1a\u52a1\u65b9\u6cd5\u65f6\u6709\u4e24\u4e2a\u5f88\u91cd\u8981\u7684\u95ee\u9898\uff0c\u4e00\u662f\u5982\u4f55\u5904\u7406\u6211\u4eec\u4e1a\u52a1\u65b9\u6cd5\u7684\u53c2\u6570\uff08\u5343\u5947\u767e\u602a\u7684\uff09\uff1b\u4e8c\u662f\u5982\u4f55\u5904\u7406\u6211\u4eec\u4e1a\u52a1\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff08\u4e5f\u662f\u591a\u79cd\u591a\u6837\u7684\uff09\u3002\u5728springmvc\u4e2d\u901a\u8fc7 HandlerMethodArgumentResolver \u6765\u5904\u7406\u65b9\u6cd5\u53c2\u6570\uff0c\u901a\u8fc7 HandlerMethodReturnValueHandler \u6765\u5904\u7406\u65b9\u6cd5\u8fd4\u56de\u503c\u3002\u5728\u672c\u6587\u4e2d\uff0c\u65b9\u6cd5\u7684\u5165\u53c2\u4e0e\u672c\u6587\u6240\u8ba8\u8bba\u7684\u95ee\u9898\u5173\u7cfb\u4e0d\u5927\uff0c\u56e0\u6b64\u8fd9\u91cc\u5c31\u4e0d\u5c55\u5f00\u53d9\u8ff0 HandlerMethodArgumentResolver \u76f8\u5173\u7684\u4e1c\u897f\u4e86\u3002\u91cd\u70b9\u8bf4\u4e0b\u4e0e\u95ee\u9898\u76f8\u5173\u7684 HandlerMethodReturnValueHandler \u7c7b\u3002","title":"HandlerInterceptor\u76f8\u5173\u77e5\u8bc6"},{"location":"spring/springmvc%20%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D/#handlermethodreturnvaluehandler","text":"\u5bf9\u4e8econtroller\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7684\u5904\u7406\uff0cspringmvc\u6846\u67b6\u4e2d\u5185\u7f6e\u4e8620\u591a\u79cd\u9ed8\u8ba4\u7684\u8fd4\u56de\u503c\u5904\u7406\u5668\uff0c\u5728 RequestMappingHandlerAdapter#getDefaultReturnValueHandlers \u65b9\u6cd5\u4e2d\u53ef\u4ee5\u770b\u5230\u5b83\u8bbe\u7f6e\u7684\u4e00\u4e9b\u9ed8\u8ba4\u7684HandlerMethodReturnValueHandler private List<HandlerMethodReturnValueHandler> getDefaultReturnValueHandlers() { List<HandlerMethodReturnValueHandler> handlers = new ArrayList<>(); // Single-purpose return value types // \u8fd4\u56de\u503c\u7c7b\u578b\u662fModelAndView\u6216\u5176\u5b50\u7c7b handlers.add(new ModelAndViewMethodReturnValueHandler()); // \u8fd4\u56de\u503c\u7c7b\u578b\u662fModel\u6216\u5176\u5b50\u7c7b handlers.add(new ModelMethodProcessor()); // \u8fd4\u56de\u503c\u7c7b\u578b\u662fView\u6216\u5176\u5b50\u7c7b handlers.add(new ViewMethodReturnValueHandler()); // ResponseBody\u6ce8\u89e3 handlers.add(new ResponseBodyEmitterReturnValueHandler(getMessageConverters(), this.reactiveAdapterRegistry, this.taskExecutor, this.contentNegotiationManager)); handlers.add(new StreamingResponseBodyReturnValueHandler()); // \u7528\u6765\u5904\u7406\u8fd4\u56de\u503c\u7c7b\u578b\u662fHttpEntity\u7684\u65b9\u6cd5 handlers.add(new HttpEntityMethodProcessor(getMessageConverters(), this.contentNegotiationManager, this.requestResponseBodyAdvice)); handlers.add(new HttpHeadersReturnValueHandler()); handlers.add(new CallableMethodReturnValueHandler()); handlers.add(new DeferredResultMethodReturnValueHandler()); handlers.add(new AsyncTaskMethodReturnValueHandler(this.beanFactory)); // Annotation-based return value types // \u8fd4\u56de\u503c\u6709@ModelAttribute\u6ce8\u89e3 handlers.add(new ModelAttributeMethodProcessor(false)); handlers.add(new RequestResponseBodyMethodProcessor(getMessageConverters(), this.contentNegotiationManager, this.requestResponseBodyAdvice)); // Multi-purpose return value types // \u8fd4\u56de\u503c\u662fvoid\u6216String, \u5c06\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3aview\u89c6\u56fe\u7684\u540d\u5b57 handlers.add(new ViewNameMethodReturnValueHandler()); // \u8fd4\u56de\u503c\u7c7b\u578b\u662fMap handlers.add(new MapMethodProcessor()); // Custom return value types\uff0c\u81ea\u5b9a\u4e49\u8fd4\u56de\u503c\u5904\u7406 if (getCustomReturnValueHandlers() != null) { handlers.addAll(getCustomReturnValueHandlers()); } // Catch-all if (!CollectionUtils.isEmpty(getModelAndViewResolvers())) { handlers.add(new ModelAndViewResolverMethodReturnValueHandler(getModelAndViewResolvers())); } else { handlers.add(new ModelAttributeMethodProcessor(true)); } return handlers; } \u5728\u672c\u6587\u7684\u95ee\u9898\u4e2d\uff0ccontroller\u7684\u8fd4\u56de\u503c\u4e3avoid\u548cString\u4e24\u79cd\u90fd\u6709\uff0c\u521a\u597d\u5bf9\u5e94 ViewNameMethodReturnValueHandler \u8fd9\u4e2a\u5904\u7406\u5668 public class ViewNameMethodReturnValueHandler implements HandlerMethodReturnValueHandler { @Override public boolean supportsReturnType(MethodParameter returnType) { Class<?> paramType = returnType.getParameterType(); // \u8fd4\u56de\u503c\u7c7b\u578b\u5339\u914d\uff0cvoid\u548cString return (void.class == paramType || CharSequence.class.isAssignableFrom(paramType)); } @Override public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception { // \u8fd4\u56de\u503c\u5904\u7406\u8fd9\u91cc\uff0c\u53ea\u5904\u7406\u4e86String\u7c7b\u578b\u7684\u8fd4\u56de\u503c\uff0c\u5c06\u8fd4\u56de\u503c\u7684\u7ed3\u679c\u4f5c\u4e3a\u89c6\u56fe\u540d\u79f0\u8bbe\u7f6e\u5230ModelAndViewContainer\u5bf9\u8c61\u4e2d // \u5bf9\u4e8evoid\u7c7b\u578b\u7684\u8fd4\u56de\u503c\uff0c\u8fd9\u91cc\u5e76\u6ca1\u6709\u5904\u7406\uff0c if (returnValue instanceof CharSequence) { String viewName = returnValue.toString(); mavContainer.setViewName(viewName); if (isRedirectViewName(viewName)) { mavContainer.setRedirectModelScenario(true); } } else if (returnValue != null) { // should not happen throw new UnsupportedOperationException(\"Unexpected return type: \" + returnType.getParameterType().getName() + \" in method: \" + returnType.getMethod()); } } } \u8fd9\u91cc\u6709\u4e2a\u5c0f\u7ec6\u8282\uff0chandleReturnValue\u65b9\u6cd5\u4e2dreturnValue\u53c2\u6570\u524d\u9762\u662f\u52a0\u4e86\u4e00\u4e2a @Nullable \u6ce8\u89e3\u7684\uff0c\u610f\u5473\u8fd9\u8fd9\u4e2a\u53c2\u6570\u7684\u503c\u53ef\u80fd\u662f null \uff0c\u5f53\u4f60\u7684controller\u4e3avoid\u65b9\u6cd5\u65f6\uff0creturnValue\u5c31\u4f1a\u4e3anull\uff0c\u90a3handleReturnValue\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u4e0d\u4f1a\u5bf9 mavContainer \u8fd9\u4e2a\u5bf9\u8c61\u505a\u4efb\u4f55\u5904\u7406\u3002","title":"HandlerMethodReturnValueHandler"},{"location":"spring/springmvc%20%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D/#modelandview","text":"mavContainer \u8fd9\u4e2a\u53c2\u6570\u662f\u4ece RequestMappingHandlerAdapter \u4e2d\u7684 invokeHandlerMethod \u65b9\u6cd5\u4e2d\u521b\u5efa\u5e76\u4e00\u8def\u4f20\u8fdb\u6765\u7684\uff0c\u6574\u4e2a\u8c03\u7528\u94fe\u5982\u4e0b\u56fe\uff1a \u6700\u7ec8\u5728 DispatcherServlet \u7684 doDispatch \u65b9\u6cd5\u4e2d\u5f97\u5230\u4e0a\u56fe\u4e2d\u6700\u540e\u8fd4\u56de\u7684ModelAndView\u5bf9\u8c61 protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception { ......\u7701\u7565\u90e8\u5206\u524d\u9762\u7684\u4ee3\u7801 // Actually invoke the handler. mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); ......\u7701\u7565\u90e8\u4ee3\u7801 // \u76f4\u63a5\u770b\u8fd9\u91cc\uff0c\u8bbe\u7f6e\u9ed8\u8ba4\u89c6\u56fe applyDefaultViewName(processedRequest, mv); ......\u7701\u7565\u90e8\u5206\u524d\u9762\u7684\u4ee3\u7801 } private void applyDefaultViewName(HttpServletRequest request, @Nullable ModelAndView mv) throws Exception { // \u8fd9\u91cc\u5224\u65ad\u662f\u5426\u8bbe\u7f6e\u4e86\u89c6\u56fe\uff0c\u901a\u8fc7\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7531\u4e8e\u6211\u4eec\u7684controller\u662fvoid\u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u662f\u6ca1\u6709\u8bbe\u7f6e\u89c6\u56fe\u7684 if (mv != null && !mv.hasView()) { // \u83b7\u53d6\u9ed8\u8ba4\u89c6\u56fe\u540d\u79f0 String defaultViewName = getDefaultViewName(request); if (defaultViewName != null) { // \u8bbe\u7f6e\u9ed8\u8ba4\u89c6\u56fe\u540d\u79f0 mv.setViewName(defaultViewName); } } } \u83b7\u53d6\u9ed8\u8ba4\u89c6\u56fe\u540d\u79f0\u7684\u65b9\u6cd5\uff1a getDefaultViewName \uff0c\u7531\u4e8e\u8fd9\u4e2a\u65b9\u6cd5\u91cc\u9762\u8c03\u7528\u6808\u6bd4\u8f83\u6df1\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u5b83\u8c03\u7528\u7684\u6700\u91cc\u9762\u7684\u90a3\u4e2a\u65b9\u6cd5\uff1a org.springframework.web.util.UrlPathHelper#getPathWithinApplication public String getPathWithinApplication(HttpServletRequest request) { String contextPath = getContextPath(request); String requestUri = getRequestUri(request); String path = getRemainingPath(requestUri, contextPath, true); if (path != null) { // Normal case: URI contains context path. return (StringUtils.hasText(path) ? path : \"/\"); } else { return requestUri; } } \u6700\u540e\u8fd9\u4e2a\u65b9\u6cd5\u5176\u5b9e\u5c31\u662f\u83b7\u53d6\u4e86controller\u7684requestMapping\uff0c\u7136\u540e\u8fd4\u56de\u51fa\u53bb\u3002\u518d\u7ed3\u5408\u524d\u9762\u7684 getDefaultViewName \u65b9\u6cd5\u53ef\u77e5\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u89c6\u56fe\u540d\u79f0\u5c31\u662frequestMapping\u7684\u503c\u3002\u5728\u6e32\u67d3\u89c6\u56fe\u4e4b\u524dspringmvc\u8fd8\u505a\u4e86\u4e2a\u5224\u65ad\uff0c\u5c31\u662f\u770b\u4f60\u7684\u89c6\u56fe\u540d\u79f0\u662f\u4e0d\u662f\u672c\u6b21\u8bf7\u7684uri\u4e2d\u7684\u4e00\u90e8\u5206\u6216\u8005\u548curi\u4e00\u6837\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u8bf4\u4f60\u662f\u4e00\u4e2a\u5faa\u73af\u89c6\u56fe\u8def\u5f84","title":"ModelAndView\u5bf9\u8c61\u7684\u6d41\u8f6c\u8fc7\u7a0b"},{"location":"spring/springmvc%20%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D/#tomcat","text":"\u5728tomcat\u7684 StandardHostValve \u7c7b\u4e2d\uff0c\u5b83\u83b7\u53d6\u5230\u4e86\u4e0a\u9762springmvc\u629b\u51fa\u7684ServletException\u5f02\u5e38\uff0c\u5b83\u5199\u4e86\u4e2a\u5f88\u660e\u4e86\u7684\u6ce8\u91ca\uff0c\u5bfb\u627e\u4e00\u4e2a\u5e94\u7528\u7ea7\u522b\u7684\u9519\u8bef\u9875\u9762\uff0c\u5982\u679c\u5b58\u5728\u7684\u8bdd\u5219\u6e32\u67d3\u5b83\uff08\u5c31\u662f\u91cd\u5b9a\u5411\u5230\u9519\u8bef\u9875\u9762\uff09 \u901a\u8fc7debug\u76f4\u5230\u6267\u884c\u5230\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u901a\u8fc7\u4e0b\u56fe\u4e2d\u7b2c\u4e8c\u884c\u540e\u9762\u7684debug\u4fe1\u606f\u4e5f\u53ef\u4ee5\u770b\u5230\u9519\u8bef\u9875\u9762\u7684\u8def\u5f84\u4e3a /error \u901a\u8fc7 RequestDispatcher \u8fd9\u4e2a\u7c7b\u540d\u80fd\u731c\u5230\u5e94\u8be5\u662f\u8bf7\u6c42\u5206\u53d1\u5668\uff0c\u770b\u770b\u5b83\u662f\u5982\u4f55\u521b\u5efa RequestDispatcher \u5bf9\u8c61\u7684 public RequestDispatcher getRequestDispatcher(final String path) { ......\u7701\u7565\u90e8\u4ee3\u7801 try { ......\u7701\u7565\u90e8\u4ee3\u7801 // Construct a RequestDispatcher to process this request // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42\u8c03\u5ea6\u5668\u6765\u5904\u7406\u8be5\u8bf7\u6c42 return new ApplicationDispatcher(wrapper, uri, wrapperPath, pathInfo, queryString, mapping, null); } finally { mappingData.recycle(); } } \u8fd9\u91cc\u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u5230\u5f00\u59cb\u4e86\u8bf7\u6c42\u8f6c\u53d1\uff0c\u8fd9\u5bf9\u4e8espringmvc\u6765\u8bb2\u5c31\u5df2\u7ecf\u5f00\u59cb\u4e86\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42\uff0c\u5b83\u4f1a\u518d\u6b21\u8fdb\u5165\u5230 DispatcherServlet \u7684 doDispatch \u65b9\u6cd5\u4e2d\uff0c\u6574\u4e2aspringmvc\u7684\u6d41\u7a0b\u4f1a\u518d\u91cd\u65b0\u8d70\u4e00\u904d\uff0c\u6240\u4ee5\u62e6\u622a\u5668\u81ea\u7136\u4e5f\u4f1a\u518d\u6267\u884c\u4e00\u6b21\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u5728\u62e6\u622a\u5668\u4e2d\u770b\u5230\u7684url\u5df2\u7ecf\u53d8\u6210 /error \u4e86\uff0c\u800c\u4e0d\u662f\u4e4b\u524d\u7684requestMapping\u91cc\u9762\u7684\u503c\u3002","title":"tomcat\u5bf9\u9519\u8bef\u9875\u9762\u7684\u5904\u7406"}]}