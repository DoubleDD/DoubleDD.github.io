{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spring\u7cfb\u5217 Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 Spring Bean\u751f\u547d\u5468\u671f \u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58","title":"Home"},{"location":"#spring","text":"Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 Spring Bean\u751f\u547d\u5468\u671f \u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58","title":"Spring\u7cfb\u5217"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/","text":"Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb \u8bfb\u5199\u5206\u79bb\u5b9e\u672c\u8d28\u4e0a\u5c31\u662f\u628a\u7a0b\u5e8f\u5bf9\u6570\u636e\u5e93\u8bfb\u64cd\u4f5c\u548c\u5199\u64cd\u4f5c\u5206\u53d1\u5230\u4e0d\u540c\u7684\u6570\u636e\u5e93\u4e2d\u3002\u4e0d\u540c\u7684\u6570\u636e\u5e93\u5c31\u662f\u591a\u4e2a\u6570\u636e\u6e90\uff0c\u90a3 \u8bfb\u5199\u5206\u79bb \u8fd9\u91cc\u5c31\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u591a\u6570\u636e\u6e90\u95ee\u9898\u3002 \u5728spring\u4e2d\uff0c\u591a\u6570\u636e\u6e90\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7 AbstractRoutingDataSource \u548cspring aop\u6765\u89e3\u51b3\u3002 \u4ee3\u7801\u5b9e\u73b0 \u7ee7\u627f\u62bd\u8c61\u7c7b AbstractRoutingDataSource \uff0c\u5b9e\u73b0 determineCurrentLookupKey \u65b9\u6cd5\u3002 \u521b\u5efa\u5207\u9762\u62e6\u622a\u5668\uff0c\u62e6\u622a\u7b26\u5408\u6761\u4ef6\u7684\u65b9\u6cd5\u3002 \u5728\u65b9\u6cd5\u6267\u884c\u524d\u540e\u8fdb\u884c\u6570\u636e\u6e90\u5207\u6362\u3002 \u914d\u7f6e\u6587\u4ef6\uff1a # master spring.datasource.master.url=jdbc:mysql://192.168.31.100:3306/test?autoReconnect=true spring.datasource.master.username=root spring.datasource.master.password=123456 spring.datasource.master.driver-class-name=com.mysql.jdbc.Driver # slave spring.datasource.slave.url=jdbc:mysql://192.168.31.101:3306/course-study?autoReconnect=true spring.datasource.slave.username=root spring.datasource.slave.password=123456 spring.datasource.slave.driver-class-name=com.mysql.jdbc.Driver java\u76f8\u5173\u914d\u7f6e\u7c7b\u4ee3\u7801\uff1a public class DbProperties { private String url; private String username; private String password; private String driverClassName; // \u7701\u7565 getter \u548c setter \u65b9\u6cd5 } @Component @ConfigurationProperties(prefix = \"spring.datasource.master\") class MasterProperties extends DbProperties { } @Component @ConfigurationProperties(prefix = \"spring.datasource.slave\") class SlaveProperties extends DbProperties { } @Configuration public class DataSourceConfig { public static final String MASTER = \"master\"; public static final String SLAVE = \"slave\"; /** * \u4e3b\u5e93\u6570\u636e\u6e90 * * @param properties * @return */ @Bean(MASTER) public DataSource master(MasterProperties properties) { return build(properties); } /** * \u4ece\u5e93\u6570\u636e\u6e90 * * @param properties * @return */ @Bean(SLAVE) public DataSource slave(SlaveProperties properties) { return build(properties); } /** * \u6839\u636e\u914d\u7f6e\u4fe1\u606f\u6784\u5efa\u6570\u636e\u6e90 * * @param properties * @return */ private DataSource build(DbProperties properties) { return DataSourceBuilder .create() .url(properties.getUrl()) .username(properties.getUsername()) .password(properties.getPassword()) .driverClassName(properties.getDriverClassName()) .build(); } } /** * todo \u91cd\u70b9 * \u7ee7\u627fAbstractRoutingDataSource\uff0c\u5b9e\u73b0determineCurrentLookupKey\u65b9\u6cd5 */ public class DynamicDataSource extends AbstractRoutingDataSource { @Override protected Object determineCurrentLookupKey() { return DataSourceContext.get(); } } public class DataSourceContext { private static final ThreadLocal<String> datasource = new ThreadLocal<>(); public static String get() { String key = datasource.get(); return key == null ? \"master\" : key; } public static void setDatasource(String key) { datasource.set(key); } public static void clean() { datasource.remove(); } } @Configuration public class TransactionConfig { /** * \u914d\u7f6e\u52a8\u6001\u6570\u636e\u6e90 * * @param master * @param slave * @return */ @Bean public DynamicDataSource dynamic( @Autowired @Qualifier(MASTER) DataSource master, @Autowired @Qualifier(SLAVE) DataSource slave ) { Map<Object, Object> map = new HashMap<>(); map.put(MASTER, master); map.put(SLAVE, slave); DynamicDataSource routing = new DynamicDataSource(); routing.setTargetDataSources(map); routing.setDefaultTargetDataSource(master); return routing; } @Bean public PlatformTransactionManager platformTransactionManager(DynamicDataSource dataSource) { return new DataSourceTransactionManager(dataSource); } } // --------------------------------------------\u62e6\u622a\u5668\u914d\u7f6e----------------------------------------- public class DatasourceInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { before(invocation.getMethod()); Object invoke = null; try { invoke = invocation.proceed(); } finally { after(); } return invoke; } public void before(Method method) { //\u5982\u679c\u6709\u4e8b\u7269\u6ce8\u89e3\uff0c\u5219\u4f18\u5148\u4f7f\u7528\u4e8b\u7269\u6ce8\u89e3\u7684\u7279\u6027\u3002\u5982\u679c\u4e8b\u52a1\u5c5e\u6027\u4e3a\u53ea\u8bfb\u7684\uff0c\u90a3\u6beb\u65e0\u7591\u95ee\u53ef\u4ee5\u628a\u5b83\u5bf9\u6570\u636e\u7684\u8bf7\u6c42\u6253\u5230\u4ece\u5e93 Transactional transactional = method.getAnnotation(Transactional.class); if (transactional != null) { changeDatasource(transactional.readOnly() ? SLAVE : MASTER); return; } //\u8fd9\u91cc\u662f\u81ea\u5b9a\u4e49\u5c5e\u6027\uff0c\u5982\u679c\u6709\u7684\u65b9\u6cd5\u6ca1\u6709\u52a0\u4e8b\u7269\u6ce8\u89e3\uff0c\u4f46\u662f\u52a0\u4e86\u81ea\u5b9a\u4e49\u6ce8\u89e3\u7684\uff0c\u90a3\u4e48\u5c31\u4f1a\u8d70\u8fd9\u6bb5\u903b\u8f91 Datasource datasource = method.getAnnotation(Datasource.class); if (datasource != null && SLAVE.equals(datasource.value())) { changeDatasource(SLAVE); } } public void after() { // \u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e DataSourceContext.clean(); } private void changeDatasource(String type) { DataSourceContext.setDatasource(type); } } public class DatasourceMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Datasource \u548c @Transactional \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Datasource \u548c @Transactional \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Datasource.class) || method.isAnnotationPresent(Transactional.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Datasource.class) || clazz.isAnnotationPresent(Transactional.class); } } @Configuration public class AopConfig { /** * DefaultAdvisorAutoProxyCreator \u8fd9\u4e2a\u662f\u4e00\u4e2a\u53ef\u9009\u914d\u7f6e\u9879\uff0c\u5982\u679c\u5728\u4f60\u7684spring-boot\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86\u4e0b\u9762\u4efb\u610f\u4e00\u4e2a\u6ce8\u89e3\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2abean\u53ef\u4ee5\u4e0d\u7528\u914d\u7f6e * @EnableTransactionManagement * @EnableAspectJAutoProxy * @EnableCaching */ @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public DatasourceMethodPointcutAdvisor methodPointcutAdvisor(DatasourceInterceptor txInterceptor) { DatasourceMethodPointcutAdvisor advisor = new DatasourceMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public DatasourceInterceptor methodInterceptor() { return new DatasourceInterceptor(); } } AbstractRoutingDataSource\u8be6\u89e3 \u200b \uff08\u56fe-1\uff09 \u5f53\u7a0b\u5e8f\u6267\u884cCURD\u64cd\u4f5c\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528 AbstractRoutingDataSource \u7c7b\u7684 getConnection \u65b9\u6cd5\u6765\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5 Connection \u5bf9\u8c61\uff0c\u6700\u7ec8\u901a\u8fc7\u8be5\u8fde\u63a5\u5bf9\u8c61\u6765\u8bbf\u95ee\u6570\u636e\u5e93\u3002\u800c AbstractRoutingDataSource \u8fd9\u4e2a\u62bd\u8c61\u7c7b\u5b9e\u73b0\u4e86 DataSource \u63a5\u53e3\uff0c\u540c\u65f6\u4e5f\u5b9e\u73b0\u4e86 DataSource \u63a5\u53e3\u4e0b\u7684\u4e24\u4e2a getConnection \u65b9\u6cd5\uff0c\u6e90\u7801\u5982\u4e0b\uff1a \u200b \uff08\u56fe-2\uff09 \u200b \uff08\u56fe-3\uff09 \u200b \uff08\u56fe-4\uff09 \u901a\u8fc7\u4e0a\u9762\u7684\u6e90\u7801\u53ef\u4ee5\u770b\u51fa\uff0c DataSource \u5bf9\u8c61\u6700\u7ec8\u901a\u8fc7 determineCurrentLookupKey \u8fd9\u4e2a\u65b9\u6cd5\u786e\u5b9a\u3002\u56e0\u6b64\u6211\u4eec\u5b9e\u73b0\u8be5\u65b9\u6cd5\u5c31\u53ef\u4ee5\uff0c\u6b64\u5916\uff0c\u9664\u4e86\u5b9e\u73b0\u8be5\u65b9\u6cd5\u5916\uff0c\u8fd8\u9700\u8981\u901a\u8fc7 setTargetDataSources \u65b9\u6cd5\u5c06\u6240\u6709\u7684\u6570\u636e\u6e90\u4ee5 \u7684\u5f62\u5f0f\u4fdd\u5b58\u5230\u8fd9\u4e2a\u5bf9\u8c61\u91cc\u9762\u3002 \u200b \uff08\u56fe-5\uff09 \u200b \uff08\u56fe-6\uff09 \u200b \uff08\u56fe-7\uff09 \u7531\u4e8e AbstractRoutingDataSource \u7c7b\u540c\u65f6\u8fd8\u5b9e\u73b0\u4e86 InitializingBean \u63a5\u53e3\uff0c\u56e0\u6b64\u5f53\u8fd9\u4e2abean\u5b9e\u4f8b\u5316\u5b8c\u6210\u7684\u65f6\u5019\uff0c\u4f1a\u89e6\u53d1 afterPropertiesSet \u65b9\u6cd5\u6267\u884c\uff0c\u8be5\u65b9\u6cd5\u4e3b\u8981\u65f6\u901a\u8fc7 targetDataSources \u751f\u6210 resolvedDataSources \u5bf9\u8c61\uff0c\u4ee5\u53ca\u8bbe\u7f6e\u9ed8\u8ba4\u6570\u636e\u6e90\u3002\u5728\uff08\u56fe-3\uff09\u4e2d\u7684 determineTargetDataSource \u65b9\u6cd5\u4e2d\uff0c\u4f1a\u4ece resolvedDataSources \u5bf9\u8c61\u4e2d\u83b7\u53d6 DataSource \u3002 \u200b \uff08\u56fe-8\uff09 spring aop\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u5728\u672c\u6587\u7684\u89e3\u51b3\u65b9\u6848\u4ee3\u7801\u4e2d\u5e76\u6ca1\u6709\u4f7f\u7528\u5e38\u89c4\u7684aop\u62e6\u622a\u5668\u5199\u6cd5\uff0c\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u79cd\u3002\u56e0\u4e3a\u5728\u672c\u89e3\u51b3\u65b9\u6848\u4e2d\u9664\u4e86\u62e6\u622a\u4e86\u81ea\u5b9a\u7684 @Datasource \u6ce8\u89e3\u4e4b\u5916\uff0c\u8fd8\u62e6\u622a\u4e86 @Transactional \u6ce8\u89e3\u3002\u6211\u4eec\u90fd\u77e5\u9053 @Transactional \u6ce8\u89e3\u5199\u5728\u63a5\u53e3\u65b9\u6cd5\u548c\u5b9e\u73b0\u7c7b\u65b9\u6cd5\u4e0a\u662f\u90fd\u53ef\u4ee5\u751f\u6548\u7684\uff0c\u90a3\u4e0b\u9762\u8fd9\u79cd\u666e\u901a\u7684aop\u5199\u6cd5\u5bf9\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u662f\u65e0\u6cd5\u62e6\u622a\u7684\uff0c\u56e0\u6b64\u624d\u4f7f\u7528\u4e86\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668\u7684\u5199\u6cd5\u3002 \u5bf9\u4e8e\u5982\u4f55\u89e3\u51b3spring aop\u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u95ee\u9898\uff0c\u5728 Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u8fd9\u7bc7\u6587\u7ae0\u91cc\u9762\u6709\u8be6\u7ec6\u8bf4\u660e\u3002 @Aspect @Component @EnableAspectJAutoProxy public class DataSourceAspect { @Around(\"@annotation(com.xxx.Datasource)\") public Object around(ProceedingJoinPoint joinPoint) throws Throwable { // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u8bbe\u7f6e\u6570\u636e\u6e90... doingSomthingBefore(); // \u6267\u884c\u4e1a\u52a1\u65b9\u6cd5 Object result = joinPoint.proceed(); // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e... doingSomthingAfter(); return result; } }","title":"Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/#spring-aop","text":"\u8bfb\u5199\u5206\u79bb\u5b9e\u672c\u8d28\u4e0a\u5c31\u662f\u628a\u7a0b\u5e8f\u5bf9\u6570\u636e\u5e93\u8bfb\u64cd\u4f5c\u548c\u5199\u64cd\u4f5c\u5206\u53d1\u5230\u4e0d\u540c\u7684\u6570\u636e\u5e93\u4e2d\u3002\u4e0d\u540c\u7684\u6570\u636e\u5e93\u5c31\u662f\u591a\u4e2a\u6570\u636e\u6e90\uff0c\u90a3 \u8bfb\u5199\u5206\u79bb \u8fd9\u91cc\u5c31\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u591a\u6570\u636e\u6e90\u95ee\u9898\u3002 \u5728spring\u4e2d\uff0c\u591a\u6570\u636e\u6e90\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7 AbstractRoutingDataSource \u548cspring aop\u6765\u89e3\u51b3\u3002","title":"Spring AOP\u5b9e\u73b0\u6570\u636e\u5e93\u8bfb\u5199\u5206\u79bb"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/#_1","text":"\u7ee7\u627f\u62bd\u8c61\u7c7b AbstractRoutingDataSource \uff0c\u5b9e\u73b0 determineCurrentLookupKey \u65b9\u6cd5\u3002 \u521b\u5efa\u5207\u9762\u62e6\u622a\u5668\uff0c\u62e6\u622a\u7b26\u5408\u6761\u4ef6\u7684\u65b9\u6cd5\u3002 \u5728\u65b9\u6cd5\u6267\u884c\u524d\u540e\u8fdb\u884c\u6570\u636e\u6e90\u5207\u6362\u3002 \u914d\u7f6e\u6587\u4ef6\uff1a # master spring.datasource.master.url=jdbc:mysql://192.168.31.100:3306/test?autoReconnect=true spring.datasource.master.username=root spring.datasource.master.password=123456 spring.datasource.master.driver-class-name=com.mysql.jdbc.Driver # slave spring.datasource.slave.url=jdbc:mysql://192.168.31.101:3306/course-study?autoReconnect=true spring.datasource.slave.username=root spring.datasource.slave.password=123456 spring.datasource.slave.driver-class-name=com.mysql.jdbc.Driver java\u76f8\u5173\u914d\u7f6e\u7c7b\u4ee3\u7801\uff1a public class DbProperties { private String url; private String username; private String password; private String driverClassName; // \u7701\u7565 getter \u548c setter \u65b9\u6cd5 } @Component @ConfigurationProperties(prefix = \"spring.datasource.master\") class MasterProperties extends DbProperties { } @Component @ConfigurationProperties(prefix = \"spring.datasource.slave\") class SlaveProperties extends DbProperties { } @Configuration public class DataSourceConfig { public static final String MASTER = \"master\"; public static final String SLAVE = \"slave\"; /** * \u4e3b\u5e93\u6570\u636e\u6e90 * * @param properties * @return */ @Bean(MASTER) public DataSource master(MasterProperties properties) { return build(properties); } /** * \u4ece\u5e93\u6570\u636e\u6e90 * * @param properties * @return */ @Bean(SLAVE) public DataSource slave(SlaveProperties properties) { return build(properties); } /** * \u6839\u636e\u914d\u7f6e\u4fe1\u606f\u6784\u5efa\u6570\u636e\u6e90 * * @param properties * @return */ private DataSource build(DbProperties properties) { return DataSourceBuilder .create() .url(properties.getUrl()) .username(properties.getUsername()) .password(properties.getPassword()) .driverClassName(properties.getDriverClassName()) .build(); } } /** * todo \u91cd\u70b9 * \u7ee7\u627fAbstractRoutingDataSource\uff0c\u5b9e\u73b0determineCurrentLookupKey\u65b9\u6cd5 */ public class DynamicDataSource extends AbstractRoutingDataSource { @Override protected Object determineCurrentLookupKey() { return DataSourceContext.get(); } } public class DataSourceContext { private static final ThreadLocal<String> datasource = new ThreadLocal<>(); public static String get() { String key = datasource.get(); return key == null ? \"master\" : key; } public static void setDatasource(String key) { datasource.set(key); } public static void clean() { datasource.remove(); } } @Configuration public class TransactionConfig { /** * \u914d\u7f6e\u52a8\u6001\u6570\u636e\u6e90 * * @param master * @param slave * @return */ @Bean public DynamicDataSource dynamic( @Autowired @Qualifier(MASTER) DataSource master, @Autowired @Qualifier(SLAVE) DataSource slave ) { Map<Object, Object> map = new HashMap<>(); map.put(MASTER, master); map.put(SLAVE, slave); DynamicDataSource routing = new DynamicDataSource(); routing.setTargetDataSources(map); routing.setDefaultTargetDataSource(master); return routing; } @Bean public PlatformTransactionManager platformTransactionManager(DynamicDataSource dataSource) { return new DataSourceTransactionManager(dataSource); } } // --------------------------------------------\u62e6\u622a\u5668\u914d\u7f6e----------------------------------------- public class DatasourceInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { before(invocation.getMethod()); Object invoke = null; try { invoke = invocation.proceed(); } finally { after(); } return invoke; } public void before(Method method) { //\u5982\u679c\u6709\u4e8b\u7269\u6ce8\u89e3\uff0c\u5219\u4f18\u5148\u4f7f\u7528\u4e8b\u7269\u6ce8\u89e3\u7684\u7279\u6027\u3002\u5982\u679c\u4e8b\u52a1\u5c5e\u6027\u4e3a\u53ea\u8bfb\u7684\uff0c\u90a3\u6beb\u65e0\u7591\u95ee\u53ef\u4ee5\u628a\u5b83\u5bf9\u6570\u636e\u7684\u8bf7\u6c42\u6253\u5230\u4ece\u5e93 Transactional transactional = method.getAnnotation(Transactional.class); if (transactional != null) { changeDatasource(transactional.readOnly() ? SLAVE : MASTER); return; } //\u8fd9\u91cc\u662f\u81ea\u5b9a\u4e49\u5c5e\u6027\uff0c\u5982\u679c\u6709\u7684\u65b9\u6cd5\u6ca1\u6709\u52a0\u4e8b\u7269\u6ce8\u89e3\uff0c\u4f46\u662f\u52a0\u4e86\u81ea\u5b9a\u4e49\u6ce8\u89e3\u7684\uff0c\u90a3\u4e48\u5c31\u4f1a\u8d70\u8fd9\u6bb5\u903b\u8f91 Datasource datasource = method.getAnnotation(Datasource.class); if (datasource != null && SLAVE.equals(datasource.value())) { changeDatasource(SLAVE); } } public void after() { // \u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e DataSourceContext.clean(); } private void changeDatasource(String type) { DataSourceContext.setDatasource(type); } } public class DatasourceMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Datasource \u548c @Transactional \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Datasource \u548c @Transactional \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Datasource.class) || method.isAnnotationPresent(Transactional.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Datasource.class) || clazz.isAnnotationPresent(Transactional.class); } } @Configuration public class AopConfig { /** * DefaultAdvisorAutoProxyCreator \u8fd9\u4e2a\u662f\u4e00\u4e2a\u53ef\u9009\u914d\u7f6e\u9879\uff0c\u5982\u679c\u5728\u4f60\u7684spring-boot\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86\u4e0b\u9762\u4efb\u610f\u4e00\u4e2a\u6ce8\u89e3\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2abean\u53ef\u4ee5\u4e0d\u7528\u914d\u7f6e * @EnableTransactionManagement * @EnableAspectJAutoProxy * @EnableCaching */ @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public DatasourceMethodPointcutAdvisor methodPointcutAdvisor(DatasourceInterceptor txInterceptor) { DatasourceMethodPointcutAdvisor advisor = new DatasourceMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public DatasourceInterceptor methodInterceptor() { return new DatasourceInterceptor(); } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/#abstractroutingdatasource","text":"\u200b \uff08\u56fe-1\uff09 \u5f53\u7a0b\u5e8f\u6267\u884cCURD\u64cd\u4f5c\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528 AbstractRoutingDataSource \u7c7b\u7684 getConnection \u65b9\u6cd5\u6765\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5 Connection \u5bf9\u8c61\uff0c\u6700\u7ec8\u901a\u8fc7\u8be5\u8fde\u63a5\u5bf9\u8c61\u6765\u8bbf\u95ee\u6570\u636e\u5e93\u3002\u800c AbstractRoutingDataSource \u8fd9\u4e2a\u62bd\u8c61\u7c7b\u5b9e\u73b0\u4e86 DataSource \u63a5\u53e3\uff0c\u540c\u65f6\u4e5f\u5b9e\u73b0\u4e86 DataSource \u63a5\u53e3\u4e0b\u7684\u4e24\u4e2a getConnection \u65b9\u6cd5\uff0c\u6e90\u7801\u5982\u4e0b\uff1a \u200b \uff08\u56fe-2\uff09 \u200b \uff08\u56fe-3\uff09 \u200b \uff08\u56fe-4\uff09 \u901a\u8fc7\u4e0a\u9762\u7684\u6e90\u7801\u53ef\u4ee5\u770b\u51fa\uff0c DataSource \u5bf9\u8c61\u6700\u7ec8\u901a\u8fc7 determineCurrentLookupKey \u8fd9\u4e2a\u65b9\u6cd5\u786e\u5b9a\u3002\u56e0\u6b64\u6211\u4eec\u5b9e\u73b0\u8be5\u65b9\u6cd5\u5c31\u53ef\u4ee5\uff0c\u6b64\u5916\uff0c\u9664\u4e86\u5b9e\u73b0\u8be5\u65b9\u6cd5\u5916\uff0c\u8fd8\u9700\u8981\u901a\u8fc7 setTargetDataSources \u65b9\u6cd5\u5c06\u6240\u6709\u7684\u6570\u636e\u6e90\u4ee5 \u7684\u5f62\u5f0f\u4fdd\u5b58\u5230\u8fd9\u4e2a\u5bf9\u8c61\u91cc\u9762\u3002 \u200b \uff08\u56fe-5\uff09 \u200b \uff08\u56fe-6\uff09 \u200b \uff08\u56fe-7\uff09 \u7531\u4e8e AbstractRoutingDataSource \u7c7b\u540c\u65f6\u8fd8\u5b9e\u73b0\u4e86 InitializingBean \u63a5\u53e3\uff0c\u56e0\u6b64\u5f53\u8fd9\u4e2abean\u5b9e\u4f8b\u5316\u5b8c\u6210\u7684\u65f6\u5019\uff0c\u4f1a\u89e6\u53d1 afterPropertiesSet \u65b9\u6cd5\u6267\u884c\uff0c\u8be5\u65b9\u6cd5\u4e3b\u8981\u65f6\u901a\u8fc7 targetDataSources \u751f\u6210 resolvedDataSources \u5bf9\u8c61\uff0c\u4ee5\u53ca\u8bbe\u7f6e\u9ed8\u8ba4\u6570\u636e\u6e90\u3002\u5728\uff08\u56fe-3\uff09\u4e2d\u7684 determineTargetDataSource \u65b9\u6cd5\u4e2d\uff0c\u4f1a\u4ece resolvedDataSources \u5bf9\u8c61\u4e2d\u83b7\u53d6 DataSource \u3002 \u200b \uff08\u56fe-8\uff09","title":"AbstractRoutingDataSource\u8be6\u89e3"},{"location":"spring/Spring%20AOP%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/#spring-aop_1","text":"\u5728\u672c\u6587\u7684\u89e3\u51b3\u65b9\u6848\u4ee3\u7801\u4e2d\u5e76\u6ca1\u6709\u4f7f\u7528\u5e38\u89c4\u7684aop\u62e6\u622a\u5668\u5199\u6cd5\uff0c\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u79cd\u3002\u56e0\u4e3a\u5728\u672c\u89e3\u51b3\u65b9\u6848\u4e2d\u9664\u4e86\u62e6\u622a\u4e86\u81ea\u5b9a\u7684 @Datasource \u6ce8\u89e3\u4e4b\u5916\uff0c\u8fd8\u62e6\u622a\u4e86 @Transactional \u6ce8\u89e3\u3002\u6211\u4eec\u90fd\u77e5\u9053 @Transactional \u6ce8\u89e3\u5199\u5728\u63a5\u53e3\u65b9\u6cd5\u548c\u5b9e\u73b0\u7c7b\u65b9\u6cd5\u4e0a\u662f\u90fd\u53ef\u4ee5\u751f\u6548\u7684\uff0c\u90a3\u4e0b\u9762\u8fd9\u79cd\u666e\u901a\u7684aop\u5199\u6cd5\u5bf9\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u662f\u65e0\u6cd5\u62e6\u622a\u7684\uff0c\u56e0\u6b64\u624d\u4f7f\u7528\u4e86\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668\u7684\u5199\u6cd5\u3002 \u5bf9\u4e8e\u5982\u4f55\u89e3\u51b3spring aop\u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u95ee\u9898\uff0c\u5728 Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u8fd9\u7bc7\u6587\u7ae0\u91cc\u9762\u6709\u8be6\u7ec6\u8bf4\u660e\u3002 @Aspect @Component @EnableAspectJAutoProxy public class DataSourceAspect { @Around(\"@annotation(com.xxx.Datasource)\") public Object around(ProceedingJoinPoint joinPoint) throws Throwable { // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u8bbe\u7f6e\u6570\u636e\u6e90... doingSomthingBefore(); // \u6267\u884c\u4e1a\u52a1\u65b9\u6cd5 Object result = joinPoint.proceed(); // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e... doingSomthingAfter(); return result; } }","title":"spring aop\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/","text":"Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u6700\u8fd1\u5728spring-boot\u9879\u76ee\u4e2d\u505amysql\u8bfb\u5199\u5206\u79bb\u65f6\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u901a\u8fc7\u5e38\u89c4\u7684spring aop\u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u3002\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u662f \u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u3002 \u672c\u6587\u5c06\u5148\u7ed9\u51fa\u5177\u4f53\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u7136\u540e\u518d\u6df1\u5165\u5206\u6790\u5176\u4e2d\u539f\u7406\u3002 \u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 1\u3001\u524d\u7f6e\u51c6\u5907\u4ee3\u7801\uff0c\u542f\u52a8\u7c7b\uff0c\u4e1a\u52a1\u4ee3\u7801\uff0c\u81ea\u5b9a\u4e49\u6ce8\u89e3\u7b49\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u6362\u6210\u81ea\u5df1\u7684\u3002 @SpringBootApplication public class DefaultProxyCreatorApplication { public static void main(String[] args) { SpringApplication.run(DefaultProxyCreatorApplication.class, args); } } public interface Test2Service { /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx void a(); void b(); void c(); } @Service public class Test2ServiceImpl implements Test2Service { @Override public void a() { System.out.println(\"test2 method a\"); } /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx @Override public void b() { System.out.println(\"test2 method b\"); } @Override public void c() { System.out.println(\"test2 method c\"); } } @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.TYPE}) public @interface Tx { } 2\u3001\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\u6838\u5fc3\u4ee3\u7801 public class TxInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(String.format(\"------------%s: before----------\", name)); Object object = invocation.proceed(); System.out.println(String.format(\"------------%s: after----------\", name)); return object; } } public class TxMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Tx.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Tx.class); } } 3\u3001\u914d\u7f6e\u65b9\u6cd5\u62e6\u622a\u5668\uff0c\u4f7f\u5176\u751f\u6548 @Configuration public class MethodInterceptorConfig { @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public TxInterceptor methodInterceptor() { return new TxInterceptor(); } } 4\u3001\u5355\u5143\u6d4b\u8bd5\uff0c\u529f\u80fd\u9a8c\u8bc1 @SpringBootTest class TxInterceptorTest { @Autowired private Test2Service test2Service; @Test void test1() { test2Service.a(); System.out.println(\"\\n\"); test2Service.b(); System.out.println(\"\\n\"); test2Service.c(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230 service#a \u548c service#b \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u88ab\u62e6\u622a\u5230\u4e86\u3002\u5176\u4e2d\u65b9\u6cd5 a \u7684\u6ce8\u89e3\u5728\u63a5\u53e3\u4e0a\uff0c\u65b9\u6cd5b\u7684\u6ce8\u89e3\u5728\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u89c1\u95ee\u9898\u5df2\u89e3\u51b3\u3002 \u539f\u7406\u5256\u6790 \u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u4e3a\u4ec0\u4e48\u5931\u6548 @Aspect @Component @EnableAspectJAutoProxy public class DataSourceAspect { @Around(\"@annotation(com.xxx.DataSource)\") public Object around(ProceedingJoinPoint joinPoint) throws Throwable { // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u8bbe\u7f6e\u6570\u636e\u6e90... doingSomthingBefore(); // \u6267\u884c\u4e1a\u52a1\u65b9\u6cd5 Object result = joinPoint.proceed(); // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e... doingSomthingAfter(); return result; } } \u8fd9\u662f\u4e00\u6bb5\u975e\u5e38\u666e\u901a\u7684spring aop\u62e6\u622a\u5668\u4ee3\u7801\uff0c\u7531\u4e8e\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u4e8b\u52a1\u6ce8\u89e3\u5168\u90e8\u90fd\u662f\u5199\u5728\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4e5f\u5c31\u4e60\u60ef\u6027\u7684\u628a\u6ce8\u89e3 @DataSource \u5199\u5728\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0a\uff0c\u4e00\u8c03\u8bd5\u4ee3\u7801\uff0c\u8fd9\u65f6\u5019\u53d1\u73b0spring aop\u6839\u672c\u5c31\u4e0d\u9e1f\u4f60\uff0c\u62e6\u622a\u5668\u6ca1\u751f\u6548\u3002\u7f51\u4e0a\u4e00\u901a\u641c\u7d22\u540e\uff0c\u53d1\u73b0\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u4eba\u975e\u5e38\u591a\uff0c\u7b54\u6848\u4e5f\u662f\u4e94\u82b1\u516b\u95e8\uff0c\u6709\u7684\u8bf4\u662fspring-boot 1.x\u7248\u672c\u7684bug\uff0c\u5347\u7ea7\u52302.x\u7248\u672c\u5c31\u53ef\u4ee5\u4e86\u3002\u7136\u540e\u5c31\u5c41\u98a0\u5c41\u98a0\u7684\u628aspring-boot\u7248\u672c\u6362\u6210\u6700\u65b0\u7684 2.3.0.RELEASE \u7248\u672c\uff0c\u6839\u672c\u5c31\u6ca1\u7528\uff1b\u4e5f\u6709\u4eba\u5206\u6790\u8bf4aop\u4ee3\u7406\u7684\u662fspring\u7684bean\u5b9e\u4f8b\uff0c\u7136\u800c\u63a5\u53e3\u5f88\u663e\u7136\u662f\u4e0d\u80fd\u5b9e\u4f8b\u5316\u7684\uff0c\u6240\u4ee5aop\u65e0\u6cd5\u751f\u6548\u3002\u67e5\u4e86\u5f88\u591a\uff0c\u90fd\u662f\u5206\u6790\u4e3a\u4ec0\u4e48\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u53ef\u80fd\u662f\u6211\u641c\u7d22\u7684\u5173\u952e\u5b57\u4e0d\u5bf9\u7684\u539f\u56e0\uff0c\u5c31\u6ca1\u600e\u4e48\u770b\u5230\u6709\u89e3\u51b3\u65b9\u6848\u7684\u5e16\u5b50\u3002 \u540c\u6837\u7684\u5199\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684 @Transactional \u4e3a\u4ec0\u4e48\u5c31\u80fd\u751f\u6548\u5462\uff08\u81f3\u4e8espring\u4e8b\u52a1\u539f\u7406\u7684\u89e3\u6790\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u4e86\uff0c\u7f51\u4e0a\u4e00\u5927\u628a\uff09\uff1f \u6e90\u7801 \u901a\u8fc7 @EnableTransactionManagement \u8fdb\u53bb\u770b\u4e86\u4e0bspring\u4e8b\u52a1\u7684\u6e90\u7801\uff0c \u4e0a\u56fe\u4e2d\u770b\u5230 @EnableTransactionManagement \u6ce8\u89e3\u4e0a\u5bfc\u5165\u4e86\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u77e5\u9053\u5e72\u4ec0\u4e48\u7684\uff0c\u70b9\u8fdb\u53bb\u770b\u770b TransactionManagementConfigurationSelector \u7ee7\u627f\u4e86 AdviceModeImportSelector \uff0c\u5c31\u662f\u60f3\u52a0\u8f7d\u522b\u7684\u7c7b\uff0c\u5728 selectImports \u65b9\u6cd5\u8fd4\u56de\u7684\u5185\u5bb9\u5c31\u662f\u8981\u52a0\u8f7d\u7684\u7c7b\uff0c\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u5206\u522b\u52a0\u8f7d\u4e86 AutoProxyRegistrar \uff0c ProxyTransactionManagementConfiguration \u8fd9\u4e24\u4e2a\u7c7b\uff0c\u901a\u8fc7\u540d\u5b57\u80fd\u731c\u51fa ProxyTransactionManagementConfiguration \u8fd9\u4e2a\u7c7b\u5e94\u8be5\u662f\u4e00\u4e2a\u4e8b\u52a1\u76f8\u5173\u7684\u914d\u7f6e\u7c7b\uff0c\u7ee7\u7eed\u70b9\u8fdb\u53bb\u770b\u4e0b \u70b9\u5f00 ProxyTransactionManagementConfiguration \u7c7b\u540e\uff0c\u679c\u7136\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff0c\u5728\u8fd9\u4e2a\u7c7b\u4e2d\u5176\u5b9e\u5b83\u4e3b\u8981\u662f\u5e72\u4e86\u4e00\u4ef6\u4e8b\uff0c\u914d\u7f6espring\u7684 advisor \uff08\u589e\u5f3a\u5668\uff09\u3002\u8fd9\u91cc\u7684 TransactionAttributeSource \u8868\u793a\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u5b83\u662f\u7528\u6765\u751f\u6210\u4e8b\u52a1\u76f8\u5173\u7684\u5c5e\u6027\u7684\uff0c\u6bd4\u5982\u4ec0\u4e48\u4e8b\u52a1\u662f\u5426\u4e3a\u53ea\u8bfb\u554a\uff0c\u4f20\u64ad\u7279\u6027\u554a\u7b49\u7b49\uff0c\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u6765\u83b7\u53d6\u7684\uff0c\u90a3\u8fd9\u4e2a\u63a5\u53e3\u6709\u5f88\u591a\u5b9e\u73b0\u7c7b\uff0c\u5982\u56fe\uff1a \u8fd9\u91cc\u9ed8\u8ba4\u662f\u7528\u7684 AnnotationTransactionAttributeSource \u6ce8\u89e3\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u662f\u7528\u6765\u5904\u7406 @Transactional \u6ce8\u89e3\u7684\u3002 \u521a\u521a\u7684 ProxyTransactionManagementConfiguration \u914d\u7f6e\u7c7b\u4e2d\u8fd8\u6709\u4e00\u4e2abean\uff0c TransactionInterceptor \u4e8b\u52a1\u62e6\u622a\u5668\uff0c\u8fd9\u4e2a\u7c7b\u624d\u662f\u771f\u6b63\u7684\u5904\u7406\u4e8b\u52a1\u76f8\u5173\u7684\u4e00\u5207\u903b\u8f91\u7684\uff0c\u53ef\u4ee5\u770b\u4e0b\u4e00\u5b83\u7684\u7c7b\u56fe\u7ed3\u6784\uff0c \u53ef\u4ee5\u770b\u5230 TransactionInterceptor \u7ee7\u627f\u4e86 TransactionAspectSupport \u7c7b\u548c\u5b9e\u73b0\u4e86 MethodInterceptor \u63a5\u53e3\uff0c\u5176\u4e2d TransactionAspectSupport \u662f\u63d0\u4f9b\u4e8b\u52a1\u652f\u6301\u7684\uff0c MethodInterceptor \u662f\u7528\u6765\u62e6\u622a\u52a0\u4e86 @Transactional \u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\uff0c\u804c\u8d23\u5206\u660e\u3002\u90a3\u8fd9\u91cc\u77e5\u9053\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u62e6\u622a\u5668\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u4e00\u4e9b\u9a9a\u64cd\u4f5c\u4e86\u3002 \u8fd9\u91cc\u6211\u4eec\u5148\u56de\u5230\u6211\u4eec\u7684\u9700\u6c42\u70b9\u4e0a\uff0c\u6211\u4eec\u8981\u505a\u7684\u662f\u5b9e\u73b0\u7a0b\u5e8f\u81ea\u52a8\u8bfb\u5199\u5206\u79bb\uff0c\u90a3\u4e48\u8bfb\u5199\u5206\u79bb\u7684\u672c\u8d28\u662f\u5565\uff0c\u4e0d\u5c31\u662f\u5207\u6362\u6570\u636e\u6e90\u4e48\uff0c\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u600e\u4e48\u5b9e\u73b0\u591a\u6570\u636e\u6e90\u5207\u6362\u7684\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u52a8\u6001\u6570\u636e\u6e90\u65b9\u6848\u7f51\u4e0a\u53c8\u662f\u4e00\u5927\u628a\u7684\uff0c\u4f46\u662f\u6709\u7684\u662f\u6709\u5751\u7684\uff0c\u6bd4\u5982\u4e3a\u4ec0\u4e48\u4f60\u914d\u4e86\u52a8\u6001\u6570\u636e\u6e90\u52a0\u4e0a\u4e8b\u52a1\u6ce8\u89e3\u4e4b\u540e\u5c31\u65e0\u6548\u4e86\u5462\uff0c\u53bb\u6389\u4e8b\u52a1\u6ce8\u89e3\u53c8\u53ef\u4ee5\u4e86\uff0c\u662f\u4e0d\u662f\u5f88\u86cb\u75bc\u3002\u52a8\u6001\u5207\u6362\u6570\u636e\u6e90\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff1a \u5728\u9002\u5f53\u7684\u65f6\u673a\u5207\u6362\u6570\u636e\u6e90 \uff09\u3002\u90a3\u6211\u8fd9\u91cc\u7684\u9047\u5230\u7684\u95ee\u9898\u662f \u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u4e0a\u7684\u6ce8\u89e3 \uff08\u5176\u5b9e\u4f60\u628a\u6ce8\u89e3\u653e\u5230\u5b9e\u73b0\u7c7b\u7684\u65b9\u6cd5\u4e0a\uff0c\u5565\u4e8b\u513f\u90fd\u6ca1\u4e86\u3002\u4f46\u6211\u8fd9\u4e2a\u4eba\u5c31\u662f\u559c\u6b22\u6760\uff0c\u975e\u8981\u653e\u5230\u63a5\u53e3\u65b9\u6cd5\u4e0a\uff09 \u90a3\u600e\u4e48\u641e\u5b9a\u8fd9\u4e2a\u95ee\u9898\u5462\uff0c\u5176\u5b9e\u901a\u8fc7\u4e0a\u9762\u5bf9\u4e8b\u52a1\u6e90\u7801\u7684\u7b80\u5355\u5206\u6790\u4e4b\u540e\u5927\u81f4\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a \u91cd\u5199\u4e8b\u52a1\u62e6\u622a\u5668\uff0c\u5728\u4e8b\u52a1\u5904\u7406\u7684\u524d\u540e\u52a0\u4e0a\u81ea\u5df1\u7684\u903b\u8f91\uff0c\u5207\u6362\u6570\u636e\u6e90\u3002\u7136\u540e\u5c06\u81ea\u5df1\u91cd\u5199\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u8bbe\u7f6e\u5230\u521a\u5f00\u59cb\u7684 advisor \u4e2d\u5c31\u53ef\u5df2\u4e86 \u521d\u6b65\u89e3\u51b3\u65b9\u6848 \u91cd\u5199\u4e8b\u52a1\u62e6\u622a\u5668 public class CustomInterceptor extends TransactionInterceptor { private static final long serialVersionUID = 1154144110124764905L; public CustomInterceptor(PlatformTransactionManager ptm, TransactionAttributeSource tas) { super(ptm, tas); } @Override public Object invoke(MethodInvocation invocation) throws Throwable { before(invocation.getMethod()); Object invoke = null; try { invoke = super.invoke(invocation); } finally { after(); } return invoke; } public void before(Method method) { // \u8fd9\u91cc\u90fd\u62ff\u5230method\u5bf9\u8c61\u4e86\uff0c\u90a3\u901a\u8fc7\u53cd\u5c04\u53ef\u4ee5\u505a\u7684\u4e8b\u60c5\u5c31\u5f88\u591a\u4e86\uff0c\u80fd\u5230\u8fd9\u91cc\u6765\u7684\uff0c\u90a3\u65b9\u6cd5\u4e0a\u9762\u80af\u5b9a\u662f\u6709Transactional\u6ce8\u89e3\u7684\uff0c\u62ff\u5230\u5b83\u5e76\u83b7\u53d6\u76f8\u5173\u5c5e\u6027\uff0c\u5982\u679c\u4e8b\u52a1\u5c5e\u6027\u4e3a\u53ea\u8bfb\u7684\uff0c\u90a3\u6beb\u65e0\u7591\u95ee\u53ef\u4ee5\u628a\u5b83\u5bf9\u6570\u636e\u7684\u8bf7\u6c42\u6253\u5230\u4ece\u5e93 Transactional transactional = method.getAnnotation(Transactional.class); boolean readOnly = transactional.readOnly(); if (readOnly) { // \u53ea\u8bfb\u4e8b\u52a1\uff0c\u5207\u6362\u5230mysql\u7684\u4ece\u5e93 changeDatasource(DatasourceType.SLAVE); } else { // \u975e\u53ea\u8bfb\u4e8b\u52a1\uff0c\u5207\u6362\u5230mysql\u4e3b\u5e93 changeDatasource(DatasourceType.MASTER); } } public void after() { // \u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e changeDatasource(DatasourceType.CLEAN); } private void changeDatasource(DatasourceType type) { //\u6a21\u62df\u6570\u636e\u6e90\u5207\u6362 System.out.println(\"\\n\\n\\n===========================================================\"); System.out.println(\"Datasource = \" + type); System.out.println(\"===========================================================\\n\\n\\n\"); } } enum DatasourceType { MASTER, SLAVE, CLEAN } \u8bbe\u7f6e\u62e6\u622a\u5668 \u5c06\u81ea\u5df1\u91cd\u5199\u540e\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u8bbe\u7f6e\u5230 advisor \u4e2d\uff0c\u5c06\u5b83\u9ed8\u8ba4\u7684\u8986\u76d6\u6389 @Configuration public class TransactionConfig implements InitializingBean, BeanFactoryAware { @Override public void afterPropertiesSet() throws Exception { // \u83b7\u53d6\u589e\u5f3a\u5668 BeanFactoryTransactionAttributeSourceAdvisor advisor = factory.getBean(BeanFactoryTransactionAttributeSourceAdvisor.class); PlatformTransactionManager platformTransactionManager = factory.getBean(PlatformTransactionManager.class); // spring\u539f\u6709\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u7528\u7684\u5c31\u662f\u6ce8\u89e3\u7c7b\u578b\u7684\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u90a3\u6211\u4eec\u4e5f\u7528\u8fd9\u4e2a\uff0c\u4e0d\u7136\u4f60\u7684\u4e8b\u52a1\u6ce8\u89e3\u5c31\u5931\u6548\u4e86\uff0c\u90a3\u4e0d\u5c31\u767d\u5fd9\u6d3b\u4e86\u4e48 TransactionAttributeSource attributeSource = new AnnotationTransactionAttributeSource(); // \u5b9e\u4f8b\u5316\u81ea\u5df1\u7684\u4e8b\u52a1\u62e6\u622a\u5668 CustomInterceptor advice = new CustomInterceptor(platformTransactionManager, attributeSource); // \u628a\u5b83\u539f\u6709\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u66ff\u6362\u6210\u81ea\u5df1\u7684\uff0c\u56e0\u4e3a\u4f60\u91cd\u5199\u7684\u4e8b\u52a1\u62e6\u622a\u662f\u7ee7\u627f\u5b83\u539f\u6709\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u641e advisor.setAdvice(advice); } private DefaultListableBeanFactory factory; @Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException { if (beanFactory instanceof DefaultListableBeanFactory) { this.factory = (DefaultListableBeanFactory) beanFactory; } } } \u5230\u8fd9\u91cc\uff0c\u5bf9\u4e8e\u63a5\u53e3\u4e0a\u6709\u4e8b\u52a1\u6ce8\u89e3\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u52a8\u6001\u7684\u5207\u6362\u5b83\u7684\u6570\u636e\u6e90\u4e86\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u4e0d\u7528\u81ea\u5b9a\u6ce8\u89e3\uff0c\u76f4\u63a5\u7528spring\u81ea\u5e26\u7684\u6ce8\u89e3\u5c31\u597d\u3002 \u90a3\u7ecf\u8fc7\u4e0a\u9762\u7684\u4e00\u987f\u64cd\u4f5c\u540e\uff0c\u7ec8\u4e8e\u53ef\u4ee5\u5728\u4e8b\u52a1\u7684\u524d\u540e\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u4e86\u3002 \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u6765\u5c06\uff0c\u8fd9\u4e2a\u65b9\u6848\u786e\u5b9e\u89e3\u51b3\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u95ee\u9898\uff0c\u4f46\u4e5f\u53ea\u662f\u4ec5\u9650\u4e8espring\u7684\u4e8b\u52a1\u6ce8\u89e3\u3002\u90a3\u5bf9\u4e8e\u672c\u6587\u6807\u9898\u6240\u8ff0\u7684\u95ee\u9898\uff0c\u5728\u672c\u8d28\u4e0a\u5e76\u6ca1\u6709\u5f97\u5230\u89e3\u51b3\uff0c\u56e0\u4e3a\u4e8b\u52a1\u8fd9\u91cc\u662fspring-transaction\u6a21\u5757\u5b9e\u73b0\u7684\u6ce8\u89e3\u5904\u7406\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u662f\u7528\u4e86\u4e00\u79cd\u6295\u673a\u53d6\u5de7\u7684\u65b9\u6cd5\u8fbe\u5230\u4e86\u76ee\u7684\u800c\u5df2\u3002 \u901a\u7528\u89e3\u51b3\u65b9\u6848 \u6240\u8c13\u901a\u7528\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u6a21\u4effspring-transaction\u5199\u4e00\u4e2a\u81ea\u5df1\u7684\u65b9\u6cd5\u62e6\u622a\u5668\uff0c\u90a3\u8fd9\u91cc\u5c31\u4e0d\u9650\u4e8e\u6ce8\u89e3\u4e86\uff0c\u901a\u8fc7\u6ce8\u89e3\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u4e0d\u8fc7\u9664\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7spring aop\u62e6\u622a\u5916\uff0c\u5176\u4ed6\u7684\u65b9\u5f0f\u597d\u50cf\u90fd\u53ef\u4ee5\u901a\u8fc7spring aop\u76f4\u63a5\u5b9e\u73b0\u3002 \u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\u62e6\u622a\u5668\uff1a \u521b\u5efa ProxyFactoryBean \u9700\u8981\u6709\u4e00\u4e2a Advisor \u5bf9\u8c61\uff08 AbstractBeanFactoryPointcutAdvisor \uff09\uff0c\u7136\u540e\u628a\u8fd9\u4e2aadvisor\u5bf9\u8c61\u8bbe\u7f6e\u5230 ProxyFactoryBean \u4e2d \u9700\u8981\u6709\u4e00\u4e2a PointCut \u5bf9\u8c61\uff08 StaticMethodMatcherPointcut \uff09\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 advisor \u5bf9\u8c61\u4e2d \u9700\u8981\u6709\u4e00\u4e2a Advice \u5bf9\u8c61\uff08 MethodInterceptor \uff09\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 advisor \u5bf9\u8c61\u4e2d demo /** * \u4e1a\u52a1\u63a5\u53e3 */ interface Service { void test1(); /** * \u6253\u4e0a\u6807\u8bb0\uff0c\u9700\u8981\u88ab\u62e6\u622a\u7684\u65b9\u6cd5 */ @DataSource void test2(); } /** * \u4e1a\u52a1\u5b9e\u73b0 */ class ServiceImpl implements Service { @Override public void test1() { System.out.println(\"hello world\"); } @Override public void test2() { System.out.println(\"I'm doing something in DB\"); } } /** * \u65b9\u6cd5\u62e6\u622a\u6807\u8bb0 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE, ElementType.METHOD}) @interface DataSource { } class DataSourceAdvisor extends AbstractBeanFactoryPointcutAdvisor { private DataSourcePointCut pointCut; public void setPointCut(DataSourcePointCut pointCut) { this.pointCut = pointCut; } @Override public Pointcut getPointcut() { return pointCut; } } class DataSourceInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(\"==============\" + name + \" before ================\"); Object result = invocation.proceed(); System.out.println(\"==============\" + name + \" after ================\"); return result; } } class DataSourcePointCut extends StaticMethodMatcherPointcut { /** * \u65b9\u6cd5\u5339\u914d\u5668\uff0c\u8fd9\u4e2a\u624d\u662f\u771f\u6b63\u8d77\u4f5c\u7528\u7684\u4e3b * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return method.isAnnotationPresent(DataSource.class); } } /** * \u5355\u5143\u6d4b\u8bd5 */ public class MethodInterceptorTest { private ProxyFactoryBean proxyFactoryBean; @BeforeEach public void before() { Service service = new ServiceImpl(); ProxyFactoryBean pfb = new ProxyFactoryBean(); // \u8bbe\u7f6e\u54ea\u4e2a\u5bf9\u8c61\u9700\u8981\u88ab\u4ee3\u7406 pfb.setTarget(service); // \u521d\u59cb\u5316 advisor DataSourceAdvisor advisor = new DataSourceAdvisor(); // \u8bbe\u7f6epointcut advisor.setPointCut(new DataSourcePointCut()); // \u8bbe\u7f6e\u65b9\u6cd5\u62e6\u622a\u5668 advisor.setAdvice(new DataSourceInterceptor()); // \u5c06advisor\u6dfb\u52a0\u5230\u4ee3\u7406\u4e2d pfb.addAdvisor(advisor); proxyFactoryBean = pfb; } @Test public void test() { // \u901a\u8fc7\u4ee3\u7406\u751f\u6210 service \u5b9e\u4f8b Service proxy = (Service) proxyFactoryBean.getObject(); proxy.test1(); System.out.println(\"\\n\\n\"); proxy.test2(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230\u6210\u529f\u7684\u62e6\u622a\u5230\u4e86 service#test2 \u65b9\u6cd5\u3002\u5b9e\u73b0\u65b9\u6cd5\u62e6\u622a\u5c31\u8fd9\u4e48\u51e0\u4e2a\u6b65\u9aa4\uff0c\u8fd9\u662f\u4e00\u4e2abean\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u7684\u4f01\u4e1a\u7ea7\u5f00\u53d1\u4e2d\uff0c\u8fd9\u4e48\u5199\u5f88\u663e\u7136\u4e0d\u73b0\u5b9e\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u8981\u662f\u8fd9\u4e48\u5199\uff0c\u90a3\u5c31\u79bb\u62ce\u76d2\u996d\u4e0d\u8fdc\u4e86... Pro\u7248 \u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\u6211\u4eec\u53ea\u9700\u8981\u89e3\u51b3\u4e00\u4ef6\u4e8b\u60c5\uff0c\u90a3\u5c31\u662f\u8ba9spring\u80fd\u591f\u81ea\u52a8\u4e3a\u6211\u4eec\u521b\u5efa ProxyFactoryBean @SpringBootApplication public class DefaultProxyCreatorApplication { public static void main(String[] args) { SpringApplication.run(DefaultProxyCreatorApplication.class, args); } } public interface Test2Service { /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx void a(); void b(); void c(); } @Service public class Test2ServiceImpl implements Test2Service { @Override public void a() { System.out.println(\"test2 method a\"); } /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx @Override public void b() { System.out.println(\"test2 method b\"); } @Override public void c() { System.out.println(\"test2 method c\"); } } @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.TYPE}) public @interface Tx { } public class TxInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(String.format(\"------------%s: before----------\", name)); Object object = invocation.proceed(); System.out.println(String.format(\"------------%s: after----------\", name)); return object; } } public class TxMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Tx.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Tx.class); } } @Configuration public class AopConfig { @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public TxInterceptor methodInterceptor() { return new TxInterceptor(); } } \u521b\u5efa\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u9a8c\u8bc1\u529f\u80fd @SpringBootTest class TxInterceptorTest { @Autowired private Test2Service test2Service; @Test void test1() { test2Service.a(); System.out.println(\"\\n\"); test2Service.b(); System.out.println(\"\\n\"); test2Service.c(); } } \u5355\u5143\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230 service#a \u548c service#b \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u88ab\u62e6\u622a\u5230\u4e86\u3002\u5176\u4e2d\u65b9\u6cd5 a \u7684\u6ce8\u89e3\u5728\u63a5\u53e3\u4e0a\uff0c\u65b9\u6cd5b\u7684\u6ce8\u89e3\u5728\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u89c1\u8fd9\u5df2\u7ecf\u8fbe\u5230\u4e86\u6211\u7684\u76ee\u7684\uff0c\u6210\u529f\u7684\u62e6\u622a\u5230\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u3002 \u6ce8\u610f\u7ec6\u8282 \u90a3\u5982\u679c\u8bf4\u4ec5\u4ec5\u5c06\u4e0a\u9762\u7684\u914d\u7f6e\u4ee3\u7801\u590d\u5236\u5230\u9879\u76ee\u4e2d\u53bb\u7528\u7684\u8bdd\uff0c\u662f\u53ef\u4ee5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u6ce8\u89e3\u7684\uff0c\u4f46\u662f\u5982\u679c\u8981\u548cspring\u7684\u4e8b\u52a1\u6ce8\u89e3\u4e00\u8d77\u7528\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u8981\u5931\u671b\u4e86\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5148\u7ecf\u8fc7\u4e8b\u52a1\u7684\u62e6\u622a\uff0c\u7136\u540e\u624d\u5230\u4f60\u7684\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\uff0c\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u7b80\u5355\uff0c\u5c06advisor\u8bbe\u7f6e\u4e00\u4e2a\u6267\u884c\u987a\u5e8f\u5c31\u53ef\u4ee5\u4e86 @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); advisor.setOrder(1);//\u8bbe\u7f6e\u987a\u5e8f\uff0c\u503c\u8d8a\u5c0f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u4e5f\u5c31\u662f\u8d8a\u88ab\u5148\u6267\u884c return advisor; } advisor.setOrder(1) \u90a3\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u53d6\u7684\u5462\uff0c\u96be\u9053\u8bbe\u7f6e\u62101\u5c31\u4e00\u5b9a\u4f1a\u88ab\u5148\u6267\u884c\u4e48\uff0c \u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230spring\u4e8b\u52a1\u7684advisor\u6267\u884c\u987a\u5e8f\u503c\u4e3aInteger\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u4e5f\u5c31\u662f\u4f60\u968f\u4fbf\u8bbe\u7f6e\u4e00\u4e2a\u503c\uff08\u53ea\u8981\u5b83\u4e0d\u662fInteger.MAX_VALUE\uff09\uff0c\u5b83\u90fd\u4f1a\u6bd4spring\u4e8b\u52a1\u62e6\u622a\u5668\u5148\u6267\u884c\u3002","title":"Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#spring-aop","text":"\u6700\u8fd1\u5728spring-boot\u9879\u76ee\u4e2d\u505amysql\u8bfb\u5199\u5206\u79bb\u65f6\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u901a\u8fc7\u5e38\u89c4\u7684spring aop\u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u3002\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u662f \u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668 \u3002 \u672c\u6587\u5c06\u5148\u7ed9\u51fa\u5177\u4f53\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u7136\u540e\u518d\u6df1\u5165\u5206\u6790\u5176\u4e2d\u539f\u7406\u3002","title":"Spring AOP\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_1","text":"","title":"\u81ea\u5b9a\u4e49\u65b9\u6cd5\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#1","text":"@SpringBootApplication public class DefaultProxyCreatorApplication { public static void main(String[] args) { SpringApplication.run(DefaultProxyCreatorApplication.class, args); } } public interface Test2Service { /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx void a(); void b(); void c(); } @Service public class Test2ServiceImpl implements Test2Service { @Override public void a() { System.out.println(\"test2 method a\"); } /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx @Override public void b() { System.out.println(\"test2 method b\"); } @Override public void c() { System.out.println(\"test2 method c\"); } } @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.TYPE}) public @interface Tx { }","title":"1\u3001\u524d\u7f6e\u51c6\u5907\u4ee3\u7801\uff0c\u542f\u52a8\u7c7b\uff0c\u4e1a\u52a1\u4ee3\u7801\uff0c\u81ea\u5b9a\u4e49\u6ce8\u89e3\u7b49\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u6362\u6210\u81ea\u5df1\u7684\u3002"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#2","text":"public class TxInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(String.format(\"------------%s: before----------\", name)); Object object = invocation.proceed(); System.out.println(String.format(\"------------%s: after----------\", name)); return object; } } public class TxMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Tx.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Tx.class); } }","title":"2\u3001\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\u6838\u5fc3\u4ee3\u7801"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#3","text":"@Configuration public class MethodInterceptorConfig { @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public TxInterceptor methodInterceptor() { return new TxInterceptor(); } }","title":"3\u3001\u914d\u7f6e\u65b9\u6cd5\u62e6\u622a\u5668\uff0c\u4f7f\u5176\u751f\u6548"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#4","text":"@SpringBootTest class TxInterceptorTest { @Autowired private Test2Service test2Service; @Test void test1() { test2Service.a(); System.out.println(\"\\n\"); test2Service.b(); System.out.println(\"\\n\"); test2Service.c(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230 service#a \u548c service#b \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u88ab\u62e6\u622a\u5230\u4e86\u3002\u5176\u4e2d\u65b9\u6cd5 a \u7684\u6ce8\u89e3\u5728\u63a5\u53e3\u4e0a\uff0c\u65b9\u6cd5b\u7684\u6ce8\u89e3\u5728\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u89c1\u95ee\u9898\u5df2\u89e3\u51b3\u3002","title":"4\u3001\u5355\u5143\u6d4b\u8bd5\uff0c\u529f\u80fd\u9a8c\u8bc1"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_2","text":"","title":"\u539f\u7406\u5256\u6790"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_3","text":"@Aspect @Component @EnableAspectJAutoProxy public class DataSourceAspect { @Around(\"@annotation(com.xxx.DataSource)\") public Object around(ProceedingJoinPoint joinPoint) throws Throwable { // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u8bbe\u7f6e\u6570\u636e\u6e90... doingSomthingBefore(); // \u6267\u884c\u4e1a\u52a1\u65b9\u6cd5 Object result = joinPoint.proceed(); // \u4e1a\u52a1\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e... doingSomthingAfter(); return result; } } \u8fd9\u662f\u4e00\u6bb5\u975e\u5e38\u666e\u901a\u7684spring aop\u62e6\u622a\u5668\u4ee3\u7801\uff0c\u7531\u4e8e\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u4e8b\u52a1\u6ce8\u89e3\u5168\u90e8\u90fd\u662f\u5199\u5728\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4e5f\u5c31\u4e60\u60ef\u6027\u7684\u628a\u6ce8\u89e3 @DataSource \u5199\u5728\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0a\uff0c\u4e00\u8c03\u8bd5\u4ee3\u7801\uff0c\u8fd9\u65f6\u5019\u53d1\u73b0spring aop\u6839\u672c\u5c31\u4e0d\u9e1f\u4f60\uff0c\u62e6\u622a\u5668\u6ca1\u751f\u6548\u3002\u7f51\u4e0a\u4e00\u901a\u641c\u7d22\u540e\uff0c\u53d1\u73b0\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u4eba\u975e\u5e38\u591a\uff0c\u7b54\u6848\u4e5f\u662f\u4e94\u82b1\u516b\u95e8\uff0c\u6709\u7684\u8bf4\u662fspring-boot 1.x\u7248\u672c\u7684bug\uff0c\u5347\u7ea7\u52302.x\u7248\u672c\u5c31\u53ef\u4ee5\u4e86\u3002\u7136\u540e\u5c31\u5c41\u98a0\u5c41\u98a0\u7684\u628aspring-boot\u7248\u672c\u6362\u6210\u6700\u65b0\u7684 2.3.0.RELEASE \u7248\u672c\uff0c\u6839\u672c\u5c31\u6ca1\u7528\uff1b\u4e5f\u6709\u4eba\u5206\u6790\u8bf4aop\u4ee3\u7406\u7684\u662fspring\u7684bean\u5b9e\u4f8b\uff0c\u7136\u800c\u63a5\u53e3\u5f88\u663e\u7136\u662f\u4e0d\u80fd\u5b9e\u4f8b\u5316\u7684\uff0c\u6240\u4ee5aop\u65e0\u6cd5\u751f\u6548\u3002\u67e5\u4e86\u5f88\u591a\uff0c\u90fd\u662f\u5206\u6790\u4e3a\u4ec0\u4e48\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u53ef\u80fd\u662f\u6211\u641c\u7d22\u7684\u5173\u952e\u5b57\u4e0d\u5bf9\u7684\u539f\u56e0\uff0c\u5c31\u6ca1\u600e\u4e48\u770b\u5230\u6709\u89e3\u51b3\u65b9\u6848\u7684\u5e16\u5b50\u3002 \u540c\u6837\u7684\u5199\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684 @Transactional \u4e3a\u4ec0\u4e48\u5c31\u80fd\u751f\u6548\u5462\uff08\u81f3\u4e8espring\u4e8b\u52a1\u539f\u7406\u7684\u89e3\u6790\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u4e86\uff0c\u7f51\u4e0a\u4e00\u5927\u628a\uff09\uff1f","title":"\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u4e3a\u4ec0\u4e48\u5931\u6548"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_4","text":"\u901a\u8fc7 @EnableTransactionManagement \u8fdb\u53bb\u770b\u4e86\u4e0bspring\u4e8b\u52a1\u7684\u6e90\u7801\uff0c \u4e0a\u56fe\u4e2d\u770b\u5230 @EnableTransactionManagement \u6ce8\u89e3\u4e0a\u5bfc\u5165\u4e86\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u77e5\u9053\u5e72\u4ec0\u4e48\u7684\uff0c\u70b9\u8fdb\u53bb\u770b\u770b TransactionManagementConfigurationSelector \u7ee7\u627f\u4e86 AdviceModeImportSelector \uff0c\u5c31\u662f\u60f3\u52a0\u8f7d\u522b\u7684\u7c7b\uff0c\u5728 selectImports \u65b9\u6cd5\u8fd4\u56de\u7684\u5185\u5bb9\u5c31\u662f\u8981\u52a0\u8f7d\u7684\u7c7b\uff0c\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u5206\u522b\u52a0\u8f7d\u4e86 AutoProxyRegistrar \uff0c ProxyTransactionManagementConfiguration \u8fd9\u4e24\u4e2a\u7c7b\uff0c\u901a\u8fc7\u540d\u5b57\u80fd\u731c\u51fa ProxyTransactionManagementConfiguration \u8fd9\u4e2a\u7c7b\u5e94\u8be5\u662f\u4e00\u4e2a\u4e8b\u52a1\u76f8\u5173\u7684\u914d\u7f6e\u7c7b\uff0c\u7ee7\u7eed\u70b9\u8fdb\u53bb\u770b\u4e0b \u70b9\u5f00 ProxyTransactionManagementConfiguration \u7c7b\u540e\uff0c\u679c\u7136\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff0c\u5728\u8fd9\u4e2a\u7c7b\u4e2d\u5176\u5b9e\u5b83\u4e3b\u8981\u662f\u5e72\u4e86\u4e00\u4ef6\u4e8b\uff0c\u914d\u7f6espring\u7684 advisor \uff08\u589e\u5f3a\u5668\uff09\u3002\u8fd9\u91cc\u7684 TransactionAttributeSource \u8868\u793a\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u5b83\u662f\u7528\u6765\u751f\u6210\u4e8b\u52a1\u76f8\u5173\u7684\u5c5e\u6027\u7684\uff0c\u6bd4\u5982\u4ec0\u4e48\u4e8b\u52a1\u662f\u5426\u4e3a\u53ea\u8bfb\u554a\uff0c\u4f20\u64ad\u7279\u6027\u554a\u7b49\u7b49\uff0c\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u6765\u83b7\u53d6\u7684\uff0c\u90a3\u8fd9\u4e2a\u63a5\u53e3\u6709\u5f88\u591a\u5b9e\u73b0\u7c7b\uff0c\u5982\u56fe\uff1a \u8fd9\u91cc\u9ed8\u8ba4\u662f\u7528\u7684 AnnotationTransactionAttributeSource \u6ce8\u89e3\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u662f\u7528\u6765\u5904\u7406 @Transactional \u6ce8\u89e3\u7684\u3002 \u521a\u521a\u7684 ProxyTransactionManagementConfiguration \u914d\u7f6e\u7c7b\u4e2d\u8fd8\u6709\u4e00\u4e2abean\uff0c TransactionInterceptor \u4e8b\u52a1\u62e6\u622a\u5668\uff0c\u8fd9\u4e2a\u7c7b\u624d\u662f\u771f\u6b63\u7684\u5904\u7406\u4e8b\u52a1\u76f8\u5173\u7684\u4e00\u5207\u903b\u8f91\u7684\uff0c\u53ef\u4ee5\u770b\u4e0b\u4e00\u5b83\u7684\u7c7b\u56fe\u7ed3\u6784\uff0c \u53ef\u4ee5\u770b\u5230 TransactionInterceptor \u7ee7\u627f\u4e86 TransactionAspectSupport \u7c7b\u548c\u5b9e\u73b0\u4e86 MethodInterceptor \u63a5\u53e3\uff0c\u5176\u4e2d TransactionAspectSupport \u662f\u63d0\u4f9b\u4e8b\u52a1\u652f\u6301\u7684\uff0c MethodInterceptor \u662f\u7528\u6765\u62e6\u622a\u52a0\u4e86 @Transactional \u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\uff0c\u804c\u8d23\u5206\u660e\u3002\u90a3\u8fd9\u91cc\u77e5\u9053\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u62e6\u622a\u5668\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u4e00\u4e9b\u9a9a\u64cd\u4f5c\u4e86\u3002 \u8fd9\u91cc\u6211\u4eec\u5148\u56de\u5230\u6211\u4eec\u7684\u9700\u6c42\u70b9\u4e0a\uff0c\u6211\u4eec\u8981\u505a\u7684\u662f\u5b9e\u73b0\u7a0b\u5e8f\u81ea\u52a8\u8bfb\u5199\u5206\u79bb\uff0c\u90a3\u4e48\u8bfb\u5199\u5206\u79bb\u7684\u672c\u8d28\u662f\u5565\uff0c\u4e0d\u5c31\u662f\u5207\u6362\u6570\u636e\u6e90\u4e48\uff0c\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u600e\u4e48\u5b9e\u73b0\u591a\u6570\u636e\u6e90\u5207\u6362\u7684\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u52a8\u6001\u6570\u636e\u6e90\u65b9\u6848\u7f51\u4e0a\u53c8\u662f\u4e00\u5927\u628a\u7684\uff0c\u4f46\u662f\u6709\u7684\u662f\u6709\u5751\u7684\uff0c\u6bd4\u5982\u4e3a\u4ec0\u4e48\u4f60\u914d\u4e86\u52a8\u6001\u6570\u636e\u6e90\u52a0\u4e0a\u4e8b\u52a1\u6ce8\u89e3\u4e4b\u540e\u5c31\u65e0\u6548\u4e86\u5462\uff0c\u53bb\u6389\u4e8b\u52a1\u6ce8\u89e3\u53c8\u53ef\u4ee5\u4e86\uff0c\u662f\u4e0d\u662f\u5f88\u86cb\u75bc\u3002\u52a8\u6001\u5207\u6362\u6570\u636e\u6e90\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff1a \u5728\u9002\u5f53\u7684\u65f6\u673a\u5207\u6362\u6570\u636e\u6e90 \uff09\u3002\u90a3\u6211\u8fd9\u91cc\u7684\u9047\u5230\u7684\u95ee\u9898\u662f \u65e0\u6cd5\u62e6\u622a\u63a5\u53e3\u4e0a\u7684\u6ce8\u89e3 \uff08\u5176\u5b9e\u4f60\u628a\u6ce8\u89e3\u653e\u5230\u5b9e\u73b0\u7c7b\u7684\u65b9\u6cd5\u4e0a\uff0c\u5565\u4e8b\u513f\u90fd\u6ca1\u4e86\u3002\u4f46\u6211\u8fd9\u4e2a\u4eba\u5c31\u662f\u559c\u6b22\u6760\uff0c\u975e\u8981\u653e\u5230\u63a5\u53e3\u65b9\u6cd5\u4e0a\uff09 \u90a3\u600e\u4e48\u641e\u5b9a\u8fd9\u4e2a\u95ee\u9898\u5462\uff0c\u5176\u5b9e\u901a\u8fc7\u4e0a\u9762\u5bf9\u4e8b\u52a1\u6e90\u7801\u7684\u7b80\u5355\u5206\u6790\u4e4b\u540e\u5927\u81f4\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a \u91cd\u5199\u4e8b\u52a1\u62e6\u622a\u5668\uff0c\u5728\u4e8b\u52a1\u5904\u7406\u7684\u524d\u540e\u52a0\u4e0a\u81ea\u5df1\u7684\u903b\u8f91\uff0c\u5207\u6362\u6570\u636e\u6e90\u3002\u7136\u540e\u5c06\u81ea\u5df1\u91cd\u5199\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u8bbe\u7f6e\u5230\u521a\u5f00\u59cb\u7684 advisor \u4e2d\u5c31\u53ef\u5df2\u4e86","title":"\u6e90\u7801"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_5","text":"","title":"\u521d\u6b65\u89e3\u51b3\u65b9\u6848"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_6","text":"public class CustomInterceptor extends TransactionInterceptor { private static final long serialVersionUID = 1154144110124764905L; public CustomInterceptor(PlatformTransactionManager ptm, TransactionAttributeSource tas) { super(ptm, tas); } @Override public Object invoke(MethodInvocation invocation) throws Throwable { before(invocation.getMethod()); Object invoke = null; try { invoke = super.invoke(invocation); } finally { after(); } return invoke; } public void before(Method method) { // \u8fd9\u91cc\u90fd\u62ff\u5230method\u5bf9\u8c61\u4e86\uff0c\u90a3\u901a\u8fc7\u53cd\u5c04\u53ef\u4ee5\u505a\u7684\u4e8b\u60c5\u5c31\u5f88\u591a\u4e86\uff0c\u80fd\u5230\u8fd9\u91cc\u6765\u7684\uff0c\u90a3\u65b9\u6cd5\u4e0a\u9762\u80af\u5b9a\u662f\u6709Transactional\u6ce8\u89e3\u7684\uff0c\u62ff\u5230\u5b83\u5e76\u83b7\u53d6\u76f8\u5173\u5c5e\u6027\uff0c\u5982\u679c\u4e8b\u52a1\u5c5e\u6027\u4e3a\u53ea\u8bfb\u7684\uff0c\u90a3\u6beb\u65e0\u7591\u95ee\u53ef\u4ee5\u628a\u5b83\u5bf9\u6570\u636e\u7684\u8bf7\u6c42\u6253\u5230\u4ece\u5e93 Transactional transactional = method.getAnnotation(Transactional.class); boolean readOnly = transactional.readOnly(); if (readOnly) { // \u53ea\u8bfb\u4e8b\u52a1\uff0c\u5207\u6362\u5230mysql\u7684\u4ece\u5e93 changeDatasource(DatasourceType.SLAVE); } else { // \u975e\u53ea\u8bfb\u4e8b\u52a1\uff0c\u5207\u6362\u5230mysql\u4e3b\u5e93 changeDatasource(DatasourceType.MASTER); } } public void after() { // \u6e05\u9664\u6570\u636e\u6e90\u8bbe\u7f6e changeDatasource(DatasourceType.CLEAN); } private void changeDatasource(DatasourceType type) { //\u6a21\u62df\u6570\u636e\u6e90\u5207\u6362 System.out.println(\"\\n\\n\\n===========================================================\"); System.out.println(\"Datasource = \" + type); System.out.println(\"===========================================================\\n\\n\\n\"); } } enum DatasourceType { MASTER, SLAVE, CLEAN }","title":"\u91cd\u5199\u4e8b\u52a1\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_7","text":"\u5c06\u81ea\u5df1\u91cd\u5199\u540e\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u8bbe\u7f6e\u5230 advisor \u4e2d\uff0c\u5c06\u5b83\u9ed8\u8ba4\u7684\u8986\u76d6\u6389 @Configuration public class TransactionConfig implements InitializingBean, BeanFactoryAware { @Override public void afterPropertiesSet() throws Exception { // \u83b7\u53d6\u589e\u5f3a\u5668 BeanFactoryTransactionAttributeSourceAdvisor advisor = factory.getBean(BeanFactoryTransactionAttributeSourceAdvisor.class); PlatformTransactionManager platformTransactionManager = factory.getBean(PlatformTransactionManager.class); // spring\u539f\u6709\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u7528\u7684\u5c31\u662f\u6ce8\u89e3\u7c7b\u578b\u7684\u4e8b\u52a1\u5c5e\u6027\u6e90\uff0c\u90a3\u6211\u4eec\u4e5f\u7528\u8fd9\u4e2a\uff0c\u4e0d\u7136\u4f60\u7684\u4e8b\u52a1\u6ce8\u89e3\u5c31\u5931\u6548\u4e86\uff0c\u90a3\u4e0d\u5c31\u767d\u5fd9\u6d3b\u4e86\u4e48 TransactionAttributeSource attributeSource = new AnnotationTransactionAttributeSource(); // \u5b9e\u4f8b\u5316\u81ea\u5df1\u7684\u4e8b\u52a1\u62e6\u622a\u5668 CustomInterceptor advice = new CustomInterceptor(platformTransactionManager, attributeSource); // \u628a\u5b83\u539f\u6709\u7684\u4e8b\u52a1\u62e6\u622a\u5668\u66ff\u6362\u6210\u81ea\u5df1\u7684\uff0c\u56e0\u4e3a\u4f60\u91cd\u5199\u7684\u4e8b\u52a1\u62e6\u622a\u662f\u7ee7\u627f\u5b83\u539f\u6709\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u641e advisor.setAdvice(advice); } private DefaultListableBeanFactory factory; @Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException { if (beanFactory instanceof DefaultListableBeanFactory) { this.factory = (DefaultListableBeanFactory) beanFactory; } } } \u5230\u8fd9\u91cc\uff0c\u5bf9\u4e8e\u63a5\u53e3\u4e0a\u6709\u4e8b\u52a1\u6ce8\u89e3\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u52a8\u6001\u7684\u5207\u6362\u5b83\u7684\u6570\u636e\u6e90\u4e86\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u4e0d\u7528\u81ea\u5b9a\u6ce8\u89e3\uff0c\u76f4\u63a5\u7528spring\u81ea\u5e26\u7684\u6ce8\u89e3\u5c31\u597d\u3002 \u90a3\u7ecf\u8fc7\u4e0a\u9762\u7684\u4e00\u987f\u64cd\u4f5c\u540e\uff0c\u7ec8\u4e8e\u53ef\u4ee5\u5728\u4e8b\u52a1\u7684\u524d\u540e\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u4e86\u3002 \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u6765\u5c06\uff0c\u8fd9\u4e2a\u65b9\u6848\u786e\u5b9e\u89e3\u51b3\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u95ee\u9898\uff0c\u4f46\u4e5f\u53ea\u662f\u4ec5\u9650\u4e8espring\u7684\u4e8b\u52a1\u6ce8\u89e3\u3002\u90a3\u5bf9\u4e8e\u672c\u6587\u6807\u9898\u6240\u8ff0\u7684\u95ee\u9898\uff0c\u5728\u672c\u8d28\u4e0a\u5e76\u6ca1\u6709\u5f97\u5230\u89e3\u51b3\uff0c\u56e0\u4e3a\u4e8b\u52a1\u8fd9\u91cc\u662fspring-transaction\u6a21\u5757\u5b9e\u73b0\u7684\u6ce8\u89e3\u5904\u7406\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u662f\u7528\u4e86\u4e00\u79cd\u6295\u673a\u53d6\u5de7\u7684\u65b9\u6cd5\u8fbe\u5230\u4e86\u76ee\u7684\u800c\u5df2\u3002","title":"\u8bbe\u7f6e\u62e6\u622a\u5668"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_8","text":"\u6240\u8c13\u901a\u7528\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u6a21\u4effspring-transaction\u5199\u4e00\u4e2a\u81ea\u5df1\u7684\u65b9\u6cd5\u62e6\u622a\u5668\uff0c\u90a3\u8fd9\u91cc\u5c31\u4e0d\u9650\u4e8e\u6ce8\u89e3\u4e86\uff0c\u901a\u8fc7\u6ce8\u89e3\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u4e0d\u8fc7\u9664\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7spring aop\u62e6\u622a\u5916\uff0c\u5176\u4ed6\u7684\u65b9\u5f0f\u597d\u50cf\u90fd\u53ef\u4ee5\u901a\u8fc7spring aop\u76f4\u63a5\u5b9e\u73b0\u3002 \u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\u62e6\u622a\u5668\uff1a \u521b\u5efa ProxyFactoryBean \u9700\u8981\u6709\u4e00\u4e2a Advisor \u5bf9\u8c61\uff08 AbstractBeanFactoryPointcutAdvisor \uff09\uff0c\u7136\u540e\u628a\u8fd9\u4e2aadvisor\u5bf9\u8c61\u8bbe\u7f6e\u5230 ProxyFactoryBean \u4e2d \u9700\u8981\u6709\u4e00\u4e2a PointCut \u5bf9\u8c61\uff08 StaticMethodMatcherPointcut \uff09\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 advisor \u5bf9\u8c61\u4e2d \u9700\u8981\u6709\u4e00\u4e2a Advice \u5bf9\u8c61\uff08 MethodInterceptor \uff09\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 advisor \u5bf9\u8c61\u4e2d","title":"\u901a\u7528\u89e3\u51b3\u65b9\u6848"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#demo","text":"/** * \u4e1a\u52a1\u63a5\u53e3 */ interface Service { void test1(); /** * \u6253\u4e0a\u6807\u8bb0\uff0c\u9700\u8981\u88ab\u62e6\u622a\u7684\u65b9\u6cd5 */ @DataSource void test2(); } /** * \u4e1a\u52a1\u5b9e\u73b0 */ class ServiceImpl implements Service { @Override public void test1() { System.out.println(\"hello world\"); } @Override public void test2() { System.out.println(\"I'm doing something in DB\"); } } /** * \u65b9\u6cd5\u62e6\u622a\u6807\u8bb0 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE, ElementType.METHOD}) @interface DataSource { } class DataSourceAdvisor extends AbstractBeanFactoryPointcutAdvisor { private DataSourcePointCut pointCut; public void setPointCut(DataSourcePointCut pointCut) { this.pointCut = pointCut; } @Override public Pointcut getPointcut() { return pointCut; } } class DataSourceInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(\"==============\" + name + \" before ================\"); Object result = invocation.proceed(); System.out.println(\"==============\" + name + \" after ================\"); return result; } } class DataSourcePointCut extends StaticMethodMatcherPointcut { /** * \u65b9\u6cd5\u5339\u914d\u5668\uff0c\u8fd9\u4e2a\u624d\u662f\u771f\u6b63\u8d77\u4f5c\u7528\u7684\u4e3b * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return method.isAnnotationPresent(DataSource.class); } } /** * \u5355\u5143\u6d4b\u8bd5 */ public class MethodInterceptorTest { private ProxyFactoryBean proxyFactoryBean; @BeforeEach public void before() { Service service = new ServiceImpl(); ProxyFactoryBean pfb = new ProxyFactoryBean(); // \u8bbe\u7f6e\u54ea\u4e2a\u5bf9\u8c61\u9700\u8981\u88ab\u4ee3\u7406 pfb.setTarget(service); // \u521d\u59cb\u5316 advisor DataSourceAdvisor advisor = new DataSourceAdvisor(); // \u8bbe\u7f6epointcut advisor.setPointCut(new DataSourcePointCut()); // \u8bbe\u7f6e\u65b9\u6cd5\u62e6\u622a\u5668 advisor.setAdvice(new DataSourceInterceptor()); // \u5c06advisor\u6dfb\u52a0\u5230\u4ee3\u7406\u4e2d pfb.addAdvisor(advisor); proxyFactoryBean = pfb; } @Test public void test() { // \u901a\u8fc7\u4ee3\u7406\u751f\u6210 service \u5b9e\u4f8b Service proxy = (Service) proxyFactoryBean.getObject(); proxy.test1(); System.out.println(\"\\n\\n\"); proxy.test2(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230\u6210\u529f\u7684\u62e6\u622a\u5230\u4e86 service#test2 \u65b9\u6cd5\u3002\u5b9e\u73b0\u65b9\u6cd5\u62e6\u622a\u5c31\u8fd9\u4e48\u51e0\u4e2a\u6b65\u9aa4\uff0c\u8fd9\u662f\u4e00\u4e2abean\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u7684\u4f01\u4e1a\u7ea7\u5f00\u53d1\u4e2d\uff0c\u8fd9\u4e48\u5199\u5f88\u663e\u7136\u4e0d\u73b0\u5b9e\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u8981\u662f\u8fd9\u4e48\u5199\uff0c\u90a3\u5c31\u79bb\u62ce\u76d2\u996d\u4e0d\u8fdc\u4e86...","title":"demo"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#pro","text":"\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\u6211\u4eec\u53ea\u9700\u8981\u89e3\u51b3\u4e00\u4ef6\u4e8b\u60c5\uff0c\u90a3\u5c31\u662f\u8ba9spring\u80fd\u591f\u81ea\u52a8\u4e3a\u6211\u4eec\u521b\u5efa ProxyFactoryBean @SpringBootApplication public class DefaultProxyCreatorApplication { public static void main(String[] args) { SpringApplication.run(DefaultProxyCreatorApplication.class, args); } } public interface Test2Service { /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx void a(); void b(); void c(); } @Service public class Test2ServiceImpl implements Test2Service { @Override public void a() { System.out.println(\"test2 method a\"); } /** * \u88ab\u6807\u8bb0\u7684\u65b9\u6cd5 */ @Tx @Override public void b() { System.out.println(\"test2 method b\"); } @Override public void c() { System.out.println(\"test2 method c\"); } } @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.TYPE}) public @interface Tx { } public class TxInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation invocation) throws Throwable { String name = invocation.getMethod().getName(); System.out.println(String.format(\"------------%s: before----------\", name)); Object object = invocation.proceed(); System.out.println(String.format(\"------------%s: after----------\", name)); return object; } } public class TxMethodPointcutAdvisor extends StaticMethodMatcherPointcutAdvisor { /** * \u62e6\u622a\u89c4\u5219\uff1a * 1: \u63a5\u53e3\u7c7b\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * 2: \u63a5\u53e3\u65b9\u6cd5\u540d\u4e0a\u6709 @Tx \u6ce8\u89e3 * * @param method * @param targetClass * @return */ @Override public boolean matches(Method method, Class<?> targetClass) { return methodCanPass(method) || classCanPass(method.getDeclaringClass()); } private boolean methodCanPass(Method method) { return method.isAnnotationPresent(Tx.class); } private boolean classCanPass(Class<?> clazz) { return clazz.isAnnotationPresent(Tx.class); } } @Configuration public class AopConfig { @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() { // \u8fd9\u4e2a\u7c7b\u5c31\u662f\u81ea\u52a8\u4ee3\u7406\u521b\u5efa\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u7684\u4e3a\u6bcf\u4e2abean\u751f\u6210\u4ee3\u7406 return new DefaultAdvisorAutoProxyCreator(); } @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); return advisor; } @Bean public TxInterceptor methodInterceptor() { return new TxInterceptor(); } } \u521b\u5efa\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u9a8c\u8bc1\u529f\u80fd @SpringBootTest class TxInterceptorTest { @Autowired private Test2Service test2Service; @Test void test1() { test2Service.a(); System.out.println(\"\\n\"); test2Service.b(); System.out.println(\"\\n\"); test2Service.c(); } } \u5355\u5143\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230 service#a \u548c service#b \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u88ab\u62e6\u622a\u5230\u4e86\u3002\u5176\u4e2d\u65b9\u6cd5 a \u7684\u6ce8\u89e3\u5728\u63a5\u53e3\u4e0a\uff0c\u65b9\u6cd5b\u7684\u6ce8\u89e3\u5728\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u89c1\u8fd9\u5df2\u7ecf\u8fbe\u5230\u4e86\u6211\u7684\u76ee\u7684\uff0c\u6210\u529f\u7684\u62e6\u622a\u5230\u4e86\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\u3002","title":"Pro\u7248"},{"location":"spring/Spring%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8/#_9","text":"\u90a3\u5982\u679c\u8bf4\u4ec5\u4ec5\u5c06\u4e0a\u9762\u7684\u914d\u7f6e\u4ee3\u7801\u590d\u5236\u5230\u9879\u76ee\u4e2d\u53bb\u7528\u7684\u8bdd\uff0c\u662f\u53ef\u4ee5\u62e6\u622a\u63a5\u53e3\u65b9\u6cd5\u6ce8\u89e3\u7684\uff0c\u4f46\u662f\u5982\u679c\u8981\u548cspring\u7684\u4e8b\u52a1\u6ce8\u89e3\u4e00\u8d77\u7528\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u8981\u5931\u671b\u4e86\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5148\u7ecf\u8fc7\u4e8b\u52a1\u7684\u62e6\u622a\uff0c\u7136\u540e\u624d\u5230\u4f60\u7684\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\uff0c\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u7b80\u5355\uff0c\u5c06advisor\u8bbe\u7f6e\u4e00\u4e2a\u6267\u884c\u987a\u5e8f\u5c31\u53ef\u4ee5\u4e86 @Bean public TxMethodPointcutAdvisor methodPointcutAdvisor(TxInterceptor txInterceptor) { TxMethodPointcutAdvisor advisor = new TxMethodPointcutAdvisor(); advisor.setAdvice(txInterceptor); advisor.setOrder(1);//\u8bbe\u7f6e\u987a\u5e8f\uff0c\u503c\u8d8a\u5c0f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u4e5f\u5c31\u662f\u8d8a\u88ab\u5148\u6267\u884c return advisor; } advisor.setOrder(1) \u90a3\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u53d6\u7684\u5462\uff0c\u96be\u9053\u8bbe\u7f6e\u62101\u5c31\u4e00\u5b9a\u4f1a\u88ab\u5148\u6267\u884c\u4e48\uff0c \u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230spring\u4e8b\u52a1\u7684advisor\u6267\u884c\u987a\u5e8f\u503c\u4e3aInteger\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u4e5f\u5c31\u662f\u4f60\u968f\u4fbf\u8bbe\u7f6e\u4e00\u4e2a\u503c\uff08\u53ea\u8981\u5b83\u4e0d\u662fInteger.MAX_VALUE\uff09\uff0c\u5b83\u90fd\u4f1a\u6bd4spring\u4e8b\u52a1\u62e6\u622a\u5668\u5148\u6267\u884c\u3002","title":"\u6ce8\u610f\u7ec6\u8282"},{"location":"spring/Spring%20Boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/","text":"new SpringApplication(sources) \u5224\u65ad\u662f\u5426\u4e3aweb\u73af\u5883 \u8bfb\u53d6 META-INF/spring.factories \u914d\u7f6e\u6587\u4ef6 \u5b9e\u4f8b\u5316\u5b9e\u4f8b\u5316springFactories \u8bbe\u7f6e\u76d1\u542c run(args) \u5f00\u542f\u79d2\u8868\u8ba1\u65f6\u76d1\u63a7 \u8bbe\u7f6e headless\u6a21\u5f0f \u83b7\u53d6\u6240\u6709\u7684SpringApplicationRunListeners\uff08\u76d1\u542c\u7a0b\u5e8f\u542f\u52a8\u7684\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u505a\u4e00\u4e9b\u81ea\u5df1\u7684\u4e8b\u60c5\uff09\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e9b\u76d1\u542c listeners.starting() \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5e94\u7528\u53c2\u6570\u5b9e\u4f8b\uff08\u5c31\u662f\u5c06 main \u65b9\u6cd5\u7684\u53c2\u6570\u5305\u88c5\u6210 DefaultApplicationArguments \uff09 \u51c6\u5907\u73af\u5883\uff08 Environment \uff09\uff0c\u8fd9\u91cc\u9762\u6709\u5f88\u591a\u64cd\u4f5c prepareEnvironment(listeners,applicationArguments) \u6253\u5370banner\uff08\u5c31\u662f\u63a7\u5236\u53f0\u4e0a\u9762spring\u7684\u90a3\u4e2alogo\uff09 printBanner(environment) \u521b\u5efaspring\u4e0a\u4e0b\u6587 createApplicationContext \u2014\u2014\u91cd\u70b9 \u521b\u5efa\u4e00\u4e2a\u6545\u969c\u5206\u6790\u5668 new FailureAnalyzers(context) \u51c6\u5907\u4e0a\u4e0b\u6587 prepareContext(context, environment, listeners, applicationArguments,printedBanner) \u2014\u2014\u91cd\u70b9 \u5237\u65b0\u4e0a\u4e0b\u6587 refreshContext(context) \u2014\u2014\u91cd\u70b9 \u5237\u65b0\u4e0a\u4e0b\u6587\u540e\u7684\u540e\u7f6e\u5904\u7406 afterRefresh(context, applicationArguments) \u4e3b\u7a0b\u5e8f\u4e2d\u7684run\u65b9\u6cd5\u5b8c\u6210\u540e\u518d\u6b21\u8c03\u7528\u7b2c3\u6b65\u7684\u76d1\u542c\uff0c listeners.finished(context, null) \u505c\u6b62\u79d2\u8868","title":"Spring Boot\u542f\u52a8\u6d41\u7a0b"},{"location":"spring/Spring%20Boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/#new-springapplicationsources","text":"\u5224\u65ad\u662f\u5426\u4e3aweb\u73af\u5883 \u8bfb\u53d6 META-INF/spring.factories \u914d\u7f6e\u6587\u4ef6 \u5b9e\u4f8b\u5316\u5b9e\u4f8b\u5316springFactories \u8bbe\u7f6e\u76d1\u542c","title":"new SpringApplication(sources)"},{"location":"spring/Spring%20Boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/#runargs","text":"\u5f00\u542f\u79d2\u8868\u8ba1\u65f6\u76d1\u63a7 \u8bbe\u7f6e headless\u6a21\u5f0f \u83b7\u53d6\u6240\u6709\u7684SpringApplicationRunListeners\uff08\u76d1\u542c\u7a0b\u5e8f\u542f\u52a8\u7684\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u505a\u4e00\u4e9b\u81ea\u5df1\u7684\u4e8b\u60c5\uff09\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e9b\u76d1\u542c listeners.starting() \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5e94\u7528\u53c2\u6570\u5b9e\u4f8b\uff08\u5c31\u662f\u5c06 main \u65b9\u6cd5\u7684\u53c2\u6570\u5305\u88c5\u6210 DefaultApplicationArguments \uff09 \u51c6\u5907\u73af\u5883\uff08 Environment \uff09\uff0c\u8fd9\u91cc\u9762\u6709\u5f88\u591a\u64cd\u4f5c prepareEnvironment(listeners,applicationArguments) \u6253\u5370banner\uff08\u5c31\u662f\u63a7\u5236\u53f0\u4e0a\u9762spring\u7684\u90a3\u4e2alogo\uff09 printBanner(environment) \u521b\u5efaspring\u4e0a\u4e0b\u6587 createApplicationContext \u2014\u2014\u91cd\u70b9 \u521b\u5efa\u4e00\u4e2a\u6545\u969c\u5206\u6790\u5668 new FailureAnalyzers(context) \u51c6\u5907\u4e0a\u4e0b\u6587 prepareContext(context, environment, listeners, applicationArguments,printedBanner) \u2014\u2014\u91cd\u70b9 \u5237\u65b0\u4e0a\u4e0b\u6587 refreshContext(context) \u2014\u2014\u91cd\u70b9 \u5237\u65b0\u4e0a\u4e0b\u6587\u540e\u7684\u540e\u7f6e\u5904\u7406 afterRefresh(context, applicationArguments) \u4e3b\u7a0b\u5e8f\u4e2d\u7684run\u65b9\u6cd5\u5b8c\u6210\u540e\u518d\u6b21\u8c03\u7528\u7b2c3\u6b65\u7684\u76d1\u542c\uff0c listeners.finished(context, null) \u505c\u6b62\u79d2\u8868","title":"run(args)"},{"location":"spring/spring%20bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","text":"Spring Bean\u751f\u547d\u5468\u671f Bean factory implementations should support the standard bean lifecycle interfaces as far as possible. The full set of initialization methods and their standard order is: ==BeanNameAware's setBeanName == ==BeanClassLoaderAware's setBeanClassLoader == ==BeanFactoryAware's setBeanFactory == ==EnvironmentAware's setEnvironment == ==EmbeddedValueResolverAware's setEmbeddedValueResolver == ResourceLoaderAware's setResourceLoader (only applicable when running in an application context) ApplicationEventPublisherAware's setApplicationEventPublisher (only applicable when running in an application context) MessageSourceAware's setMessageSource (only applicable when running in an application context) ApplicationContextAware's setApplicationContext (only applicable when running in an application context) ServletContextAware's setServletContext (only applicable when running in a web application context) == postProcessBeforeInitialization methods of BeanPostProcessors== ==InitializingBean's afterPropertiesSet == ==a custom init-method definition== == postProcessAfterInitialization methods of BeanPostProcessors== On shutdown of a bean factory, the following lifecycle methods apply: postProcessBeforeDestruction methods of DestructionAwareBeanPostProcessors DisposableBean's destroy a custom destroy-method definition","title":"Spring Bean\u751f\u547d\u5468\u671f"},{"location":"spring/spring%20bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#spring-bean","text":"Bean factory implementations should support the standard bean lifecycle interfaces as far as possible. The full set of initialization methods and their standard order is: ==BeanNameAware's setBeanName == ==BeanClassLoaderAware's setBeanClassLoader == ==BeanFactoryAware's setBeanFactory == ==EnvironmentAware's setEnvironment == ==EmbeddedValueResolverAware's setEmbeddedValueResolver == ResourceLoaderAware's setResourceLoader (only applicable when running in an application context) ApplicationEventPublisherAware's setApplicationEventPublisher (only applicable when running in an application context) MessageSourceAware's setMessageSource (only applicable when running in an application context) ApplicationContextAware's setApplicationContext (only applicable when running in an application context) ServletContextAware's setServletContext (only applicable when running in a web application context) == postProcessBeforeInitialization methods of BeanPostProcessors== ==InitializingBean's afterPropertiesSet == ==a custom init-method definition== == postProcessAfterInitialization methods of BeanPostProcessors== On shutdown of a bean factory, the following lifecycle methods apply: postProcessBeforeDestruction methods of DestructionAwareBeanPostProcessors DisposableBean's destroy a custom destroy-method definition","title":"Spring Bean\u751f\u547d\u5468\u671f"},{"location":"spring/spring%20boot%20jvm%20%E5%86%85%E5%AD%98%E8%AE%BE%E7%BD%AE/","text":"\u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58 -XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=64m -Xms100m -Xmx100m -Xmn100m -Xss256k -XX:SurvivorRatio=8 -XX:+UseG1GC -XX:+PrintGCDetails","title":"\u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58"},{"location":"spring/spring%20boot%20jvm%20%E5%86%85%E5%AD%98%E8%AE%BE%E7%BD%AE/#8gspring-boot-jvm","text":"-XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=64m -Xms100m -Xmx100m -Xmn100m -Xss256k -XX:SurvivorRatio=8 -XX:+UseG1GC -XX:+PrintGCDetails","title":"\u4f4e\u914d\uff088g\u5185\u5b58\uff09\u7535\u8111\u5982\u4f55\u8bbe\u7f6espring-boot jvm\u5185\u5b58"}]}